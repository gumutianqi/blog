<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LarryKoo&#39;s Note</title>
    <link>http://gumutianqi.github.io/blog/</link>
    <atom:link href="/blog/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>一个爱穿NB的JAVA码农</description>
    <pubDate>Tue, 10 Jul 2018 12:41:29 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>从0发布一个构建到 Maven 中央仓库</title>
      <link>http://gumutianqi.github.io/blog/2018/07/10/deploy-to-sonatype/</link>
      <guid>http://gumutianqi.github.io/blog/2018/07/10/deploy-to-sonatype/</guid>
      <pubDate>Tue, 10 Jul 2018 11:58:08 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;原创内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这之前一直使用 Nexus OSS 的搭建私有仓库，今天想起折腾一下如何将一个构建发布到 Maven 的中央仓库当中，于是有了下面的云云……&lt;/p&gt;
&lt;img src=&quot;/blog/2018/07/10/deploy-to-sonatype/sonatype.jpg&quot; title=&quot;[Sonatype 官网]&quot;&gt;
&lt;hr&gt;
&lt;h1 id=&quot;从0发布一个构建到Maven中央仓库&quot;&gt;&lt;a href=&quot;#从0发布一个构建到Maven中央仓库&quot; class=&quot;headerlink&quot; title=&quot;从0发布一个构建到Maven中央仓库&quot;&gt;&lt;/a&gt;从0发布一个构建到Maven中央仓库&lt;/h1&gt;&lt;h2 id=&quot;注册-Sonatype-账号&quot;&gt;&lt;a href=&quot;#注册-Sonatype-账号&quot; class=&quot;headerlink&quot; title=&quot;注册 Sonatype 账号&quot;&gt;&lt;/a&gt;注册 Sonatype 账号&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Sonatype官网：&lt;a href=&quot;http://www.sonatype.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.sonatype.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;注册地址：&lt;a href=&quot;https://issues.sonatype.org/secure/Signup!default.jspa&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://issues.sonatype.org/secure/Signup!default.jspa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;oss地址：&lt;a href=&quot;https://oss.sonatype.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://oss.sonatype.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;登录-Sonaytype-Jira-创建一个-issue&quot;&gt;&lt;a href=&quot;#登录-Sonaytype-Jira-创建一个-issue&quot; class=&quot;headerlink&quot; title=&quot;登录 Sonaytype Jira 创建一个 issue&quot;&gt;&lt;/a&gt;登录 Sonaytype Jira 创建一个 issue&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;创建一个 issue&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Project 选择 Community Support - Open Source Project Repository Hosting (OSSRH)&lt;/li&gt;
&lt;li&gt;Issue Type 选择 new Project&lt;/li&gt;
&lt;li&gt;Summary 输入你的 项目介绍&lt;/li&gt;
&lt;li&gt;GroupId 填写你的工程使用的 groupId，如 com.github.xxx，如果是其他，必须是自己的域名，必要时，管理员会要求你用填写域名的邮箱发送验证邮件来证明域名是你的；&lt;/li&gt;
&lt;li&gt;其他不用填写，直接点击 Create，创建一个 issue&lt;/li&gt;
&lt;li&gt;接下来就是等待回复了；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;issue审批通过之后你会收到回复，like this：&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;/blog/2018/07/10/deploy-to-sonatype/sonatype-issue.png&quot; title=&quot;[sonatype-issue]&quot;&gt;
&lt;p&gt;这样就算是审批通过了，接下来就可以开始进入下一步发布构建了；&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>原创内容</p></blockquote><p>在这之前一直使用 Nexus OSS 的搭建私有仓库，今天想起折腾一下如何将一个构建发布到 Maven 的中央仓库当中，于是有了下面的云云……</p><img src="/blog/2018/07/10/deploy-to-sonatype/sonatype.jpg" title="[Sonatype 官网]"><hr><h1 id="从0发布一个构建到Maven中央仓库"><a href="#从0发布一个构建到Maven中央仓库" class="headerlink" title="从0发布一个构建到Maven中央仓库"></a>从0发布一个构建到Maven中央仓库</h1><h2 id="注册-Sonatype-账号"><a href="#注册-Sonatype-账号" class="headerlink" title="注册 Sonatype 账号"></a>注册 Sonatype 账号</h2><ul><li>Sonatype官网：<a href="http://www.sonatype.org/" target="_blank" rel="noopener">http://www.sonatype.org/</a></li><li>注册地址：<a href="https://issues.sonatype.org/secure/Signup!default.jspa" target="_blank" rel="noopener">https://issues.sonatype.org/secure/Signup!default.jspa</a></li><li>oss地址：<a href="https://oss.sonatype.org" target="_blank" rel="noopener">https://oss.sonatype.org</a></li></ul><h2 id="登录-Sonaytype-Jira-创建一个-issue"><a href="#登录-Sonaytype-Jira-创建一个-issue" class="headerlink" title="登录 Sonaytype Jira 创建一个 issue"></a>登录 Sonaytype Jira 创建一个 issue</h2><p><strong>创建一个 issue</strong></p><ol><li>Project 选择 Community Support - Open Source Project Repository Hosting (OSSRH)</li><li>Issue Type 选择 new Project</li><li>Summary 输入你的 项目介绍</li><li>GroupId 填写你的工程使用的 groupId，如 com.github.xxx，如果是其他，必须是自己的域名，必要时，管理员会要求你用填写域名的邮箱发送验证邮件来证明域名是你的；</li><li>其他不用填写，直接点击 Create，创建一个 issue</li><li>接下来就是等待回复了；</li></ol><p><strong>issue审批通过之后你会收到回复，like this：</strong></p><img src="/blog/2018/07/10/deploy-to-sonatype/sonatype-issue.png" title="[sonatype-issue]"><p>这样就算是审批通过了，接下来就可以开始进入下一步发布构建了；</p><a id="more"></a><h2 id="更新本地-Maven-的-setting-xml-文件"><a href="#更新本地-Maven-的-setting-xml-文件" class="headerlink" title="更新本地 Maven 的 setting.xml 文件"></a>更新本地 Maven 的 setting.xml 文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- lang: xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>&lt;![CDATA[sonatype username]]&gt;<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>&lt;![CDATA[password]]&gt;<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生成-GPG-签名"><a href="#生成-GPG-签名" class="headerlink" title="生成 GPG 签名"></a>生成 GPG 签名</h2><p>在上一步等待 issue 审核的过程中，我们也不要闲着，开始折腾如何生成 GPG 签名，这是后续必须要经历的流程；</p><p><strong>这里我只演示 macOS 下生成和上次 GPG 的流程，其他 OS 的童鞋请自行 google</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> brew install gpg</span><br><span class="line">....</span><br><span class="line"><span class="meta">$</span> gpg --version</span><br><span class="line">gpg (GnuPG) 2.2.8</span><br><span class="line">libgcrypt 1.8.3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># 安装完成，开始生成</span><br><span class="line"><span class="meta">$</span> gpg --gen-key</span><br><span class="line"><span class="meta">#</span> 接下来会要求输入 username 和 email，请对号入座，确认信息之后会弹出一个 shell 对话框，要求输入签名秘钥passphrase，输入一个自己记得住的秘钥，一定要记下来，以后每次 deploy 都会使用到。确认后完成签名的生成。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 生成之后会打印一堆信息；最好保存下来，其中：</span><br><span class="line">....</span><br><span class="line">gpg: 密钥 B3A4160E0484CEF0 被标记为绝对信任</span><br><span class="line">....</span><br><span class="line">B3A 开头的那个为签名的公钥ID，下面会用到。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 可以通过下面的命令查看是否生成成功</span><br><span class="line"><span class="meta">$</span> gpg --list-keys</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 上传 GPG 公钥到秘钥服务器</span><br><span class="line"><span class="meta">$</span> gpg --keyserver hkp://pool.sks-keyservers.net --send-keys 公钥ID</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 通过下面的命令验证是否上传成功</span><br><span class="line"><span class="meta">$</span> gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 公钥ID</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 到这里，你可以去看看 sonatype issue 是不是已经有 comment 了</span><br></pre></td></tr></table></figure><h2 id="修改你的-POM-文件"><a href="#修改你的-POM-文件" class="headerlink" title="修改你的 POM 文件"></a>修改你的 POM 文件</h2><p>在你的 pom.xml 文件中添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;sonar&lt;/id&gt;</span><br><span class="line">        &lt;build&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;!-- GPG --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;$&#123;maven-gpg-plugin.version&#125;&lt;/version&gt;</span><br><span class="line">                    &lt;executions&gt;</span><br><span class="line">                        &lt;execution&gt;</span><br><span class="line">                            &lt;id&gt;sign-artifacts&lt;/id&gt;</span><br><span class="line">                            &lt;phase&gt;verify&lt;/phase&gt;</span><br><span class="line">                            &lt;goals&gt;</span><br><span class="line">                                &lt;goal&gt;sign&lt;/goal&gt;</span><br><span class="line">                            &lt;/goals&gt;</span><br><span class="line">                        &lt;/execution&gt;</span><br><span class="line">                    &lt;/executions&gt;</span><br><span class="line">                    &lt;configuration&gt;</span><br><span class="line">                        &lt;skip&gt;$&#123;gpg.skip&#125;&lt;/skip&gt;</span><br><span class="line">                    &lt;/configuration&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">            &lt;/plugins&gt;</span><br><span class="line">        &lt;/build&gt;</span><br><span class="line">        &lt;distributionManagement&gt;</span><br><span class="line">            &lt;snapshotRepository&gt;</span><br><span class="line">                &lt;id&gt;oss&lt;/id&gt;</span><br><span class="line">                &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots/&lt;/url&gt;</span><br><span class="line">            &lt;/snapshotRepository&gt;</span><br><span class="line">            &lt;repository&gt;</span><br><span class="line">                &lt;id&gt;oss&lt;/id&gt;</span><br><span class="line">                &lt;url&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt;</span><br><span class="line">            &lt;/repository&gt;</span><br><span class="line">        &lt;/distributionManagement&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">&lt;/profiles&gt;</span><br></pre></td></tr></table></figure><p>当然你还应该有一些默认的 plugin，例如：maven-compiler-plugin 和 maven-source-plugin 也是必须的，请自行添加；</p><p>昨晚上面的这些，一切就已经准备就绪了，如果遇到什么错误，可以查看文末的常见错误解决方案；或者 google，作为一个 coder，一定要学会 google，不要告诉我你不会！！！</p><h2 id="发布构建到-Sonatype"><a href="#发布构建到-Sonatype" class="headerlink" title="发布构建到 Sonatype"></a>发布构建到 Sonatype</h2><p>我 pom.xml 里面定义的 profiles id 为“sonar”，所以我执行下面的 Command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mvn clean deploy -Psonar</span><br><span class="line"></span><br><span class="line">## 过程中会要求输入前面生成 GPG 秘钥的 passphrase，输入即可</span><br></pre></td></tr></table></figure><p>如果执行报错，你可以添加 -e 打印具体什么错误，辅助解决问题；</p><p>如果不出意外，整个过程将会一帆风顺，刷过几屏日志之后，本地 Maven 构架就已经上传到 Sonatype 的 OSS 暂存仓库上了，注意只是StagingRepositories，还没有到中央仓库；</p><p>这是就可以登录 <a href="https://oss.sonatype.org/" target="_blank" rel="noopener">https://oss.sonatype.org/</a> 查看了<br>点击 左侧菜单栏当中的 Staging Repositiries，在右上角的搜索框中输入自己的 groupId 进行模糊检索；找到自己刚才 deploy 的构建；如下图所示：</p><img src="/blog/2018/07/10/deploy-to-sonatype/oss-staging.png" title="[OSS Staging Repositiries]"><p>勾选构建，点击 Close ，输入一段 Description 之后点击 Confirm 按钮；<br>之后需要等待一段时间，等 Close Staging 的状态生效之后，就可以再次登录oss找到自己的构建，选中之后，点击 Release 按钮；再次 Confirm 之后，恭喜你，你的构建已经正式发布到 Maven 中央仓库了。</p><p>接下来，到中央仓库：<a href="https://search.maven.org/" target="_blank" rel="noopener">https://search.maven.org/</a> 搜索到你的构建了，如果没有搜索到，稍等片刻一定会有的，OSS 同步到中央仓库需要一点点时间；</p><p>如果你已经在中央仓库搜索到自己的构建了，记得回到 sonatype 的 jira issue 里面回复管理员你已经完成了构建，可以 Close this issue 了；</p><h3 id="意外的惊喜"><a href="#意外的惊喜" class="headerlink" title="意外的惊喜"></a>意外的惊喜</h3><p>当你走过上面的全部流程，你一定会觉得偌大的Sonatype发布为啥这么繁琐复杂，那你一定错了，这只是第一次，接下来你已经拥有了发布相同groupId构建的权限；不需要再提 issue，直接 deploy 你的 maven 构建，登录 oss 找到 Staging 记录，依次点击Close……等待……Release……再等待一小会儿，你的构建就同步到中央仓库了。</p><p>当然别忘了，GPG 签名别丢，更换电脑可以安装 GPG 签名生成步骤生成新的 GPG 公私秘钥；</p><hr><h2 id="常见错误："><a href="#常见错误：" class="headerlink" title="常见错误："></a>常见错误：</h2><h3 id="gpg-签名时失败处理"><a href="#gpg-签名时失败处理" class="headerlink" title="gpg: 签名时失败处理"></a>gpg: 签名时失败处理</h3><blockquote><p>gpg: signing failed: Inappropriate ioctl for device</p></blockquote><p><strong>解决方案</strong></p><p>如果你 macOS，很可能遇到该问题；由于通过 brew 安装的GPG版本是最新版本，存在一些兼容性问题；需要在~/.gnupg目录下增加两个配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;use-agent \ npinentry-mode loopback&quot; &gt; gpg.conf</span><br><span class="line">echo &quot;allow-loopback-pinentry&quot; &gt; gpg-agent.conf</span><br></pre></td></tr></table></figure><h3 id="在-OSS-点击-Close-之后出现错误"><a href="#在-OSS-点击-Close-之后出现错误" class="headerlink" title="在 OSS 点击 Close 之后出现错误"></a>在 OSS 点击 Close 之后出现错误</h3><img src="/blog/2018/07/10/deploy-to-sonatype/close-error-0.png" title="[点击 Close 之后出错提示]"><p>如上图，构建行首的 Logo 上有一个红色的4，那就说明刚才的 Close 操作，验证没有通过；<br>点击之后，可以在下面下方的 Activity 中看到详细的错误，如下图：</p><img src="/blog/2018/07/10/deploy-to-sonatype/close-error-1.png" title="[查看错误详情]"><p><strong>解决方案</strong></p><p>其中每一次Close操作都会触发一次校验，校验有很多项，例如签名，POM 文件是否合法，是否包含源代码等等；齿轮是绿色的代表验证通过的项，红色的代表失败的验证项，点击可以查看具体失败的详细信息，对号入座解决问题即可，修改后重新 deploy 上来重复以上操作。</p><p>例如上图中，我的 pom 文件中缺少了 Project URL，验证没有通过；</p><h3 id="执行-Close-出现-Failed-Signature-Validation"><a href="#执行-Close-出现-Failed-Signature-Validation" class="headerlink" title="执行 Close 出现 Failed: Signature Validation"></a>执行 Close 出现 Failed: Signature Validation</h3><img src="/blog/2018/07/10/deploy-to-sonatype/failed-signature.png" title="[验证构建文件签名失败]"><p><strong>解决方案</strong></p><p>恭喜你，你跟我一样遇到这个麻烦的问题，使用 brew 安装的 GPG 明明上传了公钥，查询查询到了，倒是 sonatype 就是报找不到对应的秘钥；那怎么解决呢；这个应该确认还是没有上传成功的，只是我感觉上传成功了。</p><p>这个时候，我是这么解决的，到 <a href="https://gpgtools.org/" target="_blank" rel="noopener">https://gpgtools.org/</a> 上下载了macOS 版本的 GPG Suite Tools客户端工具，安装好之后，打开 GPG Keychain ，这是你可能会直接看到刚才生成的 GPG 秘钥被列出来，你只需要选中，然后右键选中 Send Public to Key Server，接着等待3-5秒，弹出提示 successfully，这一次是真的上传成功了；再次重复 deploy=》Close 操作，你会发现，很快就验证通过了，赶紧去点击 Release 发布吧，谢谢。</p>]]></content:encoded>
      
      <comments>http://gumutianqi.github.io/blog/2018/07/10/deploy-to-sonatype/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring-Boot项目中 Dockerfile 最佳实践</title>
      <link>http://gumutianqi.github.io/blog/2018/06/08/best-springboot-dockerfile/</link>
      <guid>http://gumutianqi.github.io/blog/2018/06/08/best-springboot-dockerfile/</guid>
      <pubDate>Fri, 08 Jun 2018 06:01:17 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;原创内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经过长期使用 Spring-Boot 和 Docker 的项目实践，现在将我们正在使用的 Dockerfile 分享出来供大家参考；&lt;/p&gt;
&lt;img src=&quot;/blog/2018/06/08/best-springboot-dockerfile/spring-boot-docker.png&quot; title=&quot;[Spring-Boot-Docker]&quot;&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>原创内容</p></blockquote><p>经过长期使用 Spring-Boot 和 Docker 的项目实践，现在将我们正在使用的 Dockerfile 分享出来供大家参考；</p><img src="/blog/2018/06/08/best-springboot-dockerfile/spring-boot-docker.png" title="[Spring-Boot-Docker]"><a id="more"></a><hr><h1 id="最佳-Dockerfile"><a href="#最佳-Dockerfile" class="headerlink" title="最佳 Dockerfile"></a>最佳 Dockerfile</h1><h2 id="废话不多说，直接上"><a href="#废话不多说，直接上" class="headerlink" title="废话不多说，直接上"></a>废话不多说，直接上</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># Version 1.0.0</span><br><span class="line"># Data 2018-06-16</span><br><span class="line">FROM weteam/java:jdk8</span><br><span class="line"></span><br><span class="line">LABEL maintainer=&quot;larrykoo@126.com&quot;</span><br><span class="line"></span><br><span class="line">RUN mvn clean package</span><br><span class="line"></span><br><span class="line">COPY dist/$APP_NAME-*.jar app.jar</span><br><span class="line"></span><br><span class="line">ENV APP_NAME=&quot;&lt;Your-App-Name&gt;&quot;</span><br><span class="line">ENV APP_VERSION=&quot;1.0.0&quot; \</span><br><span class="line">    APP_ENV=&quot;dev&quot; \</span><br><span class="line">    APP_CONFIG_ENABLED=&quot;true&quot; \</span><br><span class="line">    APP_CONFIG_URI=&quot;http://config-server:8080&quot; \</span><br><span class="line">    APP_CONFIG_USERNAME=&quot;root&quot; \</span><br><span class="line">    APP_CONFIG_PASSWORD=&quot;root&quot; \</span><br><span class="line">    APP_CONFIG_NAME=&quot;app&quot; \</span><br><span class="line">    APP_CONFIG_PROFILE=&quot;dev&quot; \</span><br><span class="line">    APP_CONFIG_LABEL=&quot;dev&quot; \</span><br><span class="line">    JVM_LOG_HOME=&quot;/logs/$APP_NAME&quot; \</span><br><span class="line">    JAVA_TIMEZONE=&quot;Asia/Shanghai&quot; \</span><br><span class="line">    JAVA_MEM_OPTS=&quot;-XX:MetaspaceSize=256m -XX:MaxMetaspaceSize=256m -Xss256K -XX:SurvivorRatio=8&quot; \</span><br><span class="line">    JAVA_JVM_OPTS=&quot;-Xms512m -Xmx1024m -Xmn128m&quot;</span><br><span class="line">ENV JAVA_OPTS=&quot;-Djava.security.egd=file:/dev/./urandom \</span><br><span class="line">        -Duser.timezone=$JAVA_TIMEZONE \</span><br><span class="line">        -Djava.awt.headless=true \</span><br><span class="line">        -Djava.net.preferIPv4Stack=true \</span><br><span class="line">        -XX:+PrintGCDetails \</span><br><span class="line">        -XX:+PrintGCApplicationStoppedTime \</span><br><span class="line">        -Xloggc:$JVM_LOG_HOME/gc.log \</span><br><span class="line">        -XX:+HeapDumpOnOutOfMemoryError \</span><br><span class="line">        -XX:HeapDumpPath=$JVM_LOG_HOME/heapdump.hprof &quot;</span><br><span class="line"></span><br><span class="line">VOLUME /logs</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT exec java -server $JAVA_JVM_OPTS $JAVA_MEM_OPTS $JAVA_OPTS -jar /app.jar \</span><br><span class="line">    --spring.profiles.active=$APP_ENV</span><br></pre></td></tr></table></figure><h2 id="Dockerfile-解析"><a href="#Dockerfile-解析" class="headerlink" title="Dockerfile 解析"></a>Dockerfile 解析</h2><p>// TODO</p>]]></content:encoded>
      
      <comments>http://gumutianqi.github.io/blog/2018/06/08/best-springboot-dockerfile/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Golang指南：顶级Golang框架、IDE和工具列表(转载)</title>
      <link>http://gumutianqi.github.io/blog/2017/11/21/golang-framework-ide-tools/</link>
      <guid>http://gumutianqi.github.io/blog/2017/11/21/golang-framework-ide-tools/</guid>
      <pubDate>Tue, 21 Nov 2017 03:11:18 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;本文转载自：&lt;a href=&quot;http://www.codeceo.com/article/golang-framework-ide-tools.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.codeceo.com/article/golang-framework-ide-tools.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自推出以来，Google的Go编程语言（Golang）越来越受主流用户的欢迎。在2016年12月的一份调研中，3,595名受访者中有89％表明他们在工作中或工作以外用Go语言编程。&lt;/p&gt;
&lt;img src=&quot;/blog/2017/11/21/golang-framework-ide-tools/go-logo-3.jpg&quot; title=&quot;[Go Nuts]&quot;&gt;
&lt;p&gt;此外，在编程语言中，Go语言在专业知识和偏好方面排名最高。2017年7月，在&lt;a href=&quot;https://www.tiobe.com/tiobe-index/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tiobe的年度编程语言排名&lt;/a&gt;中，Go语言从去年的第55名一跃跳到了第10名。&lt;/p&gt;
&lt;p&gt;显然，Go语言吸引了来自不同学科的许多&lt;a href=&quot;http://www.codeceo.com/&quot; title=&quot;程序员&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;程序员&lt;/a&gt;和软件开发外包专业人士。可以这么说，这全都是因为Go语言的易用性。&lt;/p&gt;
&lt;p&gt;作为一种编译型的开源编程语言，Go语言能使开发人员轻松构建简单可靠又高效的软件。它是更保守的语言，如C和C ++的创新和演变的产物。&lt;/p&gt;
&lt;p&gt;使用Go语言，可以减少代码输入量，并且编写稳健的API而不牺牲性能变得更加容易。 Go语言旨在实现可扩展性和并发性，从而实现优化。编译器可以在运行时前执行所有代码检查工作。&lt;/p&gt;
&lt;p&gt;我们收罗了Golang的顶级框架、IDE和工具列表，以供大家快速参考。建议添加到浏览器书签中，以便随时查看！&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>本文转载自：<a href="http://www.codeceo.com/article/golang-framework-ide-tools.html" target="_blank" rel="noopener">http://www.codeceo.com/article/golang-framework-ide-tools.html</a></p></blockquote><p>自推出以来，Google的Go编程语言（Golang）越来越受主流用户的欢迎。在2016年12月的一份调研中，3,595名受访者中有89％表明他们在工作中或工作以外用Go语言编程。</p><img src="/blog/2017/11/21/golang-framework-ide-tools/go-logo-3.jpg" title="[Go Nuts]"><p>此外，在编程语言中，Go语言在专业知识和偏好方面排名最高。2017年7月，在<a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener">Tiobe的年度编程语言排名</a>中，Go语言从去年的第55名一跃跳到了第10名。</p><p>显然，Go语言吸引了来自不同学科的许多<a href="http://www.codeceo.com/" title="程序员" target="_blank" rel="noopener">程序员</a>和软件开发外包专业人士。可以这么说，这全都是因为Go语言的易用性。</p><p>作为一种编译型的开源编程语言，Go语言能使开发人员轻松构建简单可靠又高效的软件。它是更保守的语言，如C和C ++的创新和演变的产物。</p><p>使用Go语言，可以减少代码输入量，并且编写稳健的API而不牺牲性能变得更加容易。 Go语言旨在实现可扩展性和并发性，从而实现优化。编译器可以在运行时前执行所有代码检查工作。</p><p>我们收罗了Golang的顶级框架、IDE和工具列表，以供大家快速参考。建议添加到浏览器书签中，以便随时查看！</p><a id="more"></a><hr><h1 id="Golang框架"><a href="#Golang框架" class="headerlink" title="Golang框架"></a>Golang框架</h1><p>Web框架可以帮助开发人员尽可能方便快捷地构建应用程序。Go语言还比较新，所以使用的框架带有充足的文档很重要。</p><p>这里有9个框架可帮助你使用Go语言构建项目。</p><h2 id="1-Revel"><a href="#1-Revel" class="headerlink" title="1.Revel"></a>1.Revel</h2><p>作为Go语言的高效生产力框架，<a href="https://revel.github.io/" target="_blank" rel="noopener">Revel</a>包含的Hot Code Reload工具可以让你在每次更改文件时重建项目。它还包括各种全面和高性能的功能，因此你不需要找外部库集成到框架中。</p><h2 id="2-Beego"><a href="#2-Beego" class="headerlink" title="2.Beego"></a>2.Beego</h2><p><a href="https://beego.me/" target="_blank" rel="noopener">Beego</a>是一个完整的<a href="http://www.codeceo.com/article/mvc-framework-mvc-design.html" title="MVC框架" target="_blank" rel="noopener">MVC框架</a>，有自己的日志库、ORM和Web框架。你不需要再去安装第三方库。它有一个称为Bee Tool的内置工具，用于监视代码更改，并在检测到更改时运行任务。</p><p>Beego可以为你节省很多时间，特别是在项目一开始，你要弄清楚日志框架或应用程序结构的时候。</p><h2 id="3-Martini"><a href="#3-Martini" class="headerlink" title="3.Martini"></a>3.Martini</h2><p>受Sinatra启发，<a href="https://github.com/go-martini/martini" target="_blank" rel="noopener">Martini</a>是一个极其轻巧但功能强大的框架。它被开发用于用Golang编写模块化Web应用程序和服务。</p><p>它的特点是非侵入式设计，快速易用，且包括各种处理程序和中间件。它能够为HTML5模式的AngularJS应用程序执行基本路由，异常处理和默认文档服务。</p><p>Martini的最佳功能是可以使用反射，它允许开发人员动态地将数据插入到处理函数中并添加新的服务。Martini也完全兼容http.HandlerFunc界面。不过，缺点在于Martini框架不再维护了。</p><h2 id="4-Gin-Gonic"><a href="#4-Gin-Gonic" class="headerlink" title="4.Gin Gonic"></a>4.Gin Gonic</h2><p><a href="https://gin-gonic.github.io/gin/" target="_blank" rel="noopener">Gin Gonic</a>是一个Web框架，有类似Martini的API，但性能更好。如果你以前使用过Martini，那么你也一定熟悉Gin Gonic。没用过Martini也没关系，只需要学习10分钟就能掌握Gin。就是这么容易！</p><p>Gin Gonic是一个极简化的框架，仅包含最重要的库和功能。这使得它非常适合开发高性能<a href="http://www.codeceo.com/article/rest-api.html" title="REST API" target="_blank" rel="noopener">REST API</a>。此外，它比Martini快四十倍。</p><p>你可以添加中间件、嵌套组、JSON验证以及渲染，并依然保持其最佳性能。Gin Gonic使用httprouter，Go语言最快的HTTP路由器。</p><h2 id="5-Buffalo"><a href="#5-Buffalo" class="headerlink" title="5.Buffalo"></a>5.Buffalo</h2><p>要构建Go语言新的Web应用程序，使用<a href="https://github.com/gobuffalo/buffalo" target="_blank" rel="noopener">Buffalo</a>是一个快速又简单的方法。当你开始一个新项目时，Buffalo可以为你提供一切——从前端到后端开发。</p><p>它具有热重载功能，这意味着dev命令将自动查看.go和.html文件。然后，它将为你重建并重启二进制文件。运行dev命令，你就能看到变化在你的眼前发生！</p><p>Buffalo不仅仅是一个框架——它也是一个整体的Web开发生态系统，可以让你直接构建应用程序。</p><h2 id="6-Goji"><a href="#6-Goji" class="headerlink" title="6.Goji"></a>6.Goji</h2><p><a href="https://goji.io/" target="_blank" rel="noopener">Goji</a>是一个轻量级的快速Web框架，将可组合性和简单性作为其主要优先级。很像net / http.ServeMux，Goji是一个极简的HTTP请求复用器。它包括Einhorn支持，允许在Goji中提供Websocket支持。</p><p>其他功能包括URL模式，可重新配置的中间件堆栈，正常关机等。Goji可以用于生产，并在若干组织中提供了数以亿计个请求。</p><h2 id="7-Tiger-Tonic"><a href="#7-Tiger-Tonic" class="headerlink" title="7.Tiger Tonic"></a>7.Tiger Tonic</h2><p>受Dropwizard启发，<a href="https://github.com/rcrowley/go-tigertonic" target="_blank" rel="noopener">Tiger Tonic</a>是开发JSON Web服务和构建高性能REST API的Go框架。为了忠于Golang的原则，Tiger Tonic努力保持正交特性。</p><p>Tiger Tonic的缺点在于构建大型后端应用程序尚有不足之处。</p><h2 id="8-Gocraft"><a href="#8-Gocraft" class="headerlink" title="8. Gocraft"></a>8. Gocraft</h2><p>这是又一个强大而简约的框架，<a href="https://github.com/gocraft/web" target="_blank" rel="noopener">Gocraft</a>提供快速和可扩展的路由性能。它将路由添加来自标准库的net / http包中。</p><p>Gocraft是一个Go mux和中间件软件包，具有强大的投射和反射能力，可以静态输入代码。你还可以使用内置中间件添加可选功能或者自己编写。</p><p>由于性能始终是开发人员最关心的问题之一，所以Gocraft是开发人员的绝佳选择。而且使用Gocraft框架编写后端Web应用程序很容易。</p><h2 id="9-Mango"><a href="#9-Mango" class="headerlink" title="9.Mango"></a>9.Mango</h2><p>虽然<a href="https://github.com/paulbellamy/mango" target="_blank" rel="noopener">Mango</a>没有得到创作者Paul Bellamy的积极维护，但Go语言的许多用户仍然在使用它。Mango的优势在于它的模块化。你可以从各种库中选择，以包含在你的项目中。</p><p>Mango让你可以尽可能快速又轻松地构建可重复使用的HTTP功能模块。它将一系列中间件和应用程序编译成单个HTTP服务器对象，以保持代码独立。</p><h1 id="Golang的集成开发环境（IDE）"><a href="#Golang的集成开发环境（IDE）" class="headerlink" title="Golang的集成开发环境（IDE）"></a>Golang的集成开发环境（IDE）</h1><p>Golang的IDE随着Go语言的普及越来越受大家的欢迎。虽然还是有许多开发人员仍然喜欢使用<a href="http://www.codeceo.com/article/2015-12-best-editor.html" title="文本编辑器" target="_blank" rel="noopener">文本编辑器</a>，但也有很多开发人员更倾向于使用IDE。</p><p>如果你正工作于具有广泛代码库的大型项目，那么IDE可以帮助你轻松组织代码和导航。此外，IDE可以帮助你测试代码并相应地编辑。</p><p>以下是用Golang工作良好的顶尖IDE。</p><h2 id="1-Gogland"><a href="#1-Gogland" class="headerlink" title="1.Gogland"></a>1.Gogland</h2><p>软件开发公司JetBrains发布了另一个可靠的IDE，这次是针对Golang发布的。<a href="https://www.jetbrains.com/go/" target="_blank" rel="noopener">Gogland</a>是一个商业IDE，为Go开发人员提供了一个强大的人机工程学环境。它还具有编码协助、调试器和集成终端的功能。</p><p>由于Gogland是由一家已成立的公司创建的，所以它拥有广泛的IntelliJ插件生态系统，让你可以在需要更多工具的时候获得更多。</p><h2 id="2-Visual-Studio-Code"><a href="#2-Visual-Studio-Code" class="headerlink" title="2. Visual Studio Code"></a>2. <a href="http://www.codeceo.com/article/visual-studio-code-usage.html" title="Visual Studio Code" target="_blank" rel="noopener">Visual Studio Code</a></h2><p>由Microsoft创建的<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>是一个功能齐全的开源IDE和代码编辑器，支持各种各样的编程语言。它的特点是智能完成；使用断点调用、调用堆栈和交互式控制台调试；内置Git集成；以及分层文件夹和文件浏览器。</p><p>作为另一个流行的IDE，Visual Studio Code有一个Go开发人员定期贡献的支持社区。使用Visual Studio Code，你可以使用可用插件数组来扩展功能。</p><h2 id="3-LiteIDE"><a href="#3-LiteIDE" class="headerlink" title="3. LiteIDE"></a>3. LiteIDE</h2><p><a href="https://github.com/visualfc/liteide" target="_blank" rel="noopener">LiteIDE</a>是五年多前创建的首个以Golang为中心的开源IDE。作为具有独特外观的C ++ Qt应用程序，LiteIDE提供代码管理、可配置构建命令、gdb和Delve调试器，使用WordApi——基于MIME类型的系统——自动完成和创建等等。它还提供JSON和Golang支持。</p><h2 id="4-Wide"><a href="#4-Wide" class="headerlink" title="4.Wide"></a>4.Wide</h2><p><a href="https://github.com/b3log/wide" target="_blank" rel="noopener">Wide</a>是Golang程序员使用的基于Web的IDE。它专为协作开发而设计，适用于团队和Web开发机构。Wide功能包括代码高亮、调试、Git集成等。</p><p>因为Wide是由一名中国开发者创建和维护的，所以其大部分文档和支持是中文的。</p><h2 id="5-带有Go-Plus插件的Atom"><a href="#5-带有Go-Plus插件的Atom" class="headerlink" title="5.带有Go-Plus插件的Atom"></a>5.带有Go-Plus插件的Atom</h2><p>如果你已经在使用Atom，那么你可以通过一个名为<a href="https://atom.io/packages/go-plus" target="_blank" rel="noopener">go-plus</a>的<a href="http://www.codeceo.com/article/category/project" title="开源软件" target="_blank" rel="noopener">开源软件</a>包来改善Golang语言的代码编辑体验。使用go-plus，你可以立即获得关于语法和构建错误的实时反馈。</p><p>Go-plus软件包提供了几乎所有Atom中对Golang的支持。它还可以用于工具，构建流程，linters，vet和coverage工具。</p><p>Go-plus还包括各种代码片段和功能，如gocode的自动完成，gofmt、goreturns或goimports等的代码格式化。</p><h2 id="6-带有GoClipse的Eclipse"><a href="#6-带有GoClipse的Eclipse" class="headerlink" title="6.带有GoClipse的Eclipse"></a>6.带有GoClipse的Eclipse</h2><p>由于Eclipse是广受欢迎的IDE，因此我们为其创建了许多插件。<a href="https://github.com/GoClipse/goclipse" target="_blank" rel="noopener">GoClipse</a>是针对Golang的Eclipse插件，提供Go源代码编辑，具有可配置的语法高亮和自动缩进以及大括号完成功能。</p><p>GoClipse还可以作为项目向导和构建器来立即报告语法和构建错误。GoClipse的其他功能包括调试功能和代码辅助。</p><h2 id="7-带有GoSublime的Sublime-Text"><a href="#7-带有GoSublime的Sublime-Text" class="headerlink" title="7.带有GoSublime的Sublime Text"></a>7.带有GoSublime的Sublime Text</h2><p>Sublime Text也是一个复杂的文本编辑器，具有大量的贡献者和开发者社区。因此，开发者为此IDE创建了各种各样的插件。</p><p><a href="https://github.com/DisposaBoy/GoSublime" target="_blank" rel="noopener">GoSublime</a>是Sublime Text 3针对Golang的插件，在你编写代码时，提供来自Gocode的代码完成，lint /语法检查，自动添加和删除程序包导入，等等。</p><h2 id="8-带有Vim-Go插件的Vim"><a href="#8-带有Vim-Go插件的Vim" class="headerlink" title="8.带有Vim-Go插件的Vim"></a>8.带有Vim-Go插件的Vim</h2><p>Vim是一个免费的开源IDE，可以定制和配置各种插件。如果你是Golang程序员，那么你可以使用Vim中由Fatih Arslan创建的vim-go插件。Vim-go自动安装所有必需的二进制文件，为Golang提供平滑的Vim集成。</p><p><a href="https://github.com/fatih/vim-go" target="_blank" rel="noopener">Vim-go</a>是一款功能强大的插件套件，用于撰写和开发Go。其功能包括高级源代码分析，添加和删除导入路径，多次第三方支持，goto定义，快速文件执行等等。</p><p>Vim-go是高度可定制的，可以根据你的需要启用或禁用各种功能。</p><h2 id="9-Komodo"><a href="#9-Komodo" class="headerlink" title="9.Komodo"></a>9.Komodo</h2><p><a href="https://www.activestate.com/komodo-ide/golang-editor" target="_blank" rel="noopener">Komodo</a>是一个全功能的Go语言IDE，并且支持如Node.js，Python，Ruby，Perl等其他编程语言。使用这个Go IDE，你可以轻松地编写干净的代码。其功能包括高级代码编辑器，智能代码完成，语法检查，版本控制和单元测试，以及允许代码浏览和代码提示的Go Code Intelligence。</p><p>Komodo的优点是，它可以很好地协助团队合作，因为允许多个开发人员同时编辑文档。只要一个许可证，Komodo就可以安装在Mac，Windows或Linux上。</p><h2 id="10-带有Go语言（golang-org）支持插件的IntelliJ-IDEA"><a href="#10-带有Go语言（golang-org）支持插件的IntelliJ-IDEA" class="headerlink" title="10. 带有Go语言（golang.org）支持插件的IntelliJ IDEA"></a>10. 带有Go语言（golang.org）支持插件的IntelliJ IDEA</h2><p>IntelliJ IDEA（由JetBrains公司开发）是可以通过<a href="https://plugins.jetbrains.com/plugin/5047-go-language-golang-org-support-plugin" target="_blank" rel="noopener">Go语言支持插件</a>从而使用Golang的IDE。如果你想要在IntelliJ IDEA中使用Golang，那么你需要安装此插件，虽然不同于Gogland，它的功能有限。</p><h1 id="Golang工具"><a href="#Golang工具" class="headerlink" title="Golang工具"></a>Golang工具</h1><p>Golang工具可用于各种项目和Web应用程序。使用这些有用的工具可以帮助开发人员尽可能快速而轻松地编写代码并构建应用程序。</p><p>这里有一系列顶级的Golang工具以供参考。</p><h2 id="1-Apicompat"><a href="#1-Apicompat" class="headerlink" title="1.Apicompat"></a>1.Apicompat</h2><p><a href="https://github.com/bradleyfalzon/apicompat" target="_blank" rel="noopener">Apicompat</a>是一种新的Go语言工具，可帮助开发人员检测向后不兼容的更改和导出的声明。</p><p>你可以通过Apicompat避免误报。但是，Apicompat并不能检测到每个向后不兼容的变化。并且，库作者没有考虑到交换参数和其他更改的需要。</p><h2 id="2-Checkstyle"><a href="#2-Checkstyle" class="headerlink" title="2.Checkstyle"></a>2.Checkstyle</h2><p>受Java Checkstyle启发，针对Golang的<a href="https://github.com/qiniu/checkstyle" target="_blank" rel="noopener">Checkstyle</a>输出编码风格的建议。它还允许开发人员检查文件行/函数和行/参数号，然后由用户进行配置。</p><h2 id="3-Depth"><a href="#3-Depth" class="headerlink" title="3.Depth"></a>3.Depth</h2><p>又一个有用的Golang工具，<a href="https://github.com/KyleBanks/depth" target="_blank" rel="noopener">Depth</a>可帮助Web开发人员检索和可视化Go源代码依赖关系树。它可以用作独立的命令行应用程序或作为项目中的特定包。你可以通过在解析之前在Tree上设置相应的标志来添加自定义。</p><h2 id="4-Go-Swagger"><a href="#4-Go-Swagger" class="headerlink" title="4.Go-Swagger"></a>4.Go-Swagger</h2><p>该工具包包括各种功能和功能。<a href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener">Go-Swagger</a>是Swagger 2.0的一个实现，可以序列化和反序列化swagger规范。它是RESTful API简约但强大的代表。</p><p>通过Go-Swagger，你可以swagger规范文档，验证JSON模式以及其他额外的规则。其他功能包括代码生成，基于swagger规范的API生成，基于代码的规范文档生成，扩展了的字符串格式，等等。</p><h2 id="5-Go-Meta-Linter"><a href="#5-Go-Meta-Linter" class="headerlink" title="5.Go Meta Linter"></a>5.Go Meta Linter</h2><p>如果你需要运行Go lint工具并同时使其输出正常化，那么Go Meta Linter可以为你办到。<a href="https://github.com/alecthomas/gometalinter" target="_blank" rel="noopener">Go Meta Linter</a>旨在与文本编辑器或IDE集成，如如Sublime Linter插件，Atom go-plus包，Emacs Flycheck检查器，Vim / Neovim，以及Go for Visual Studio Code一起使用。它还支持各种各样的linter和配置文件，如JSON。</p><h2 id="6-Go-callvis"><a href="#6-Go-callvis" class="headerlink" title="6.Go-callvis"></a>6.Go-callvis</h2><p><a href="https://github.com/TrueFurby/go-callvis" target="_blank" rel="noopener">Go-callvis</a>是一个Web开发工具，允许你使用Graphviz的点格式可视化Go程序的调用图。此工具在构建具有复杂代码库的大型项目时特别有用。它在你想要了解另一个开发人员的代码结构或重建别人的项目时，也很有用。</p><p>通过go-callvis，开发人员可以在程序中关注特定包；根据软件包的分组函数和根据类型的方法；以及将软件包限制到自定义路径前缀，并忽略那些包含它们的自定义前缀。</p><h2 id="7-Gonative"><a href="#7-Gonative" class="headerlink" title="7.Gonative"></a>7.Gonative</h2><p><a href="https://github.com/inconshreveable/gonative" target="_blank" rel="noopener">Gonative</a>是一个简单的Golang工具，让你能够使用本机库构建Go工具链，而这可以在使用stdlib软件包的Cgo-enabled版本时进行交叉编译。</p><p>Gonative为每个平台下载二进制发行版，并将它们的库复制到正确的位置。同时，Gonative设置正确的mod时间，以避免不必要的重建。</p><p>不幸的是，Gonative在Windows上仍然未经测试。此外，也没有提供Linux / arm支持。</p><h2 id="8-Grapes"><a href="#8-Grapes" class="headerlink" title="8.Grapes"></a>8.Grapes</h2><p><a href="https://github.com/yaronsumel/grapes" target="_blank" rel="noopener">Grapes</a>是一种轻量级的Golang工具，旨在轻松地通过SSH分发命令。它由Yaron Sumel编写和积极维护。</p><p>Grapes不久将支持完整的主机密钥验证，这是开发人员应该注意到的。</p><h2 id="9-Gosimple"><a href="#9-Gosimple" class="headerlink" title="9.Gosimple"></a>9.Gosimple</h2><p>Golang linter的伟大之处在于它专注于简化Go源代码。Gosimple始终将最新的Go版本作为目标，因此它需要Go 1.6或更高版本。</p><p>如果有新的Go版本，gosimple会建议最轻松和最简单的方法来避免复杂的构造。</p><h2 id="10-Go-Vendor"><a href="#10-Go-Vendor" class="headerlink" title="10.Go Vendor"></a>10.Go Vendor</h2><p><a href="https://github.com/kardianos/govendor" target="_blank" rel="noopener">Go Vendor</a>是与标准Vendor文件夹兼容的Golang工具。它允许开发人员通过govendor add / update从$GOPATH中复制现有的依赖关系。你还可以通过govendor fetch直接提取新的依赖关系或更新现有的依赖关系，以及使用govendor迁移来移动旧的系统。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果你有JS / Node背景，那么你还需要学习一些新的编程概念，如协同程序，通道，严格的类型与编译，接口，结构，指针和其他一些差异。但是，一旦你进入状态，你会发现Golang用起来更容易，也更快。</p>]]></content:encoded>
      
      <comments>http://gumutianqi.github.io/blog/2017/11/21/golang-framework-ide-tools/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 多版本管理之 pyenv</title>
      <link>http://gumutianqi.github.io/blog/2017/10/23/python-versions-pyenv/</link>
      <guid>http://gumutianqi.github.io/blog/2017/10/23/python-versions-pyenv/</guid>
      <pubDate>Mon, 23 Oct 2017 06:22:32 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;经常遇到这样的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统自带的 Python 是 2.6，自己需要 Python 2.7 中的某些特性；&lt;/li&gt;
&lt;li&gt;系统自带的 Python 是 2.x，自己需要 Python 3.x；&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/blog/2017/10/23/python-versions-pyenv/python-pyenv-logo.png&quot; title=&quot;[python-pyenv-logo]&quot;&gt;
&lt;p&gt;此时需要在系统中安装多个 Python，但又不能影响系统自带的 Python，即需要实现 Python 的多版本共存。&lt;a href=&quot;https://github.com/yyuu/pyenv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pyenv&lt;/a&gt; 就是这样一个 Python 版本管理器。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>经常遇到这样的情况：</p><ul><li>系统自带的 Python 是 2.6，自己需要 Python 2.7 中的某些特性；</li><li>系统自带的 Python 是 2.x，自己需要 Python 3.x；</li></ul><img src="/blog/2017/10/23/python-versions-pyenv/python-pyenv-logo.png" title="[python-pyenv-logo]"><p>此时需要在系统中安装多个 Python，但又不能影响系统自带的 Python，即需要实现 Python 的多版本共存。<a href="https://github.com/yyuu/pyenv" target="_blank" rel="noopener">pyenv</a> 就是这样一个 Python 版本管理器。</p><a id="more"></a><h2 id="安装-Pyenv"><a href="#安装-Pyenv" class="headerlink" title="安装 Pyenv"></a>安装 Pyenv</h2><p>在终端执行如下命令以安装 pyenv 及其插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure><p>安装完成后，根据提示将如下语句加入到 <code>~/.bashrc</code> 中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export PYENV_ROOT=&quot;$HOME/.pyenv&quot;</span><br><span class="line">export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;</span><br><span class="line">eval &quot;$(pyenv init -)&quot;</span><br><span class="line">eval &quot;$(pyenv virtualenv-init -)&quot;   # 这句可以不加</span><br></pre></td></tr></table></figure><p>然后重启终端即可。</p><h2 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv install --list</span><br></pre></td></tr></table></figure><p>该命令会列出可以用 pyenv 安装的 Python 版本。列表很长，仅列举其中几个:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2.7.8   # Python 2 最新版本</span><br><span class="line">3.6.3   # Python 3 最新版本</span><br><span class="line">anaconda2-4.1.0  # 支持 Python 2.6 和 2.7</span><br><span class="line">anaconda3-4.1.0  # 支持 Python 3.3 和 3.4</span><br></pre></td></tr></table></figure><p>其中 2.7.8 和 3.6.3 这种只有版本号的是 Python 官方版本，其他的形如 <code>anaconda2-4.1.0</code> 这种既有名称又有版本后的属于 “衍生版” 或发行版。</p><h3 id="安装-Python-的依赖包"><a href="#安装-Python-的依赖包" class="headerlink" title="安装 Python 的依赖包"></a>安装 Python 的依赖包</h3><p>在编译 Python 过程中会依赖一些其他库文件，因而需要首先安装这些库文件，已知的一些需要预先安装的库如下。</p><p><strong>在 CentOS/RHEL/Fedora 下:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install readline readline-devel readline-static</span><br><span class="line">sudo yum install openssl openssl-devel openssl-static</span><br><span class="line">sudo yum install sqlite-devel</span><br><span class="line">sudo yum install bzip2-devel bzip2-libs</span><br></pre></td></tr></table></figure><p><strong>在 Ubuntu下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install make build-essential libssl-dev zlib1g-dev</span><br><span class="line">sudo apt-get install libbz2-dev libreadline-dev libsqlite3-dev wget curl</span><br><span class="line">sudo apt-get install llvm libncurses5-dev libncursesw5-dev</span><br></pre></td></tr></table></figure><h3 id="安装指定版本"><a href="#安装指定版本" class="headerlink" title="安装指定版本"></a>安装指定版本</h3><p>用户可以使用 <code>pyenv install</code> 安装指定版本的 python。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.6.3</span><br><span class="line">## ... 安装信息</span><br></pre></td></tr></table></figure><p>安装过程中，若出现编译错误，通常是由于依赖包未满足，需要在安装依赖包后重新执行该命令。</p><h3 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h3><p>在安装 Python 或者其他带有可执行文件的模块之后，需要对数据库进行更新：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv rehash</span><br></pre></td></tr></table></figure><h3 id="查看当前已安装的-python-版本"><a href="#查看当前已安装的-python-版本" class="headerlink" title="查看当前已安装的 python 版本"></a>查看当前已安装的 python 版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv versions</span><br><span class="line">* system (set by /home/seisman/.pyenv/version)</span><br><span class="line">anaconda3-4.1.0</span><br></pre></td></tr></table></figure><p>其中的星号表示当前正在使用的是系统自带的 python。</p><h3 id="设置全局的-python-版本"><a href="#设置全局的-python-版本" class="headerlink" title="设置全局的 python 版本"></a>设置全局的 python 版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv global 3.6.3</span><br><span class="line">$ pyenv versions</span><br><span class="line">  system</span><br><span class="line">* 3.6.3 (set by PYENV_VERSION environment variable)</span><br></pre></td></tr></table></figure><p>当前全局的 python 版本已经变成了 3.6.3。不过日常使用推荐使用 <code>pyenv local</code> 或 <code>pyenv shell</code>临时改变 python 版本。</p><h3 id="确认-python-版本"><a href="#确认-python-版本" class="headerlink" title="确认 python 版本"></a>确认 python 版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line">Python 3.6.3 (default, Oct 23 2017, 12:15:23)</span><br><span class="line">[GCC 4.4.7 20120313 (Red Hat 4.4.7-17)] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="使用-python"><a href="#使用-python" class="headerlink" title="使用 python"></a>使用 python</h2><ul><li>输入 <code>python</code> 即可使用新版本的 python；</li><li>系统自带的脚本会以 <code>/usr/bin/python</code> 的方式直接调用老版本的 python，因而不会对系统脚本产生影响；</li><li>使用 <code>pip</code> 安装第三方模块时会自动按照到当前的python版本下，不会和系统模块发生冲突。</li><li>使用 <code>pip</code> 安装模块后，可能需要执行 <code>pyenv rehash</code> 更新数据库；</li></ul><h2 id="pyenv-其他功能"><a href="#pyenv-其他功能" class="headerlink" title="pyenv 其他功能"></a>pyenv 其他功能</h2><ol><li><code>pyenv uninstall</code> 卸载某个版本</li><li><code>pyenv update</code> 更新 pyenv 及其插件</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/yyuu/pyenv" target="_blank" rel="noopener">https://github.com/yyuu/pyenv</a></li></ol>]]></content:encoded>
      
      <comments>http://gumutianqi.github.io/blog/2017/10/23/python-versions-pyenv/#disqus_thread</comments>
    </item>
    
    <item>
      <title>配置CENTOS YUM更新源</title>
      <link>http://gumutianqi.github.io/blog/2017/08/22/change-centos-yum-mirrors/</link>
      <guid>http://gumutianqi.github.io/blog/2017/08/22/change-centos-yum-mirrors/</guid>
      <pubDate>Tue, 22 Aug 2017 01:42:50 GMT</pubDate>
      <description>
      
        &lt;img src=&quot;/blog/2017/08/22/change-centos-yum-mirrors/centos-logo.png&quot;&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;大家都知道CentOS 有个很方便的软件安装工具yum，但是默认安装完 CentOS，系统里使用的是国外的CentOS更新源，这就造成了我们使用默认更新源安装或者更新软件时速度很慢的问题。&lt;/p&gt;
&lt;p&gt;为了使用yum工具能快速的安装更新软件，我们需要将默认的yum更新源配置为国内的更新源。yum更新源配置文件位于CentOS目录 &lt;code&gt;/etc/yum.repos.d/&lt;/code&gt; 下。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<img src="/blog/2017/08/22/change-centos-yum-mirrors/centos-logo.png"><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大家都知道CentOS 有个很方便的软件安装工具yum，但是默认安装完 CentOS，系统里使用的是国外的CentOS更新源，这就造成了我们使用默认更新源安装或者更新软件时速度很慢的问题。</p><p>为了使用yum工具能快速的安装更新软件，我们需要将默认的yum更新源配置为国内的更新源。yum更新源配置文件位于CentOS目录 <code>/etc/yum.repos.d/</code> 下。</p><a id="more"></a><h3 id="提供几个国内快速的更新源"><a href="#提供几个国内快速的更新源" class="headerlink" title="提供几个国内快速的更新源"></a>提供几个国内快速的更新源</h3><p><strong>教育网资源</strong></p><blockquote><p>上海交大： <a href="http://ftp.sjtu.edu.cn/centos/" target="_blank" rel="noopener">http://ftp.sjtu.edu.cn/centos/</a></p></blockquote><p>服务器位于北京，中国教育网网络中心，下载速度高达十M。<br>北方用户与教育网用户推荐，速度飞快。<br>需要手动创建 CentOS-Base.repo文件。</p><blockquote><p>中国科技大学：<a href="http://centos.ustc.edu.cn" target="_blank" rel="noopener">http://centos.ustc.edu.cn</a></p></blockquote><p>服务器位于合肥。 南方用户推荐。 同样的，<code>CentOS</code>版本非常丰富，适合长期使用。</p><p><strong>非教育网资源</strong></p><blockquote><p>sohu的开源镜像服务器：<a href="http://mirrors.sohu.com/" target="_blank" rel="noopener">http://mirrors.sohu.com/</a></p></blockquote><p>服务器位于山东省联通</p><blockquote><p>网易的开源服务器镜像： <a href="http://mirrors.163.com/centos" target="_blank" rel="noopener">http://mirrors.163.com/centos</a></p></blockquote><p>速度也不错，全国用户推荐<br>总之，大家在使用前可以 ping 一下一上更新源，看哪个快就用哪个。</p><h3 id="配置源-以-CentOS7-为例"><a href="#配置源-以-CentOS7-为例" class="headerlink" title="配置源 ( 以 CentOS7 为例 )"></a>配置源 ( 以 CentOS7 为例 )</h3><blockquote><p>CentOS-Base.repo文件示例，这个文件在这个目录下  /etc/yum.repos.d/</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[base]</span><br><span class="line">name=CentOS-$releasever - Base</span><br><span class="line">baseurl=http://mirrors.163.com/centos/7/os/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-6 </span><br><span class="line"></span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-$releasever - Updates</span><br><span class="line">baseurl=http://mirrors.163.com/centos/7/updates/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line">[addons]</span><br><span class="line">name=CentOS-$releasever - Addons</span><br><span class="line">baseurl=http://mirrors.163.com/centos/$releasever/addons/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-$releasever - Extras</span><br><span class="line">baseurl=http://mirrors.163.com/centos/7/extras/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-$releasever - Plus</span><br><span class="line">baseurl=http://mirrors.163.com/centos/7/centosplus/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure><hr><p>从以上配置文件可以看出，需要根据各家源情况 有选择的配置 [base]  [updates]  [addons]  [extras]  [centosplus]   这几项。</p><p>每一项只要修改<code>baseurl</code>和<code>gpgkey</code>为相应源地址即可。</p><p>以上配置结束之后，要清空yum缓存，并重建yum缓存，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all &amp;&amp; yum clean metadata &amp;&amp; yum clean dbcache &amp;&amp; yum makecache &amp;&amp; yum update</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://gumutianqi.github.io/blog/2017/08/22/change-centos-yum-mirrors/#disqus_thread</comments>
    </item>
    
    <item>
      <title>RancherOS 初体验</title>
      <link>http://gumutianqi.github.io/blog/2017/08/17/rancher-free-style/</link>
      <guid>http://gumutianqi.github.io/blog/2017/08/17/rancher-free-style/</guid>
      <pubDate>Thu, 17 Aug 2017 12:12:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;strong&gt;先来欣赏一张 RancherOS 的系统架构图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/rancher/os/blob/master/docs/rancheros.png?raw=true&quot; alt=&quot;rancheros&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;第一次听说 RancherOS 这个东西是在 OSChina 的软件更新上看到的，标题是《基于 Docker 的操作系统 RancherOS》，一听正和我意，集成最新的 Linux4.x 内核，包含最少运行 Docker 所需要的软件，二进制包20M(我去下载的时候是1.0.4版本，大小已经59M 了，不过比起动辄几百 M 的其他 Linux OS，已经很小了)；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;今天偶有兴致，准备拿 RancherOS 作为 Docker 容器的宿主机系统来玩玩儿，同时对安装使用的流程进行了整理和理解。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><strong>先来欣赏一张 RancherOS 的系统架构图</strong></p><p><img src="https://github.com/rancher/os/blob/master/docs/rancheros.png?raw=true" alt="rancheros"></p><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><blockquote><p>第一次听说 RancherOS 这个东西是在 OSChina 的软件更新上看到的，标题是《基于 Docker 的操作系统 RancherOS》，一听正和我意，集成最新的 Linux4.x 内核，包含最少运行 Docker 所需要的软件，二进制包20M(我去下载的时候是1.0.4版本，大小已经59M 了，不过比起动辄几百 M 的其他 Linux OS，已经很小了)；</p></blockquote><blockquote><p>今天偶有兴致，准备拿 RancherOS 作为 Docker 容器的宿主机系统来玩玩儿，同时对安装使用的流程进行了整理和理解。</p></blockquote><a id="more"></a><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网：<a href="https://github.com/rancher/os" target="_blank" rel="noopener">https://github.com/rancher/os</a></p><p>当前版本：<code>v1.0.4 - Docker 17.03.1-ce - Linux 4.9.40</code></p><p>ISO 镜像下载地址：<a href="https://releases.rancher.com/os/latest/rancheros.iso" target="_blank" rel="noopener">https://releases.rancher.com/os/latest/rancheros.iso</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>The RancherOS ISO file can be used to create a fresh RancherOS install on KVM, VMware, VirtualBox, or bare metal servers. </p></blockquote><p>RancherOS 的 ISO 镜像适用于 KVM，VMware，VirtualBox 或者物理主机。</p><blockquote><p>You must boot with at least 512MB of memory. If you boot with the ISO, you will automatically be logged in as the rancher user. Only the ISO is set to use autologin by default. If you run from a cloud or install to disk, SSH keys or a password of your choice is expected to be used.</p></blockquote><p>启动至少需要512M 的内存，如果你直接从 ISO 启动（数据全部存储在内存里面，不占用硬盘空间，关机后数据释放，不会保留操作数据），你将会自动登录到<code>rancher</code>这个用户，只有从 ISO 启动才会默认自动登录；如果你运行在云主机上或者从硬盘启动，你可以使用 SSH Keys 进行远程连接（从硬盘启动后，rancher 用户在宿主机将无法登录，只能通过 SSH key 进行远程登录）。</p><hr><p>我这里当然需要安装到硬盘进行使用，数据还是要保留的；</p><h4 id="安装到硬盘"><a href="#安装到硬盘" class="headerlink" title="安装到硬盘"></a>安装到硬盘</h4><blockquote><p>上面已经讲了从 ISO 启动了 RancherOS，默认登录用户和密码都是<code>rancher</code>;</p></blockquote><p><strong>配置 Configuration</strong></p><p>现在我需要一个在自己的电脑上创建一个叫做<code>cloud-config.yml</code>的配置文件，里面的内容如下（这里的配置比较多，我直接贴上了我自己使用的完整配置），其实这个yml 文件就是启动加载文件，每次启动都会去执行里面的配置：</p><blockquote><p>A cloud-config file can be used to provide configuration when first booting RancherOS.</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cloud-config</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="string">ros-rmbp</span></span><br><span class="line"><span class="attr">rancher:</span></span><br><span class="line"><span class="attr">  docker:</span></span><br><span class="line"><span class="attr">    tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  network:</span></span><br><span class="line"><span class="attr">    dns:</span></span><br><span class="line"><span class="attr">      nameservers:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span></span><br><span class="line"><span class="attr">  write_files:</span></span><br><span class="line"><span class="attr">    - container:</span> <span class="string">ntp</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/etc/ntp.conf</span></span><br><span class="line"><span class="attr">      permissions:</span> <span class="string">"0644"</span></span><br><span class="line"><span class="attr">      owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      content:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        server 0.cn.pool.ntp.org iburst</span></span><br><span class="line"><span class="string">        server 1.cn.pool.ntp.org iburst</span></span><br><span class="line"><span class="string">        server 2.cn.pool.ntp.org iburst</span></span><br><span class="line"><span class="string">        server 3.cn.pool.ntp.org iburst</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # Allow only time queries, at a limited rate, sending KoD when in excess.</span></span><br><span class="line"><span class="string">        # Allow all local queries (IPv4, IPv6)</span></span><br><span class="line"><span class="string">        restrict default nomodify nopeer noquery limited kod</span></span><br><span class="line"><span class="string">        restrict 127.0.0.1</span></span><br><span class="line"><span class="string">        restrict [::1]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">ssh_authorized_keys:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ssh-rsa</span> <span class="string">AAAAB3Nza......(此处省略256个字符)</span></span><br></pre></td></tr></table></figure><p><strong>上传配置文件</strong></p><p>然后通过 HTTP 下载到 RancherOS 上，我是在本机 Mac 上使用 python http 启动一个静态 Server，然后到 RancherOS 使用 wget 直接 Dowanload 下来，简单暴力；</p><p>接下来执行以下 Shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv cloud-config.yml /var/lib/rancher/conf/</span><br><span class="line">$ sudo ros install -c /var/lib/rancher/conf/cloud-config.yml -d /dev/sda</span><br><span class="line"></span><br><span class="line">## 会有两次 Y/N 的确认，都输入 Y</span><br><span class="line">## 重启后，就不能直接通过rancher 帐号登录了；</span><br><span class="line">## 只能 通过 SSH Keys 远程登录 ssh rancher@IP</span><br></pre></td></tr></table></figure><p><strong>安装必备的 Docker-Compose</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 由于默认没有 curl command，先用 wget 代替</span><br><span class="line">wget https://github.com/docker/compose/releases/download/1.15.0/docker-compose-Linux-x86_64</span><br><span class="line"></span><br><span class="line">sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><p>到目前为止，已经可以愉快的使用 RancherOS 了，试试 Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps </span><br><span class="line">$ docker images</span><br></pre></td></tr></table></figure><h3 id="下篇开始写RancherOS-进阶"><a href="#下篇开始写RancherOS-进阶" class="headerlink" title="下篇开始写RancherOS 进阶"></a>下篇开始写RancherOS 进阶</h3>]]></content:encoded>
      
      <comments>http://gumutianqi.github.io/blog/2017/08/17/rancher-free-style/#disqus_thread</comments>
    </item>
    
    <item>
      <title>替换 Docker-Hub 的镜像源</title>
      <link>http://gumutianqi.github.io/blog/2016/12/26/docker-hub-registry-config/</link>
      <guid>http://gumutianqi.github.io/blog/2016/12/26/docker-hub-registry-config/</guid>
      <pubDate>Mon, 26 Dec 2016 06:59:18 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;以下文档说明来自于阿里云 Docker 平台帮助文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;方法一：&quot;&gt;&lt;a href=&quot;#方法一：&quot; class=&quot;headerlink&quot; title=&quot;方法一：&quot;&gt;&lt;/a&gt;方法一：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址。&lt;/strong&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>以下文档说明来自于阿里云 Docker 平台帮助文档</p></blockquote><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p><strong>创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址。</strong></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create --engine-registry-mirror=https://xxxx.mirror.aliyuncs.com -d virtualbox default</span><br></pre></td></tr></table></figure><p>查看机器的环境配置，并配置到本地。然后通过Docker客户端访问Docker服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-machine env default</span><br><span class="line">eval &quot;$(docker-machine env default)&quot;</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><p>这里 xxxx 是您的专有加速器地址</p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p><strong>登录已创建的 Docker VM</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-machine ssh default</span><br><span class="line">sudo vi /var/lib/boot2docker/profile</span><br></pre></td></tr></table></figure><p>在EXTRA_ARGS中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--registry-mirror=https://xxxx.mirror.aliyuncs.com</span><br></pre></td></tr></table></figure><p>重启Docker服务即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/docker restart</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://gumutianqi.github.io/blog/2016/12/26/docker-hub-registry-config/#disqus_thread</comments>
    </item>
    
    <item>
      <title>关键业务系统的JVM参数使用推荐(转载)</title>
      <link>http://gumutianqi.github.io/blog/2016/11/01/useful-jvm-experience/</link>
      <guid>http://gumutianqi.github.io/blog/2016/11/01/useful-jvm-experience/</guid>
      <pubDate>Tue, 01 Nov 2016 05:11:10 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;在关键的业务系统里，除了继续追求技术人员最爱的高吞吐与低延时之外，系统的稳定性与出现问题时排查的便捷性也很重要。&lt;/p&gt;
&lt;p&gt;这是本文的一个原则，后面也会一次又一次的强调，所以与网上其他的文章略有不同，请调优高手和运维老大们多指引。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言1：资料&quot;&gt;&lt;a href=&quot;#前言1：资料&quot; class=&quot;headerlink&quot; title=&quot;前言1：资料&quot;&gt;&lt;/a&gt;前言1：资料&lt;/h2&gt;&lt;p&gt;学习开源项目的启动脚本是个不错的主意，比如&lt;a href=&quot;http://github.com/apache/cassandra/blob/trunk/conf/jvm.options&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cassandra&lt;/a&gt;家的， 附送一篇&lt;a href=&quot;http://tobert.github.io/pages/als-cassandra-21-tuning-guide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;解释它的文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://hllvm.group.iteye.com/group/topic/27945&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JVM调优的”标准参数”的各种陷阱 R大的文章&lt;/a&gt;，在JDK6时写的，期待更新。&lt;br&gt;偶然翻到&lt;code&gt;Linkedin&lt;/code&gt;工程师的&lt;a href=&quot;http://www.importnew.com/11336.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一篇文章&lt;/a&gt;。&lt;br&gt;更偶然翻到的&lt;a href=&quot;http://www.techpaste.com/2012/02/java-command-line-options-jvm-performance-improvement/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一份不错的参数列表&lt;/a&gt;。&lt;br&gt;并发编程网上的&lt;a href=&quot;http://ifeve.com/useful-jvm-flags/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JVM实用参数系列&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>在关键的业务系统里，除了继续追求技术人员最爱的高吞吐与低延时之外，系统的稳定性与出现问题时排查的便捷性也很重要。</p><p>这是本文的一个原则，后面也会一次又一次的强调，所以与网上其他的文章略有不同，请调优高手和运维老大们多指引。</p></blockquote><h2 id="前言1：资料"><a href="#前言1：资料" class="headerlink" title="前言1：资料"></a>前言1：资料</h2><p>学习开源项目的启动脚本是个不错的主意，比如<a href="http://github.com/apache/cassandra/blob/trunk/conf/jvm.options" target="_blank" rel="noopener">Cassandra</a>家的， 附送一篇<a href="http://tobert.github.io/pages/als-cassandra-21-tuning-guide.html" target="_blank" rel="noopener">解释它的文章</a>。</p><p><a href="http://hllvm.group.iteye.com/group/topic/27945" target="_blank" rel="noopener">JVM调优的”标准参数”的各种陷阱 R大的文章</a>，在JDK6时写的，期待更新。<br>偶然翻到<code>Linkedin</code>工程师的<a href="http://www.importnew.com/11336.html" target="_blank" rel="noopener">一篇文章</a>。<br>更偶然翻到的<a href="http://www.techpaste.com/2012/02/java-command-line-options-jvm-performance-improvement/" target="_blank" rel="noopener">一份不错的参数列表</a>。<br>并发编程网上的<a href="http://ifeve.com/useful-jvm-flags/" target="_blank" rel="noopener">JVM实用参数系列</a></p><a id="more"></a><h2 id="前言2：打印参数值"><a href="#前言2：打印参数值" class="headerlink" title="前言2：打印参数值"></a>前言2：打印参数值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintFlagsFinal</span><br></pre></td></tr></table></figure><p>当你在网上兴冲冲找到一个可优化的参数时，先用<code>-XX: +PrintFlagsFinal</code>看看，它可能已经默认打开了，再找到一个，还是默认打开了…</p><p>JDK7与JDK8，甚至JDK7中的不同版本，有些参数值都不一样，所以不要轻信网上任何文章，一切以生产环境同版本的JDK打出来的为准。</p><p>经常以类似下面的语句去查看参数，偷懒不起应用，用<code>-version</code>代替。有些参数设置后会影响其他参数，所以查看时也把它带上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -server -Xmx1024m -Xms1024m -XX:+UseConcMarkSweepGC -XX:+PrintFlagsFinal -version| grep ParallelGCThreads</span><br></pre></td></tr></table></figure><h2 id="前言3：关于默认值"><a href="#前言3：关于默认值" class="headerlink" title="前言3：关于默认值"></a>前言3：关于默认值</h2><p>JDK8会默认打开<code>-XX:+TieredCompilation</code>多层编译，而JDK7则不会。JDK7u40以后的版本会默认打开<code>-XX:+OptimizeStringConcat</code>优化字符串拼接，而之前的则不打开。</p><p>对于这些参数，我的建议是顺势而为，JDK在那个版本默认打开不打开总有它的理由。安全第一，没有很好的因由，不要随便因为网上某篇文章的推荐(包括你现在在读的这篇)就去设置。</p><h2 id="性能篇"><a href="#性能篇" class="headerlink" title="性能篇"></a>性能篇</h2><blockquote><p>先写一些不那么常见的，后面再来老生常谈。</p></blockquote><h3 id="取消偏向锁"><a href="#取消偏向锁" class="headerlink" title="取消偏向锁"></a>取消偏向锁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:-UseBiasedLocking</span><br></pre></td></tr></table></figure><p>JDK1.6开始默认打开的偏向锁，会尝试把锁赋给第一个访问它的线程，取消同步块上的synchronized原语。如果始终只有一条线程在访问它，就成功略过同步操作以获得性能提升。</p><p>但一旦有第二条线程访问这把锁，JVM就要撤销偏向锁恢复到未锁定线程的状态，详见<a href="http://calvin1978.blogcn.com/articles/safepoint.html" target="_blank" rel="noopener">JVM的<code>Stop The World</code>，安全点，黑暗的地底世界</a>， 可以看到不少<code>RevokeBiasd</code>的纪录，像GC一样，会<code>Stop The World</code>的干活，虽然只是很短很短的停顿，但对于多线程并发的应用，取消掉它反而有性能的提升和延时的极微的缩短，所以<code>Cassandra</code>就取消了它。</p><h3 id="Int和Long自动装箱"><a href="#Int和Long自动装箱" class="headerlink" title="Int和Long自动装箱"></a>Int和Long自动装箱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:AutoBoxCacheMax=20000</span><br></pre></td></tr></table></figure><p><code>Integer i = 3;</code>这语句有着 int自动装箱成Integer的过程，JDK默认只缓存 -128 ~ +127的int 和 long，超出范围的数字就要即时构建新的Integer对象。设为20000后，我们应用的QPS从48,000提升到50,000，足足4%的影响。<a href="http://blog.csdn.net/chengzhezhijian/article/details/9628251" target="_blank" rel="noopener">详见Java Integer(-128~127)值的==和equals比较产生的思考</a></p><h3 id="启动时访问并置零内存页面"><a href="#启动时访问并置零内存页面" class="headerlink" title="启动时访问并置零内存页面"></a>启动时访问并置零内存页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+AlwaysPreTouch</span><br></pre></td></tr></table></figure><p>启动时就把参数里说好了的内存全部舔一遍，可能令得启动时慢上一点，但后面访问时会更流畅，比如页面会连续分配，比如不会在晋升新生代到老生代时才去访问页面使得GC停顿时间加长。不过这选项对大堆才会更有感觉一点。</p><h3 id="禁止JVM写statistics数据"><a href="#禁止JVM写statistics数据" class="headerlink" title="禁止JVM写statistics数据"></a>禁止JVM写statistics数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PerfDisableSharedMem</span><br></pre></td></tr></table></figure><p>Cassandra家的一个参数，一直没留意，直到发生高IO时的JVM停顿。原来JVM经常会默默的在/tmp/hperf 目录写上一点<code>statistics</code>数据，如果刚好遇到<code>PageCache</code>刷盘，把文件阻塞了，就不能结束这个<code>Stop the World</code>的安全点了。用此参数可以禁止JVM写<code>statistics</code>数据，代价是jps, jstat 用不了，只能用JMX取数据。有时用JMX取新生代老生代使用百分比还真没jstat方便。<a href="http://www.evanjones.ca/jvm-mmap-pause.html" target="_blank" rel="noopener">详见The Four Month Bug: JVM statistics cause garbage collection pauses</a></p><h3 id="使用SHA1算法"><a href="#使用SHA1算法" class="headerlink" title="使用SHA1算法"></a>使用SHA1算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Djava.security.egd=file:/dev/./urandom</span><br></pre></td></tr></table></figure><p>此江湖偏方原用于Tomcat显式使用SHA1PRNG算法时，初始因子从<code>/dev/random</code>读取导致堵塞。而使用此设置后，额外效果是默认的<code>SecureRandom</code>算法也变成<code>SHA1</code>了。 <code>SHA1PRNG</code>比<code>NativePRNG</code>消耗小一半，<code>synchronized</code>的代码少一半，所以没特殊安全要求的话建议用SHA1。详见<a href="SecureRandom的江湖偏方与真实效果">SecureRandom的江湖偏方与真实效果</a></p><h3 id="不建议的参数"><a href="#不建议的参数" class="headerlink" title="不建议的参数"></a>不建议的参数</h3><ol><li><p><code>-XX:+AggressiveOpts</code>是一些还没默认打开的优化参数集合, <code>-XX:AutoBoxCacheMax</code>是其中的一项。但如前所述，关键系统里不建议打开。虽然通过<code>-XX:+AggressiveOpts</code>与<code>-XX:-AggressiveOpts</code>的对比，目前才改变了三个参数，但为免以后某个版本的JDK里默默改变更多激进的配置，还是不要了。</p></li><li><p>Linkined那种黑科技，先要解锁<code>VMOptions</code>才能配置的就更不用说了，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UnlockDiagnosticVMOptions -XX: ParGCCardsPerStrideChunk=32768</span><br></pre></td></tr></table></figure></li><li><p><code>JIT Compile</code>相关的参数，函数调用多少次之后开始编译的阀值，内联函数大小的阀值等等，不要乱改了。</p></li><li><p><code>-XX:+UseFastAccessorMethods</code>，JDK6的优化，据说在多层编译下还慢了，所以是默认关闭的。</p></li><li><p><code>-server</code>，在64位linux中，你想设成<code>-client</code>都不行的，所以写了也是白写。</p></li></ol><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><ol><li><p><code>-Djava.awt.headless=true</code>，如果服务器上没有屏幕，键盘，鼠标，又需要用到它们的时候，详见<a href="http://www.oschina.net/translate/using-headless-mode-in-java-se" target="_blank" rel="noopener">在Java SE 平台上使用<code>Headless</code>模式</a></p></li><li><p><code>-XX:-UseCounterDecay</code>，禁止JIT调用计数器衰减。默认情况下，每次GC时会对调用计数器进行砍半的操作，导致有些方法一直是个温热，可能永远都达不到C2编译的1万次的阀值。</p></li><li><p><code>-XX:-TieredCompilation</code>，禁止JDK8默认的多层编译，在某些情况下因为有些方法C1编译后C2不再编译，多层编译反而比C2编译慢，如果发现此情况可进行禁止。</p></li></ol><h2 id="GC篇"><a href="#GC篇" class="headerlink" title="GC篇"></a>GC篇</h2><h3 id="GC策略"><a href="#GC策略" class="headerlink" title="GC策略"></a>GC策略</h3><p>为了稳健，还是8G以下的堆还是CMS好了，G1的细节实现起来难度太大，从理论提出到现在都做了六七年了。</p><p>CMS真正可设的东西也不多，详见<a href="http://ifeve.com/useful-jvm-flags-part-7-cms-collector/" target="_blank" rel="noopener">JVM实用参数（七）CMS收集器</a></p><ol><li><p>基本配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly</span><br></pre></td></tr></table></figure><p> 因为我们的监控系统会通过JMX监控内存达到90%的状况（留点处理的时间），所以设置让它75%就开始跑了，早点开始也能避免Full GC等意外情况(概念重申，这种主动的<code>CMS GC</code>，和JVM的老生代、永久代、堆外内存完全不能分配内存了而强制<code>Full GC</code>是不同的概念)。为了让这个设置生效，还要设置<code>-XX:+UseCMSInitiatingOccupancyOnly</code>，否则75只被用来做开始的参考值，后面还是JVM自己算。</p></li><li><p><code>-XX:MaxTenuringThreshold=2</code>，这是GC里改动效果最明显的一个参数了。对象在Survivor区熬过多少次Young GC后晋升到年老代，JDK7里看起来默认是6，跑起来好像变成了15。</p><p> Young GC是最大的应用停顿来源，而新生代里GC后存活对象的多少又直接影响停顿的时间，所以如果清楚Young GC的执行频率和应用里大部分临时对象的最长生命周期，可以把它设的更短一点，让其实不是临时对象的新生代长期对象赶紧晋升到年老代，别呆着。</p><p> 用<code>-XX:+PrintTenuringDistribution</code>观察下，如果后面几代都差不多，就可以设小，比如JMeter里是2。而我们的两个系统里一个设了2，一个设了6。</p></li><li><p><code>-XX:+ExplicitGCInvokesConcurrent</code>， 但不要<code>-XX:+DisableExplicitGC</code>， 比如<a href="http://calvin1978.blogcn.com/articles/directbytebuffer.html" target="_blank" rel="noopener">Netty之堆外内存扫盲篇</a>，可见禁了<code>system.gc()</code>未必是好事，只要自己的代码里没有调它，也没用什么特别烂的类库，真有人调了总有调的原因。<code>-XX+ExplicitGCInvokesConcurrent</code>则在<code>full gc</code>时，并不全程停顿，依然只在ygc和两个remark阶段停顿，详见<a href="http://lovestblog.cn/blog/2015/05/07/system-gc/" target="_blank" rel="noopener">JVM源码分析之SystemGC完全解读</a></p></li><li><p><code>-XX: ParallelRefProcEnabled</code>, 默认为<code>false</code>，并行的处理<code>Reference</code>对象，如<code>WeakReference</code>，除非在<code>GC log</code>里出现<code>Reference</code>处理时间较长的日志，否则效果不会很明显，但我们总是要JVM尽量的并行，所以设了也就设了。</p></li></ol><h3 id="GC里不建议设的参数"><a href="#GC里不建议设的参数" class="headerlink" title="GC里不建议设的参数"></a>GC里不建议设的参数</h3><ol><li><p><code>-XX:+CMSClassUnloadingEnabled</code>，在CMS中清理永久代中的过期的Class而不等到<code>Full GC</code>，JDK7默认关闭而JDK8打开。看自己情况，比如有没有运行动态语言脚本如Groovy产生大量的临时类。它会增加<code>CMS remark</code>的暂停时间，所以如果新类加载并不频繁，这个参数还是不开的好。</p></li><li><p>用了CMS，新生代收集默认就是<code>-XX:+UseParNewGC</code>，不用自己设。</p></li><li><p>并发收集线程数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ParallelGCThreads＝8+( Processor - 8 ) ( 5/8 )，</span><br><span class="line">ConcGCThreads = (ParallelGCThreads + 3)/4</span><br></pre></td></tr></table></figure><p> 比如双CPU，六核，超线程就是24个处理器，小于8个处理器时<code>ParallelGCThreads</code>按处理器数量，大于时按上述公式<code>ParallelGCThreads＝18</code>， <code>ConcGCThreads＝5</code>。除了一些不在乎停顿时间的后台辅助程序会特意把它减少，平时不建议动。</p></li><li><p><code>-XX:+CMSScavengeBeforeRemark</code>，默认为关闭，在CMS remark前，先执行一次minor GC将新生代清掉，这样从老生代的对象引用到的新生代对象的个数就少了，停止全世界的CMS remark阶段就短一些。如果看到GC日志里remark阶段的时间超长，可以打开此项看看有没有效果，否则还是不要打开了，白白多了次<code>YGC</code>。</p></li><li><p><code>-XX:CMSFullGCsBeforeCompaction</code>，默认为0，即每次full gc都对老生代进行碎片整理压缩。Full GC 不同于 前面设置的75%老生代时触发<code>CMS GC</code>，只在<code>System.gc()</code>，老生代达到100%，老生代碎片过大无法分配空间给新晋升的大对象这些特殊情况里发生，所以设为每次都进行碎片整理是合适的，详见<a href="http://hllvm.group.iteye.com/group/topic/28854" target="_blank" rel="noopener">此贴里R大的解释</a>。</p></li></ol><h3 id="内存大小的设置"><a href="#内存大小的设置" class="headerlink" title="内存大小的设置"></a>内存大小的设置</h3><blockquote><p>这些关于大小的参数，给人感觉是最踏实可控的。</p></blockquote><blockquote><p>其实JVM除了显式设置的-Xmx堆内存，还有一堆其他占内存的地方(堆外内存，线程栈，永久代，二进制代码cache)，在容量规划的时候要留意。</p></blockquote><blockquote><p>关键业务系统的服务器上内存一般都是够的，所以尽管设得宽松点。</p></blockquote><ol><li><p><code>-Xmx, -Xms</code>, 堆内存大小，2～4G均可，再大了注意GC时间。</p></li><li><p><code>-Xmn or -XX:NewSize and -XX:MaxNewSize or -XX:NewRatio</code>，JDK默认新生代占堆大小的1/3， 个人喜欢把对半分， 增大新生代的大小，能减少GC的频率（但也会加大每次GC的停顿时间），主要是看老生代里没多少长期对象的话，占2/3太多了。可以用-Xmn 直接赋值(等于<code>-XX:NewSize and -XX:MaxNewSize</code>同值的缩写)，或把NewRatio设为1来对半分(但如果想设置新生代比老生代大就只能用-Xmn)。</p></li><li><p><code>-XX: PermSize=128m -XX:MaxPermSize=512m(JDK7)</code>现在的应用有Hibernate/Spring这些闹腾的家伙AOP之后类都比较多，可以一开始就把初始值从64M设到128M，并设一个更大的Max值以求保险。</p></li><li><p><code>-XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m（JDK8）</code>，JDK8的永生代几乎可用完机器的所有内存，同样设一个128M的初始值，512M的最大值保护一下。</p></li></ol><h3 id="其他内存大小等可选设置"><a href="#其他内存大小等可选设置" class="headerlink" title="其他内存大小等可选设置"></a>其他内存大小等可选设置</h3><ol><li><p><code>-XX:SurvivorRatio</code>新生代中每个存活区的大小，默认为8，即1/10的新生代<code>1/(SurvivorRatio+2)</code>，有人喜欢设小点省点给新生代，但要避免太小使得存活区放不下临时对象而要晋升到老生代，还是从GC Log里看实际情况了。</p></li><li><p><code>-Xss</code>在堆之外，线程占用栈内存，默认每条线程为1M（以前是256K）。存放方法调用出参入参的栈，局部变量，标量替换后掉局部变量等，有人喜欢设小点节约内存开更多线程。但反正内存够也就不必要设小，有人喜欢再设大点，特别是有JSON解析之类的递归调用时不能设太小。</p></li><li><p><code>-XX:MaxDirectMemorySize</code>，堆外内存/直接内存的大小，默认为Heap区总内存减去一个Survivor区的大小，详见<a href="http://calvin1978.blogcn.com/articles/directbytebuffer.html" target="_blank" rel="noopener">Netty之堆外内存扫盲篇</a>。</p></li><li><p><code>-XX:ReservedCodeCacheSize</code>， JIT编译后二进制代码的存放区，满了之后就不再编译。JDK7默认不开多层编译48M，开了96M，而JDK8默认开多层编译240M。可以在JMX里看看<code>CodeCache</code>的大小，JDK7下的48M一般够了，也可以把它设大点，反正内存多。</p></li></ol><h3 id="GC日志"><a href="#GC日志" class="headerlink" title="GC日志"></a>GC日志</h3><ol><li><p>基本配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xloggc:/dev/shm/gc-myapplication.log -XX:+PrintGCDateStamps -XX:+PrintGCDetails</span><br></pre></td></tr></table></figure><p> 详见<a href="http://ifeve.com/useful-jvm-flags-part-8-gc-logging/" target="_blank" rel="noopener">JVM实用参数（八）GC日志</a>，有人担心写GC日志会影响性能，但测试下来实在没什么影响，还是留一份用来排查好。</p><p> 到后来，又发现如果遇上高IO的情况，如果GC的时候，操作系统正在flush pageCache 到磁盘，也可能导致GC log文件被锁住，从而让GC结束不了。所以把它指向了/dev/shm 这种内存中文件系统，避免这种停顿，详见<a href="http://calvin1978.blogcn.com/articles/%E2%80%9Chttp://engineering.linkedin.com/blog/2016/02/eliminating-large-jvm-gc-pauses-caused-by-background-io-traffic%E2%80%9D" target="_blank" rel="noopener">Eliminating Large JVM GC Pauses Caused by Background IO Traffic</a></p><p> 用+PrintGCDateStamps而不是PrintGCTimeStamps，打印可读的日期而不是时间戳。</p></li><li><p>-XX:+PrintGCApplicationStoppedTime它的名字没起好，它除了打印清晰的GC停顿时间外，还可以打印其他的停顿时间，比如取消偏向锁，class 被agent redefine，code deoptimization等等，有助于发现一些原来没想到的问题，建议也加上。如果真的发现了一些不知什么的停顿，再临时加上”-XX:+PrintSafepointStatistics -XX: PrintSafepointStatisticsCount=1” 找原因。</p></li><li><p>GC日志默认会在重启后清空，但有人担心长期运行不重启的应用会把文件弄得很大，有”-XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=1M”的参数可以让日志滚动起来。但重启后的文件名太混乱太让人头痛，所以还是不加。</p></li></ol><h2 id="监控篇"><a href="#监控篇" class="headerlink" title="监控篇"></a>监控篇</h2><blockquote><p>JVM输出的各种日志，如果未指定路径，通常会生成到运行应用的相同目录，为了避免有时候在不同的地方执行启动脚本，一般将日志路径集中设到一个固定的地方。</p></blockquote><h3 id="XX-PrintCommandLineFlags"><a href="#XX-PrintCommandLineFlags" class="headerlink" title="-XX:+PrintCommandLineFlags"></a>-XX:+PrintCommandLineFlags</h3><p>运维有时会对启动参数做一些临时的更改，将每次启动的参数输出到stdout，将来有据可查。<br>打印出来的是命令行里设置了的参数以及因为这些参数隐式影响的参数，比如开了CMS后，-XX:+UseParNewGC也被自动打开。</p><h3 id="XX-OmitStackTraceInFastThrow"><a href="#XX-OmitStackTraceInFastThrow" class="headerlink" title="-XX:-OmitStackTraceInFastThrow"></a>-XX:-OmitStackTraceInFastThrow</h3><p>为异常设置<code>StackTrace</code>是个昂贵的操作，所以当应用在相同地方抛出相同的异常N次(两万?)之后，JVM会对某些特定异常如NPE，数组越界等进行优化，不再带上异常栈。此时，你可能会看到日志里一条条<code>Nul Point Exception</code>，而真正输出完整栈的日志早被滚动到不知哪里去了，也就完全不知道这NPE发生在什么地方，欲哭无泪。 所以，将它禁止吧。</p><h3 id="coredump与-XX-ErrorFile"><a href="#coredump与-XX-ErrorFile" class="headerlink" title="coredump与 -XX:ErrorFile"></a>coredump与 -XX:ErrorFile</h3><p>JVM crash时，hotspot 会生成一个error文件，提供JVM状态信息的细节。如前所述，将其输出到固定目录，避免到时会到处找这文件。文件名中的%p会被自动替换为应用的PID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:ErrorFile=$&#123;MYLOGDIR&#125;/hs_err_%p.log</span><br></pre></td></tr></table></figure><p>当然，更好的做法是生成coredump，从CoreDump能够转出Heap Dump 和 Thread Dump 还有crash的地方，非常实用。</p><p>在启动脚本里加上<code>ulimit -c unlimited</code>或其他的设置方式，如果有root权限，设一下输出目录更好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;/&#123;MYLOGDIR&#125;/coredump.%p&quot; &gt; /proc/sys/kernel/core_pattern</span><br></pre></td></tr></table></figure><p>什么？你不知道这coredump有什么用？看来你是没遇过JVM Segment Fault的幸福人。</p><h3 id="XX-HeapDumpOnOutOfMemoryError"><a href="#XX-HeapDumpOnOutOfMemoryError" class="headerlink" title="-XX:+HeapDumpOnOutOfMemoryError"></a>-XX:+HeapDumpOnOutOfMemoryError</h3><p>在<code>Out Of Memory</code>，JVM快死快死掉的时候，输出Heap Dump到指定文件。不然开发很多时候还真不知道怎么重现错误。</p><p>路径只指向目录，JVM会保持文件名的唯一性，叫<code>java_pid${pid}.hprof</code>。如果指向文件，而文件已存在，反而不能写入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOGDIR&#125;/</span><br></pre></td></tr></table></figure><h3 id="JMX"><a href="#JMX" class="headerlink" title="JMX"></a>JMX</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dcom.sun.management.jmxremote.port=$&#123;MY_JMX_PORT&#125; -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1</span><br></pre></td></tr></table></figure><p>以上设置，只让本地的Zabbix之类监控软件通过JMX监控JVM，不允许远程访问。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="性能相关"><a href="#性能相关" class="headerlink" title="性能相关"></a>性能相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:-UseBiasedLocking -XX:-UseCounterDecay -XX:AutoBoxCacheMax=20000 -XX:+PerfDisableSharedMem -XX:+AlwaysPreTouch -Djava.security.egd=file:/dev/./urandom</span><br></pre></td></tr></table></figure><h3 id="内存大小相关-JDK7"><a href="#内存大小相关-JDK7" class="headerlink" title="内存大小相关(JDK7)"></a>内存大小相关(JDK7)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms4096m -Xmx4096m -Xmn2048m -XX:MaxDirectMemorySize=4096m-XX: PermSize=256m -XX:MaxPermSize=512m -XX:ReservedCodeCacheSize=240M</span><br></pre></td></tr></table></figure><h3 id="CMS-GC-相关"><a href="#CMS-GC-相关" class="headerlink" title="CMS GC 相关"></a>CMS GC 相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:MaxTenuringThreshold=6 -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled</span><br></pre></td></tr></table></figure><h3 id="GC-日志-相关"><a href="#GC-日志-相关" class="headerlink" title="GC 日志 相关"></a>GC 日志 相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xloggc:/dev/shm/app-gc.log -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCDateStamps -XX:+PrintGCDetails</span><br></pre></td></tr></table></figure><h3 id="异常-日志-相关"><a href="#异常-日志-相关" class="headerlink" title="异常 日志 相关"></a>异常 日志 相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:-OmitStackTraceInFastThrow -XX:ErrorFile=$&#123;LOGDIR&#125;/hs_err_%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOGDIR&#125;/</span><br></pre></td></tr></table></figure><h3 id="JMX相关"><a href="#JMX相关" class="headerlink" title="JMX相关"></a>JMX相关</h3><p>见3.5</p><hr><p>转载自<code>江南白衣</code>的博客 <a href="http://calvin1978.blogcn.com/articles/jvmoption-2.html" target="_blank" rel="noopener">《关键业务系统的JVM参数推荐(2016热冬版)》</a></p>]]></content:encoded>
      
      <comments>http://gumutianqi.github.io/blog/2016/11/01/useful-jvm-experience/#disqus_thread</comments>
    </item>
    
    <item>
      <title>码农神器 HHKB-PRO2-TypeS 开箱入坑</title>
      <link>http://gumutianqi.github.io/blog/2016/08/07/hhkb-pro2-types-show/</link>
      <guid>http://gumutianqi.github.io/blog/2016/08/07/hhkb-pro2-types-show/</guid>
      <pubDate>Sun, 07 Aug 2016 04:22:32 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;HHKB，全称叫做：&lt;code&gt;Happy Hacking Keyboard&lt;/code&gt;，于 1996 年 12 月 20 日诞生于日本，由和田英一和株式会社 PFU 共同开发。&lt;/p&gt;
&lt;p&gt;科普就不继续了，有兴趣的直接 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Happy_Hacking_Keyboard&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前往Wiki&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;/blog/2016/08/07/hhkb-pro2-types-show/hhkb.jpg&quot; title=&quot;[HHKB-Pro2-TypeS]&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Happy Hacking Keyboard&lt;/strong&gt;（缩写为HHKB）是由株式会社PFU（富士通的全资子公司）所经销的计算机键盘。本键盘由和田英一和PFU研究所共同开发，于1996年12月开始销售。&lt;/p&gt;
&lt;p&gt;2004年荣获“商品设计部门”和“个人计算机及相关外设部门”的优秀设计奖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;引用自[维基百科]&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>HHKB，全称叫做：<code>Happy Hacking Keyboard</code>，于 1996 年 12 月 20 日诞生于日本，由和田英一和株式会社 PFU 共同开发。</p><p>科普就不继续了，有兴趣的直接 <a href="https://zh.wikipedia.org/wiki/Happy_Hacking_Keyboard" target="_blank" rel="noopener">前往Wiki</a></p><img src="/blog/2016/08/07/hhkb-pro2-types-show/hhkb.jpg" title="[HHKB-Pro2-TypeS]"><blockquote><p><strong>Happy Hacking Keyboard</strong>（缩写为HHKB）是由株式会社PFU（富士通的全资子公司）所经销的计算机键盘。本键盘由和田英一和PFU研究所共同开发，于1996年12月开始销售。</p><p>2004年荣获“商品设计部门”和“个人计算机及相关外设部门”的优秀设计奖</p></blockquote><blockquote><p>引用自[维基百科]</p></blockquote><a id="more"></a><p><strong>贴一段HHKB中国官网首页的一段话：</strong></p><blockquote><p>美国西部的牛仔们，会将死去的马儿留在原地，但是仍然会扛着马鞍长途跋涉，穿越一望无垠的沙漠。因为马儿是消耗品，而马鞍却是与人体融合在一起的“知己”。我们要有这样的观念：现在，电脑是消耗品，键盘却是传递情感，陪伴我们一生的“挚友”。</p></blockquote><blockquote><p>[东京大学名誉教授 和田英一]</p></blockquote><p>都说HHKB是码农神器，同时也是各路IT大神的钟爱之物。</p><p>Linux创始人 <strong>Linus·Torvalds</strong> 最爱<br><img src="/blog/2016/08/07/hhkb-pro2-types-show/tux_hacking.jpg"></p><p>GNU 之父大胡子 <strong>Richard Stallman</strong><br>下图是他100美元的OLPC配上250美元的HHKB Pro2，这才是真Geek。<br><img src="/blog/2016/08/07/hhkb-pro2-types-show/hhkb-gnu.jpg"></p><p>当然还有C++之父 <strong>Bjarne Stroustrup</strong><br><img src="/blog/2016/08/07/hhkb-pro2-types-show/bjarne_hhkb.jpg"></p><p>入手之前对比了HHKB Pro2和Pro2 Type-S，看到很多买了Pro2的继续迷恋Type-S，一不做二不休，直接入手<strong>Pro2 Type-S</strong>了。</p><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p>去除外包装，露出真面目，右上角明显的Type-S标识。<br><img src="/blog/2016/08/07/hhkb-pro2-types-show/HHKB01.jpg" title="[完整盒子]"></p><p>背面来一张，果然是<strong>静电容</strong>的高级货<br><img src="/blog/2016/08/07/hhkb-pro2-types-show/HHKB04.jpg" title="[背面]"></p><p>正式开箱，HHKB静静地躺在那里，还有说明书和mini-usb数据线(足足有2M长)，由于买的是PFU上海公司的行货，故说明书是中文的，白色有刻。<br><img src="/blog/2016/08/07/hhkb-pro2-types-show/HHKB03.jpg" title="[打开盒子之后]"></p><p>撕开封条，从保护膜中取出，放在盒子上再来一张正面。<br><img src="/blog/2016/08/07/hhkb-pro2-types-show/HHKB05.jpg" title="[放在盒子上来一张]"></p><p>来一张大合照<br><img src="/blog/2016/08/07/hhkb-pro2-types-show/HHKB08.jpg" title="[大合照]"></p><h2 id="业内评价总结"><a href="#业内评价总结" class="headerlink" title="业内评价总结"></a>业内评价总结</h2><ol start="0"><li>正如其名<strong>Happy Hacking Keyboard</strong> - 快乐骇客键盘，你将会很<strong>Happy</strong>；</li><li>提供 6 个 DIP 开关，通过这些开关的组合，可以交换键盘上一些键的位置，或者是改变某些键的功能，让 HHKB 在 Windows/Linux/Mac OS 下工作；</li><li>键盘寿命长。HHKB 采用静电容轴，按下键后，电容的容量会发生改变，实现按键触发效果。由于是无触点设计，所以磨损就较小；</li><li>接口丰富。除了本身使用的一个 mini USB 口外，还额外提供了两个 USB 接口，方便扩展；</li><li>键帽通过颜色分区。将功能区与输入区用颜色进行了分隔，整体相当有复古感觉，这也是很多键帽玩家所喜欢的配色方案；</li><li>对强迫症患者友好。除了右边的 shift 与 fn 键之外，整体左右对称，非常符合强迫症患者的审美习惯。</li></ol><h2 id="Mac-适配"><a href="#Mac-适配" class="headerlink" title="Mac 适配"></a>Mac 适配</h2><p>再过一个月就不能叫OSX了，改叫MacOS了，不由感叹啊！由于自己长期使用Mac，当然第一要务就是适配，在这里要纠正一下网上各种教程所谓Mac上SW23开，其余关的谬论！HHKB背后写得很清楚，Macintosh只需要开SW2就可以，下面配上官网是配图，注意最下红色<code>*</code>号标注的第一行，Macintosh下，SW3无效，就是说你开和关都没用的，Mac下本来Delete和Backspace键是合二为一，这样才叫人性化啊。<a href="http://www.pfu.fujitsu.com/hhkeyboard/leaflet/hhkb_backview.html" target="_blank" rel="noopener">点击前往下图原文</a></p><img src="/blog/2016/08/07/hhkb-pro2-types-show/hhkb-sw01.png" title="[背面适配开关1]"><img src="/blog/2016/08/07/hhkb-pro2-types-show/hhkb-sw02.png" title="[背面适配开关2]"><p>另外，图上还有一行红字</p><blockquote><p>在Macintosh模式下，使用一些功能，需要单独安装驱动程序。<br>就是说，在你的Mac不能识别的时候，安装 <a href="http://www.pfu.fujitsu.com/hhkeyboard/macdownload.html" target="_blank" rel="noopener">这个驱动</a> 就OK了，还有如果安装了驱动，可以更好的支持Mac下面的一些原生快捷键(不需要键盘映射的)，所以还是推荐安装。</p></blockquote><h2 id="无折腾不码农"><a href="#无折腾不码农" class="headerlink" title="无折腾不码农"></a>无折腾不码农</h2><p>推荐一款折腾键位映射的开源工具<strong>Karabiner</strong>，安装后需要重启。<br><a href="https://pqrs.org/osx/karabiner/" target="_blank" rel="noopener">猛击这里前往下载</a></p><p>贴一张我自己的轻微折腾映射，对照设置就OK了<br><img src="/blog/2016/08/07/hhkb-pro2-types-show/karabiner-config.png" title="[Karabiner设置]"></p><p><strong>准备过段时间在来写手感</strong></p>]]></content:encoded>
      
      <comments>http://gumutianqi.github.io/blog/2016/08/07/hhkb-pro2-types-show/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://gumutianqi.github.io/blog/2016/08/07/hello-world/</link>
      <guid>http://gumutianqi.github.io/blog/2016/08/07/hello-world/</guid>
      <pubDate>Sun, 07 Aug 2016 03:50:10 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;不忘初心&quot;&gt;&lt;a href=&quot;#不忘初心&quot; class=&quot;headerlink&quot; title=&quot;不忘初心&quot;&gt;&lt;/a&gt;不忘初心&lt;/h2&gt;&lt;p&gt;欢迎来到Hexo的世界，任何事情的开始都是从 &lt;code&gt;Hello World&lt;/code&gt; 开始的，写博客也不例外！&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="不忘初心"><a href="#不忘初心" class="headerlink" title="不忘初心"></a>不忘初心</h2><p>欢迎来到Hexo的世界，任何事情的开始都是从 <code>Hello World</code> 开始的，写博客也不例外！</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># I am Larry Koo.</span></span><br><span class="line"><span class="comment"># Hello World！Hexo!</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://gumutianqi.github.io/blog/2016/08/07/hello-world/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
