{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/uploads/alipay.jpg","path":"uploads/alipay.jpg","modified":1,"renderable":0},{"_id":"source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":1,"renderable":0},{"_id":"source/uploads/wechatpay.jpg","path":"uploads/wechatpay.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"ba9cda575a0bba1218ccf2b18e741e9f26bb960e","modified":1503309068000},{"_id":"source/404.html","hash":"cebbe3cf2f59ceac9d22d23b12c0fa1b58ec323c","modified":1503900449000},{"_id":"source/robots.txt","hash":"fcd7559fffd2f5d5b276e3031ae57bc5bb88bb85","modified":1503306162000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1503306162000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1503306162000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1503306162000},{"_id":"themes/next/.DS_Store","hash":"ab047d248de3b20b5b31a0dbca9c72121a6313b4","modified":1503314264000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1503306162000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1503306162000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1503306162000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1503306162000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1503306162000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1503306162000},{"_id":"themes/next/README.cn.md","hash":"6d9177e7dad87e6129760e4b559bd3f7a15429d7","modified":1503306162000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1503306162000},{"_id":"themes/next/README.md","hash":"1d2e4611c590bc20339a5cc2f9cd20801169f66f","modified":1503306162000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1503306162000},{"_id":"themes/next/_config.yml","hash":"7386a044e7aec15931e925d9edeb895bbd7632a8","modified":1503316500000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1503306162000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1503306162000},{"_id":"source/_posts/change-centos-yum-mirrors.md","hash":"ed5f812ba858ed0995a42f8f829031710a9046ff","modified":1504677973000},{"_id":"source/about/index.md","hash":"fd1e67960ff0fd445f976d111a062c04ff2edb1e","modified":1503306162000},{"_id":"source/categories/index.md","hash":"de70f9254d802435068ef253dac447faf273ffdb","modified":1503306162000},{"_id":"source/_posts/.DS_Store","hash":"30be17889074d0b56ac90abe721d5734b02c939e","modified":1508740739000},{"_id":"source/_posts/hhkb-pro2-types-show.md","hash":"1e97210e113da0be0f0ef67e57009d9a98e667c2","modified":1504678381000},{"_id":"source/_posts/docker-hub-registry-config.md","hash":"c937d5aca9c9dc4e5e27b179279aeb0948186a0c","modified":1504678180000},{"_id":"source/_posts/hello-world.md","hash":"3e826e78729fbecc900a905a0e5ee27a3f2e626b","modified":1503306162000},{"_id":"source/_posts/python-versions-pyenv.md","hash":"dc786135c70175239a926d07a2482e475fc6a3c8","modified":1508740805000},{"_id":"source/_posts/useful-jvm-experience.md","hash":"a15405b3cfc4a62187fd0d27d26dd8edca239984","modified":1503306162000},{"_id":"source/_posts/rancheros-free-style.md","hash":"751ac5c29acc1f7ceaec145e74bc2903ab67d7cd","modified":1504678640000},{"_id":"source/tags/index.md","hash":"6f455e38704121ca6e5c3bb30a1e0f2c11387543","modified":1503306162000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1503306162000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"679cdcc33eda5b33375206b2add1de84cea1615e","modified":1503306162000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"e9169b65a7e3392c27562f9e11061a3ab76bb600","modified":1503306162000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1503306162000},{"_id":"themes/next/languages/de.yml","hash":"98aa551443b2a61a74b6f2a218635da6d2f6cf57","modified":1503306162000},{"_id":"themes/next/languages/default.yml","hash":"c0b90d66772e79585cd26a81694ad69c16312d6b","modified":1503306162000},{"_id":"themes/next/languages/fr-FR.yml","hash":"a14d051bbec26cfcae358bdcf1acf62a35fb1a45","modified":1503306162000},{"_id":"themes/next/languages/en.yml","hash":"c0b90d66772e79585cd26a81694ad69c16312d6b","modified":1503306162000},{"_id":"themes/next/languages/id.yml","hash":"f8b57daac2e50ace9a6d5051b17208af8139c2ae","modified":1503306162000},{"_id":"themes/next/languages/ja.yml","hash":"0c99ba4ba7d36c43d002342611d2c656ef498582","modified":1503306162000},{"_id":"themes/next/languages/ko.yml","hash":"043951e82997131dd8be40ff2093ef36849ba725","modified":1503306162000},{"_id":"themes/next/languages/pt-BR.yml","hash":"91584764104ef29293117375fc010b1bdbe9aff6","modified":1503306162000},{"_id":"themes/next/languages/pt.yml","hash":"dfd0b8574177346b78cab29db055fbc44ac309dc","modified":1503306162000},{"_id":"themes/next/languages/ru.yml","hash":"98dd9b6ddd88400a7b02cd7e8adb41e7b842bf57","modified":1503306162000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"c1255b722fc5fdecf1852c3b592edfea9dbb554c","modified":1503306162000},{"_id":"themes/next/languages/zh-hk.yml","hash":"e8072846fd43beadbae394e30a49aa5c92a0a53b","modified":1503306162000},{"_id":"themes/next/layout/_layout.swig","hash":"e3c40f48ffbe19e7a2a54e72c8bb273630c37633","modified":1503306162000},{"_id":"themes/next/languages/zh-tw.yml","hash":"562141bfe450432131af012baa262a3de79a50bc","modified":1503306162000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1503306162000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1503306162000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1503306162000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1503306162000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1503306162000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1503306162000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1503306162000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1503306162000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1503306162000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1503306162000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1503306162000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1503306162000},{"_id":"source/uploads/alipay.jpg","hash":"2731d7317259db95b9ede7b5431882d7484df24f","modified":1503306162000},{"_id":"source/uploads/avatar.jpg","hash":"3a484b41f1cceabaa0bc500e6ae00f1f62b0af27","modified":1503306162000},{"_id":"source/uploads/wechatpay.jpg","hash":"b5e6a41ab90fb3b3b8f36222df4475992b3cb12c","modified":1503306162000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503306162000},{"_id":"source/_posts/python-versions-pyenv/python-pyenv-logo.png","hash":"96f8431c9209ccf2e21a4ef83c778a5761095383","modified":1508740764000},{"_id":"source/_posts/change-centos-yum-mirrors/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1503366053000},{"_id":"source/_posts/hhkb-pro2-types-show/bjarne_hhkb.jpg","hash":"897b0469774d0a2490b03df12d9eb313a47d6108","modified":1503306162000},{"_id":"source/_posts/hhkb-pro2-types-show/hhkb-gnu.jpg","hash":"f67d299f76e37d9681516d15da138d16552df5a6","modified":1503306162000},{"_id":"source/_posts/hhkb-pro2-types-show/tux_hacking.jpg","hash":"176f4c61ae8aafa1a99e9a15a3b2929e2ea15e6e","modified":1503306162000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1503306162000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1503306162000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1503306162000},{"_id":"themes/next/layout/_macro/post.swig","hash":"767e1d5503ecce85f577c8fb673a3503b65484ce","modified":1503306162000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1503306162000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1503306162000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1503306162000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1d134ae3ea53b96d72f8c90524c460c89bbcfb21","modified":1503306162000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"fb02c81273d5897ebb98b50f4c10f7edc34f9240","modified":1503306162000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"010ef8c42d2e1a95abc60caf757293ca8eb4a68b","modified":1503306162000},{"_id":"themes/next/layout/_partials/header.swig","hash":"714d32f6f04a7400b47bbd7fbfa008fec672b894","modified":1503306162000},{"_id":"themes/next/layout/_partials/head.swig","hash":"86a821e9759cf243e27bf67921c7203568d8c756","modified":1503306162000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1503306162000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1503306162000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1503306162000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1503306162000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1503306162000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1503306162000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1503306162000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1503306162000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1503306162000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1503306162000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1503306162000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1503306162000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1503306162000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1503306162000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1503306162000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1503306162000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1503306162000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1503306162000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1503306162000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1503306162000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1503306162000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503306162000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1503306162000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503306162000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1503306162000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1503306162000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1503306162000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1503306162000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1503306162000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1503306162000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1503306162000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1503306162000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1503306162000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1503306162000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1503306162000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1503306162000},{"_id":"source/_posts/hhkb-pro2-types-show/HHKB01.jpg","hash":"d55848192de9603d0d0ce6b84334948d41ecc24c","modified":1503306162000},{"_id":"source/_posts/hhkb-pro2-types-show/HHKB03.jpg","hash":"b27eed9aa466c301b6ca281fc7878188a701ce3a","modified":1503306162000},{"_id":"source/_posts/hhkb-pro2-types-show/HHKB05.jpg","hash":"4b29b545755a3934d32a07ba47d43c0cfd5c1f15","modified":1503306162000},{"_id":"source/_posts/hhkb-pro2-types-show/HHKB08.jpg","hash":"660dca85302b58aef385dda7d15375d721adc2e1","modified":1503306162000},{"_id":"source/_posts/hhkb-pro2-types-show/hhkb.jpg","hash":"945e4b53f3a2b27463cd0027711afa13261cae93","modified":1503306162000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503306162000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503306162000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503306162000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503306162000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503306162000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503306162000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503306162000},{"_id":"source/_posts/hhkb-pro2-types-show/HHKB04.jpg","hash":"fe7e5cc93c9f7defa24558c55991472d2a5e7bb1","modified":1503306162000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1503306162000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1503306162000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1503306162000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1503306162000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1503306162000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1503306162000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1503306162000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1503306162000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"fd65b0d38d4a8b8306de815c48caad20b84ba4cb","modified":1503306162000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1503306162000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1503306162000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1503306162000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1503306162000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1503306162000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1503306162000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1503306162000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1503306162000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1503306162000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1503306162000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1503306162000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1503306162000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1503306162000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1503306162000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1503306162000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1503306162000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1503306162000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1503306162000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1503306162000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"576e716893153a855eaf6d136fad7cb6d4065e09","modified":1503306162000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1503306162000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"9f4ed36c73e890909b8ebbe601fb60e13d048288","modified":1503306162000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1503306162000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1503306162000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1503306162000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1503306162000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1503306162000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1503306162000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1503306162000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1503306162000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1503306162000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"6359c84aaa02c90be60b22abe638b737ddd69c9c","modified":1503306162000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1503306162000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1503306162000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1503306162000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1503306162000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1503306162000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1503306162000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1503306162000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1503306162000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1503306162000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1503306162000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1503306162000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1503306162000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1503306162000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1503306162000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1503306162000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1503306162000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1503306162000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1503306162000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1503306162000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1503306162000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1503306162000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1503306162000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1503306162000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1503306162000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1503306162000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1503306162000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1503306162000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1503306162000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1503306162000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1503306162000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1503306162000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1503306162000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1503306162000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1503306162000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1503306162000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1503306162000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1503306162000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1503306162000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1503306162000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1503306162000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1503306162000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1503306162000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1503306162000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1503306162000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1503306162000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1503306162000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1503306162000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1503306162000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1503306162000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1503306162000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1503306162000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1503306162000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1503306162000},{"_id":"source/_posts/hhkb-pro2-types-show/hhkb-sw01.png","hash":"57343e4287596319b5ad59e7e6acdd6b23a6f02e","modified":1503306162000},{"_id":"source/_posts/hhkb-pro2-types-show/hhkb-sw02.png","hash":"01a3ccca92c52e8f8ea13c7b7d923e615eb03b84","modified":1503306162000},{"_id":"source/_posts/hhkb-pro2-types-show/karabiner-config.png","hash":"160a3522c6ba470f520c2dc599ab455b3643adf7","modified":1503306162000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1503306162000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1503306162000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1503306162000},{"_id":"source/_posts/change-centos-yum-mirrors/centos-logo.png","hash":"c2a360d1b50c56e4f6d7c8e006728276c1f1902e","modified":1503365917000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1503306162000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1503306162000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"f2030fa436c47791d1a42358cc0ef6f9809f212c","modified":1503306162000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1503306162000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"a9c6355d6516af2e13254ec89e33e5b7dcf8ceb4","modified":1503306162000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1503306162000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1503306162000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1503306162000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"0af5a9322156c4c21d3c7d38f5ee48de5286f523","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"f00d0a9ff02f6814011e0b613a2d9020911b5c58","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1503306162000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1503306162000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1503306162000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1503306162000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1503306162000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1503306162000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1503306162000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1503306162000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1503306162000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1503306162000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1503306162000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1503306162000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1503306162000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1503306162000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1503306162000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"e6680feea343cecbdde8d643c777d689742abc28","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1503306162000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1503306162000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1503306162000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1503306162000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1503306162000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1503306162000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1503306162000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1503306162000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1503306162000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1503306162000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1503306162000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1503306162000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1503306162000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1503306162000}],"Category":[{"name":"Linux","_id":"cj93te7220005toz66nday3kd"},{"name":"各种入坑","_id":"cj93te727000btoz6ep2367o6"},{"name":"Docker","_id":"cj93te72b000gtoz61jn8tlf2"},{"name":"各种碎碎念","_id":"cj93te72d000ltoz6oz4wpmfm"},{"name":"Python","_id":"cj93te72h000otoz6wd879vi7"},{"name":"JAVA","_id":"cj93te72h000ttoz6y71llgqi"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n  <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" \n  charset=\"utf-8\" homePageUrl=\"/blog\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n  <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" \n  charset=\"utf-8\" homePageUrl=\"/blog\" homePageName=\"回到我的主页\"></script>\n</body>\n</html>","date":"2017-08-28T06:07:29.000Z","updated":"2017-08-28T06:07:29.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj93te70j0000toz6lc8o8zet","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n  <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/blog\" homepagename=\"回到我的主页\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n  <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/blog\" homepagename=\"回到我的主页\"></script>\n</body>\n</html>"},{"title":"about","date":"2016-08-07T03:34:48.000Z","_content":"\n## 关于我\n\n我是LarryKoo，我是老古，我也是古木天琪(gumutianqi)；\n\n一个混迹于IT界的码农；\n\n我是果粉，也是G粉，也是开源爱好者；\n\n我爱旅行，我爱Code，我爱我的生活；\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-08-07 11:34:48\n---\n\n## 关于我\n\n我是LarryKoo，我是老古，我也是古木天琪(gumutianqi)；\n\n一个混迹于IT界的码农；\n\n我是果粉，也是G粉，也是开源爱好者；\n\n我爱旅行，我爱Code，我爱我的生活；\n","updated":"2017-08-21T09:02:42.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj93te7200002toz6a1d5c72q","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>我是LarryKoo，我是老古，我也是古木天琪(gumutianqi)；</p>\n<p>一个混迹于IT界的码农；</p>\n<p>我是果粉，也是G粉，也是开源爱好者；</p>\n<p>我爱旅行，我爱Code，我爱我的生活；</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>我是LarryKoo，我是老古，我也是古木天琪(gumutianqi)；</p>\n<p>一个混迹于IT界的码农；</p>\n<p>我是果粉，也是G粉，也是开源爱好者；</p>\n<p>我爱旅行，我爱Code，我爱我的生活；</p>\n"},{"title":"分类","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: categories\ncomments: false\n---\n","date":"2017-08-21T09:02:42.000Z","updated":"2017-08-21T09:02:42.000Z","path":"categories/index.html","layout":"page","_id":"cj93te7210004toz678xsl2hr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: tags\ncomments: false\n---\n","date":"2017-08-21T09:02:42.000Z","updated":"2017-08-21T09:02:42.000Z","path":"tags/index.html","layout":"page","_id":"cj93te7250008toz6534w3s8j","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"配置CENTOS YUM更新源","date":"2017-08-22T01:42:50.000Z","_content":"{% asset_img centos-logo.png%}\n\n### 前言\n\n大家都知道CentOS 有个很方便的软件安装工具yum，但是默认安装完 CentOS，系统里使用的是国外的CentOS更新源，这就造成了我们使用默认更新源安装或者更新软件时速度很慢的问题。\n\n为了使用yum工具能快速的安装更新软件，我们需要将默认的yum更新源配置为国内的更新源。yum更新源配置文件位于CentOS目录 `/etc/yum.repos.d/` 下。\n\n<!-- more -->\n\n### 提供几个国内快速的更新源\n\n**教育网资源**\n\n> 上海交大： http://ftp.sjtu.edu.cn/centos/\n\n服务器位于北京，中国教育网网络中心，下载速度高达十M。\n北方用户与教育网用户推荐，速度飞快。\n需要手动创建 CentOS-Base.repo文件。\n\n> 中国科技大学：http://centos.ustc.edu.cn\n\n服务器位于合肥。 南方用户推荐。 同样的，`CentOS`版本非常丰富，适合长期使用。\n\n**非教育网资源**\n\n> sohu的开源镜像服务器：http://mirrors.sohu.com/\n\n服务器位于山东省联通\n\n> 网易的开源服务器镜像： http://mirrors.163.com/centos\n\n速度也不错，全国用户推荐\n总之，大家在使用前可以 ping 一下一上更新源，看哪个快就用哪个。\n\n### 配置源 ( 以 CentOS7 为例 )\n\n> CentOS-Base.repo文件示例，这个文件在这个目录下  /etc/yum.repos.d/\n\n```\n[base]\nname=CentOS-$releasever - Base\nbaseurl=http://mirrors.163.com/centos/7/os/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-6 \n\n[updates]\nname=CentOS-$releasever - Updates\nbaseurl=http://mirrors.163.com/centos/7/updates/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-6\n\n[addons]\nname=CentOS-$releasever - Addons\nbaseurl=http://mirrors.163.com/centos/$releasever/addons/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n\n[extras]\nname=CentOS-$releasever - Extras\nbaseurl=http://mirrors.163.com/centos/7/extras/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n\n[centosplus]\nname=CentOS-$releasever - Plus\nbaseurl=http://mirrors.163.com/centos/7/centosplus/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n```\n\n---\n\n从以上配置文件可以看出，需要根据各家源情况 有选择的配置 [base]  [updates]  [addons]  [extras]  [centosplus]   这几项。\n\n每一项只要修改`baseurl`和`gpgkey`为相应源地址即可。\n\n以上配置结束之后，要清空yum缓存，并重建yum缓存，执行以下命令：\n\n```\nyum clean all && yum clean metadata && yum clean dbcache && yum makecache && yum update\n```\n","source":"_posts/change-centos-yum-mirrors.md","raw":"---\ntitle: 配置CENTOS YUM更新源\ndate: 2017-08-22T09:42:50.000Z\ncategories:\n  - Linux\ntags:\n  - Linux\n  - CentOS\npermalink: change-centos-yum-mirrors\n---\n{% asset_img centos-logo.png%}\n\n### 前言\n\n大家都知道CentOS 有个很方便的软件安装工具yum，但是默认安装完 CentOS，系统里使用的是国外的CentOS更新源，这就造成了我们使用默认更新源安装或者更新软件时速度很慢的问题。\n\n为了使用yum工具能快速的安装更新软件，我们需要将默认的yum更新源配置为国内的更新源。yum更新源配置文件位于CentOS目录 `/etc/yum.repos.d/` 下。\n\n<!-- more -->\n\n### 提供几个国内快速的更新源\n\n**教育网资源**\n\n> 上海交大： http://ftp.sjtu.edu.cn/centos/\n\n服务器位于北京，中国教育网网络中心，下载速度高达十M。\n北方用户与教育网用户推荐，速度飞快。\n需要手动创建 CentOS-Base.repo文件。\n\n> 中国科技大学：http://centos.ustc.edu.cn\n\n服务器位于合肥。 南方用户推荐。 同样的，`CentOS`版本非常丰富，适合长期使用。\n\n**非教育网资源**\n\n> sohu的开源镜像服务器：http://mirrors.sohu.com/\n\n服务器位于山东省联通\n\n> 网易的开源服务器镜像： http://mirrors.163.com/centos\n\n速度也不错，全国用户推荐\n总之，大家在使用前可以 ping 一下一上更新源，看哪个快就用哪个。\n\n### 配置源 ( 以 CentOS7 为例 )\n\n> CentOS-Base.repo文件示例，这个文件在这个目录下  /etc/yum.repos.d/\n\n```\n[base]\nname=CentOS-$releasever - Base\nbaseurl=http://mirrors.163.com/centos/7/os/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-6 \n\n[updates]\nname=CentOS-$releasever - Updates\nbaseurl=http://mirrors.163.com/centos/7/updates/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-6\n\n[addons]\nname=CentOS-$releasever - Addons\nbaseurl=http://mirrors.163.com/centos/$releasever/addons/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n\n[extras]\nname=CentOS-$releasever - Extras\nbaseurl=http://mirrors.163.com/centos/7/extras/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n\n[centosplus]\nname=CentOS-$releasever - Plus\nbaseurl=http://mirrors.163.com/centos/7/centosplus/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n```\n\n---\n\n从以上配置文件可以看出，需要根据各家源情况 有选择的配置 [base]  [updates]  [addons]  [extras]  [centosplus]   这几项。\n\n每一项只要修改`baseurl`和`gpgkey`为相应源地址即可。\n\n以上配置结束之后，要清空yum缓存，并重建yum缓存，执行以下命令：\n\n```\nyum clean all && yum clean metadata && yum clean dbcache && yum makecache && yum update\n```\n","slug":"change-centos-yum-mirrors","published":1,"updated":"2017-09-06T06:06:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj93te71x0001toz63uxn2ajr","content":"<img src=\"/blog/2017/08/22/change-centos-yum-mirrors/centos-logo.png\" alt=\"centos-logo.png\" title=\"\">\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>大家都知道CentOS 有个很方便的软件安装工具yum，但是默认安装完 CentOS，系统里使用的是国外的CentOS更新源，这就造成了我们使用默认更新源安装或者更新软件时速度很慢的问题。</p>\n<p>为了使用yum工具能快速的安装更新软件，我们需要将默认的yum更新源配置为国内的更新源。yum更新源配置文件位于CentOS目录 <code>/etc/yum.repos.d/</code> 下。</p>\n<a id=\"more\"></a>\n<h3 id=\"提供几个国内快速的更新源\"><a href=\"#提供几个国内快速的更新源\" class=\"headerlink\" title=\"提供几个国内快速的更新源\"></a>提供几个国内快速的更新源</h3><p><strong>教育网资源</strong></p>\n<blockquote>\n<p>上海交大： <a href=\"http://ftp.sjtu.edu.cn/centos/\" target=\"_blank\" rel=\"external\">http://ftp.sjtu.edu.cn/centos/</a></p>\n</blockquote>\n<p>服务器位于北京，中国教育网网络中心，下载速度高达十M。<br>北方用户与教育网用户推荐，速度飞快。<br>需要手动创建 CentOS-Base.repo文件。</p>\n<blockquote>\n<p>中国科技大学：<a href=\"http://centos.ustc.edu.cn\" target=\"_blank\" rel=\"external\">http://centos.ustc.edu.cn</a></p>\n</blockquote>\n<p>服务器位于合肥。 南方用户推荐。 同样的，<code>CentOS</code>版本非常丰富，适合长期使用。</p>\n<p><strong>非教育网资源</strong></p>\n<blockquote>\n<p>sohu的开源镜像服务器：<a href=\"http://mirrors.sohu.com/\" target=\"_blank\" rel=\"external\">http://mirrors.sohu.com/</a></p>\n</blockquote>\n<p>服务器位于山东省联通</p>\n<blockquote>\n<p>网易的开源服务器镜像： <a href=\"http://mirrors.163.com/centos\" target=\"_blank\" rel=\"external\">http://mirrors.163.com/centos</a></p>\n</blockquote>\n<p>速度也不错，全国用户推荐<br>总之，大家在使用前可以 ping 一下一上更新源，看哪个快就用哪个。</p>\n<h3 id=\"配置源-以-CentOS7-为例\"><a href=\"#配置源-以-CentOS7-为例\" class=\"headerlink\" title=\"配置源 ( 以 CentOS7 为例 )\"></a>配置源 ( 以 CentOS7 为例 )</h3><blockquote>\n<p>CentOS-Base.repo文件示例，这个文件在这个目录下  /etc/yum.repos.d/</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">[base]</div><div class=\"line\">name=CentOS-$releasever - Base</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/7/os/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-6 </div><div class=\"line\"></div><div class=\"line\">[updates]</div><div class=\"line\">name=CentOS-$releasever - Updates</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/7/updates/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-6</div><div class=\"line\"></div><div class=\"line\">[addons]</div><div class=\"line\">name=CentOS-$releasever - Addons</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/$releasever/addons/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div><div class=\"line\"></div><div class=\"line\">[extras]</div><div class=\"line\">name=CentOS-$releasever - Extras</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/7/extras/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div><div class=\"line\"></div><div class=\"line\">[centosplus]</div><div class=\"line\">name=CentOS-$releasever - Plus</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/7/centosplus/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">enabled=0</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div></pre></td></tr></table></figure>\n<hr>\n<p>从以上配置文件可以看出，需要根据各家源情况 有选择的配置 [base]  [updates]  [addons]  [extras]  [centosplus]   这几项。</p>\n<p>每一项只要修改<code>baseurl</code>和<code>gpgkey</code>为相应源地址即可。</p>\n<p>以上配置结束之后，要清空yum缓存，并重建yum缓存，执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum clean all &amp;&amp; yum clean metadata &amp;&amp; yum clean dbcache &amp;&amp; yum makecache &amp;&amp; yum update</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<img src=\"/blog/2017/08/22/change-centos-yum-mirrors/centos-logo.png\" alt=\"centos-logo.png\" title=\"\">\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>大家都知道CentOS 有个很方便的软件安装工具yum，但是默认安装完 CentOS，系统里使用的是国外的CentOS更新源，这就造成了我们使用默认更新源安装或者更新软件时速度很慢的问题。</p>\n<p>为了使用yum工具能快速的安装更新软件，我们需要将默认的yum更新源配置为国内的更新源。yum更新源配置文件位于CentOS目录 <code>/etc/yum.repos.d/</code> 下。</p>","more":"<h3 id=\"提供几个国内快速的更新源\"><a href=\"#提供几个国内快速的更新源\" class=\"headerlink\" title=\"提供几个国内快速的更新源\"></a>提供几个国内快速的更新源</h3><p><strong>教育网资源</strong></p>\n<blockquote>\n<p>上海交大： <a href=\"http://ftp.sjtu.edu.cn/centos/\" target=\"_blank\" rel=\"external\">http://ftp.sjtu.edu.cn/centos/</a></p>\n</blockquote>\n<p>服务器位于北京，中国教育网网络中心，下载速度高达十M。<br>北方用户与教育网用户推荐，速度飞快。<br>需要手动创建 CentOS-Base.repo文件。</p>\n<blockquote>\n<p>中国科技大学：<a href=\"http://centos.ustc.edu.cn\" target=\"_blank\" rel=\"external\">http://centos.ustc.edu.cn</a></p>\n</blockquote>\n<p>服务器位于合肥。 南方用户推荐。 同样的，<code>CentOS</code>版本非常丰富，适合长期使用。</p>\n<p><strong>非教育网资源</strong></p>\n<blockquote>\n<p>sohu的开源镜像服务器：<a href=\"http://mirrors.sohu.com/\" target=\"_blank\" rel=\"external\">http://mirrors.sohu.com/</a></p>\n</blockquote>\n<p>服务器位于山东省联通</p>\n<blockquote>\n<p>网易的开源服务器镜像： <a href=\"http://mirrors.163.com/centos\" target=\"_blank\" rel=\"external\">http://mirrors.163.com/centos</a></p>\n</blockquote>\n<p>速度也不错，全国用户推荐<br>总之，大家在使用前可以 ping 一下一上更新源，看哪个快就用哪个。</p>\n<h3 id=\"配置源-以-CentOS7-为例\"><a href=\"#配置源-以-CentOS7-为例\" class=\"headerlink\" title=\"配置源 ( 以 CentOS7 为例 )\"></a>配置源 ( 以 CentOS7 为例 )</h3><blockquote>\n<p>CentOS-Base.repo文件示例，这个文件在这个目录下  /etc/yum.repos.d/</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">[base]</div><div class=\"line\">name=CentOS-$releasever - Base</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/7/os/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-6 </div><div class=\"line\"></div><div class=\"line\">[updates]</div><div class=\"line\">name=CentOS-$releasever - Updates</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/7/updates/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-6</div><div class=\"line\"></div><div class=\"line\">[addons]</div><div class=\"line\">name=CentOS-$releasever - Addons</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/$releasever/addons/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div><div class=\"line\"></div><div class=\"line\">[extras]</div><div class=\"line\">name=CentOS-$releasever - Extras</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/7/extras/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div><div class=\"line\"></div><div class=\"line\">[centosplus]</div><div class=\"line\">name=CentOS-$releasever - Plus</div><div class=\"line\">baseurl=http://mirrors.163.com/centos/7/centosplus/$basearch/</div><div class=\"line\">gpgcheck=1</div><div class=\"line\">enabled=0</div><div class=\"line\">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div></pre></td></tr></table></figure>\n<hr>\n<p>从以上配置文件可以看出，需要根据各家源情况 有选择的配置 [base]  [updates]  [addons]  [extras]  [centosplus]   这几项。</p>\n<p>每一项只要修改<code>baseurl</code>和<code>gpgkey</code>为相应源地址即可。</p>\n<p>以上配置结束之后，要清空yum缓存，并重建yum缓存，执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum clean all &amp;&amp; yum clean metadata &amp;&amp; yum clean dbcache &amp;&amp; yum makecache &amp;&amp; yum update</div></pre></td></tr></table></figure>"},{"title":"码农神器 HHKB-PRO2-TypeS 开箱入坑","date":"2016-08-07T04:22:32.000Z","_content":"## 序\n\nHHKB，全称叫做：`Happy Hacking Keyboard`，于 1996 年 12 月 20 日诞生于日本，由和田英一和株式会社 PFU 共同开发。\n\n科普就不继续了，有兴趣的直接 [前往Wiki](https://zh.wikipedia.org/wiki/Happy_Hacking_Keyboard)\n\n{% asset_img hhkb.jpg [HHKB-Pro2-TypeS] %}\n\n> **Happy Hacking Keyboard**（缩写为HHKB）是由株式会社PFU（富士通的全资子公司）所经销的计算机键盘。本键盘由和田英一和PFU研究所共同开发，于1996年12月开始销售。\n> \n> 2004年荣获“商品设计部门”和“个人计算机及相关外设部门”的优秀设计奖\n\n> 引用自[维基百科]\n\n<!-- more -->\n\n**贴一段HHKB中国官网首页的一段话：**\n\n> 美国西部的牛仔们，会将死去的马儿留在原地，但是仍然会扛着马鞍长途跋涉，穿越一望无垠的沙漠。因为马儿是消耗品，而马鞍却是与人体融合在一起的“知己”。我们要有这样的观念：现在，电脑是消耗品，键盘却是传递情感，陪伴我们一生的“挚友”。\n\n> [东京大学名誉教授 和田英一]\n\n都说HHKB是码农神器，同时也是各路IT大神的钟爱之物。\n\nLinux创始人 **Linus·Torvalds** 最爱\n{% asset_img tux_hacking.jpg %}\n\nGNU 之父大胡子 **Richard Stallman**\n下图是他100美元的OLPC配上250美元的HHKB Pro2，这才是真Geek。\n{% asset_img  hhkb-gnu.jpg %}\n\n当然还有C++之父 **Bjarne Stroustrup**\n{% asset_img  bjarne_hhkb.jpg %}\n\n入手之前对比了HHKB Pro2和Pro2 Type-S，看到很多买了Pro2的继续迷恋Type-S，一不做二不休，直接入手**Pro2 Type-S**了。\n\n## 开箱\n去除外包装，露出真面目，右上角明显的Type-S标识。\n{% asset_img HHKB01.jpg  [完整盒子] %}\n\n背面来一张，果然是**静电容**的高级货\n{% asset_img HHKB04.jpg  [背面] %}\n\n正式开箱，HHKB静静地躺在那里，还有说明书和mini-usb数据线(足足有2M长)，由于买的是PFU上海公司的行货，故说明书是中文的，白色有刻。\n{% asset_img HHKB03.jpg [打开盒子之后] %}\n\n撕开封条，从保护膜中取出，放在盒子上再来一张正面。\n{% asset_img HHKB05.jpg [放在盒子上来一张] %}\n\n来一张大合照\n{% asset_img HHKB08.jpg [大合照] %}\n\n## 业内评价总结\n0. 正如其名**Happy Hacking Keyboard** - 快乐骇客键盘，你将会很**Happy**；\n1. 提供 6 个 DIP 开关，通过这些开关的组合，可以交换键盘上一些键的位置，或者是改变某些键的功能，让 HHKB 在 Windows/Linux/Mac OS 下工作；\n2. 键盘寿命长。HHKB 采用静电容轴，按下键后，电容的容量会发生改变，实现按键触发效果。由于是无触点设计，所以磨损就较小；\n3. 接口丰富。除了本身使用的一个 mini USB 口外，还额外提供了两个 USB 接口，方便扩展；\n4. 键帽通过颜色分区。将功能区与输入区用颜色进行了分隔，整体相当有复古感觉，这也是很多键帽玩家所喜欢的配色方案；\n5. 对强迫症患者友好。除了右边的 shift 与 fn 键之外，整体左右对称，非常符合强迫症患者的审美习惯。\n\n## Mac 适配\n再过一个月就不能叫OSX了，改叫MacOS了，不由感叹啊！由于自己长期使用Mac，当然第一要务就是适配，在这里要纠正一下网上各种教程所谓Mac上SW23开，其余关的谬论！HHKB背后写得很清楚，Macintosh只需要开SW2就可以，下面配上官网是配图，注意最下红色`*`号标注的第一行，Macintosh下，SW3无效，就是说你开和关都没用的，Mac下本来Delete和Backspace键是合二为一，这样才叫人性化啊。[点击前往下图原文](http://www.pfu.fujitsu.com/hhkeyboard/leaflet/hhkb_backview.html)\n\n{% asset_img hhkb-sw01.png [背面适配开关1] %}\n\n{% asset_img hhkb-sw02.png  [背面适配开关2] %}\n另外，图上还有一行红字\n> 在Macintosh模式下，使用一些功能，需要单独安装驱动程序。\n就是说，在你的Mac不能识别的时候，安装 [这个驱动](http://www.pfu.fujitsu.com/hhkeyboard/macdownload.html) 就OK了，还有如果安装了驱动，可以更好的支持Mac下面的一些原生快捷键(不需要键盘映射的)，所以还是推荐安装。\n\n## 无折腾不码农\n推荐一款折腾键位映射的开源工具**Karabiner**，安装后需要重启。\n[猛击这里前往下载](https://pqrs.org/osx/karabiner/)\n\n贴一张我自己的轻微折腾映射，对照设置就OK了\n{% asset_img karabiner-config.png  [Karabiner设置] %}\n\n\n**准备过段时间在来写手感**\n","source":"_posts/hhkb-pro2-types-show.md","raw":"---\ntitle: 码农神器 HHKB-PRO2-TypeS 开箱入坑\ndate: 2016-08-07 12:22:32\ncategories: 各种入坑\ntags: \n - HHKB\n - 键盘\n---\n## 序\n\nHHKB，全称叫做：`Happy Hacking Keyboard`，于 1996 年 12 月 20 日诞生于日本，由和田英一和株式会社 PFU 共同开发。\n\n科普就不继续了，有兴趣的直接 [前往Wiki](https://zh.wikipedia.org/wiki/Happy_Hacking_Keyboard)\n\n{% asset_img hhkb.jpg [HHKB-Pro2-TypeS] %}\n\n> **Happy Hacking Keyboard**（缩写为HHKB）是由株式会社PFU（富士通的全资子公司）所经销的计算机键盘。本键盘由和田英一和PFU研究所共同开发，于1996年12月开始销售。\n> \n> 2004年荣获“商品设计部门”和“个人计算机及相关外设部门”的优秀设计奖\n\n> 引用自[维基百科]\n\n<!-- more -->\n\n**贴一段HHKB中国官网首页的一段话：**\n\n> 美国西部的牛仔们，会将死去的马儿留在原地，但是仍然会扛着马鞍长途跋涉，穿越一望无垠的沙漠。因为马儿是消耗品，而马鞍却是与人体融合在一起的“知己”。我们要有这样的观念：现在，电脑是消耗品，键盘却是传递情感，陪伴我们一生的“挚友”。\n\n> [东京大学名誉教授 和田英一]\n\n都说HHKB是码农神器，同时也是各路IT大神的钟爱之物。\n\nLinux创始人 **Linus·Torvalds** 最爱\n{% asset_img tux_hacking.jpg %}\n\nGNU 之父大胡子 **Richard Stallman**\n下图是他100美元的OLPC配上250美元的HHKB Pro2，这才是真Geek。\n{% asset_img  hhkb-gnu.jpg %}\n\n当然还有C++之父 **Bjarne Stroustrup**\n{% asset_img  bjarne_hhkb.jpg %}\n\n入手之前对比了HHKB Pro2和Pro2 Type-S，看到很多买了Pro2的继续迷恋Type-S，一不做二不休，直接入手**Pro2 Type-S**了。\n\n## 开箱\n去除外包装，露出真面目，右上角明显的Type-S标识。\n{% asset_img HHKB01.jpg  [完整盒子] %}\n\n背面来一张，果然是**静电容**的高级货\n{% asset_img HHKB04.jpg  [背面] %}\n\n正式开箱，HHKB静静地躺在那里，还有说明书和mini-usb数据线(足足有2M长)，由于买的是PFU上海公司的行货，故说明书是中文的，白色有刻。\n{% asset_img HHKB03.jpg [打开盒子之后] %}\n\n撕开封条，从保护膜中取出，放在盒子上再来一张正面。\n{% asset_img HHKB05.jpg [放在盒子上来一张] %}\n\n来一张大合照\n{% asset_img HHKB08.jpg [大合照] %}\n\n## 业内评价总结\n0. 正如其名**Happy Hacking Keyboard** - 快乐骇客键盘，你将会很**Happy**；\n1. 提供 6 个 DIP 开关，通过这些开关的组合，可以交换键盘上一些键的位置，或者是改变某些键的功能，让 HHKB 在 Windows/Linux/Mac OS 下工作；\n2. 键盘寿命长。HHKB 采用静电容轴，按下键后，电容的容量会发生改变，实现按键触发效果。由于是无触点设计，所以磨损就较小；\n3. 接口丰富。除了本身使用的一个 mini USB 口外，还额外提供了两个 USB 接口，方便扩展；\n4. 键帽通过颜色分区。将功能区与输入区用颜色进行了分隔，整体相当有复古感觉，这也是很多键帽玩家所喜欢的配色方案；\n5. 对强迫症患者友好。除了右边的 shift 与 fn 键之外，整体左右对称，非常符合强迫症患者的审美习惯。\n\n## Mac 适配\n再过一个月就不能叫OSX了，改叫MacOS了，不由感叹啊！由于自己长期使用Mac，当然第一要务就是适配，在这里要纠正一下网上各种教程所谓Mac上SW23开，其余关的谬论！HHKB背后写得很清楚，Macintosh只需要开SW2就可以，下面配上官网是配图，注意最下红色`*`号标注的第一行，Macintosh下，SW3无效，就是说你开和关都没用的，Mac下本来Delete和Backspace键是合二为一，这样才叫人性化啊。[点击前往下图原文](http://www.pfu.fujitsu.com/hhkeyboard/leaflet/hhkb_backview.html)\n\n{% asset_img hhkb-sw01.png [背面适配开关1] %}\n\n{% asset_img hhkb-sw02.png  [背面适配开关2] %}\n另外，图上还有一行红字\n> 在Macintosh模式下，使用一些功能，需要单独安装驱动程序。\n就是说，在你的Mac不能识别的时候，安装 [这个驱动](http://www.pfu.fujitsu.com/hhkeyboard/macdownload.html) 就OK了，还有如果安装了驱动，可以更好的支持Mac下面的一些原生快捷键(不需要键盘映射的)，所以还是推荐安装。\n\n## 无折腾不码农\n推荐一款折腾键位映射的开源工具**Karabiner**，安装后需要重启。\n[猛击这里前往下载](https://pqrs.org/osx/karabiner/)\n\n贴一张我自己的轻微折腾映射，对照设置就OK了\n{% asset_img karabiner-config.png  [Karabiner设置] %}\n\n\n**准备过段时间在来写手感**\n","slug":"hhkb-pro2-types-show","published":1,"updated":"2017-09-06T06:13:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj93te7200003toz6r4s11n7r","content":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>HHKB，全称叫做：<code>Happy Hacking Keyboard</code>，于 1996 年 12 月 20 日诞生于日本，由和田英一和株式会社 PFU 共同开发。</p>\n<p>科普就不继续了，有兴趣的直接 <a href=\"https://zh.wikipedia.org/wiki/Happy_Hacking_Keyboard\" target=\"_blank\" rel=\"external\">前往Wiki</a></p>\n<img src=\"/blog/2016/08/07/hhkb-pro2-types-show/hhkb.jpg\" alt=\"[HHKB-Pro2-TypeS]\" title=\"[HHKB-Pro2-TypeS]\">\n<blockquote>\n<p><strong>Happy Hacking Keyboard</strong>（缩写为HHKB）是由株式会社PFU（富士通的全资子公司）所经销的计算机键盘。本键盘由和田英一和PFU研究所共同开发，于1996年12月开始销售。</p>\n<p>2004年荣获“商品设计部门”和“个人计算机及相关外设部门”的优秀设计奖</p>\n<p>引用自[维基百科]</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><strong>贴一段HHKB中国官网首页的一段话：</strong></p>\n<blockquote>\n<p>美国西部的牛仔们，会将死去的马儿留在原地，但是仍然会扛着马鞍长途跋涉，穿越一望无垠的沙漠。因为马儿是消耗品，而马鞍却是与人体融合在一起的“知己”。我们要有这样的观念：现在，电脑是消耗品，键盘却是传递情感，陪伴我们一生的“挚友”。</p>\n<p>[东京大学名誉教授 和田英一]</p>\n</blockquote>\n<p>都说HHKB是码农神器，同时也是各路IT大神的钟爱之物。</p>\n<p>Linux创始人 <strong>Linus·Torvalds</strong> 最爱<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/tux_hacking.jpg\" alt=\"tux_hacking.jpg\" title=\"\"></p>\n<p>GNU 之父大胡子 <strong>Richard Stallman</strong><br>下图是他100美元的OLPC配上250美元的HHKB Pro2，这才是真Geek。<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/hhkb-gnu.jpg\" alt=\"hhkb-gnu.jpg\" title=\"\"></p>\n<p>当然还有C++之父 <strong>Bjarne Stroustrup</strong><br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/bjarne_hhkb.jpg\" alt=\"bjarne_hhkb.jpg\" title=\"\"></p>\n<p>入手之前对比了HHKB Pro2和Pro2 Type-S，看到很多买了Pro2的继续迷恋Type-S，一不做二不休，直接入手<strong>Pro2 Type-S</strong>了。</p>\n<h2 id=\"开箱\"><a href=\"#开箱\" class=\"headerlink\" title=\"开箱\"></a>开箱</h2><p>去除外包装，露出真面目，右上角明显的Type-S标识。<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/HHKB01.jpg\" alt=\"[完整盒子]\" title=\"[完整盒子]\"></p>\n<p>背面来一张，果然是<strong>静电容</strong>的高级货<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/HHKB04.jpg\" alt=\"[背面]\" title=\"[背面]\"></p>\n<p>正式开箱，HHKB静静地躺在那里，还有说明书和mini-usb数据线(足足有2M长)，由于买的是PFU上海公司的行货，故说明书是中文的，白色有刻。<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/HHKB03.jpg\" alt=\"[打开盒子之后]\" title=\"[打开盒子之后]\"></p>\n<p>撕开封条，从保护膜中取出，放在盒子上再来一张正面。<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/HHKB05.jpg\" alt=\"[放在盒子上来一张]\" title=\"[放在盒子上来一张]\"></p>\n<p>来一张大合照<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/HHKB08.jpg\" alt=\"[大合照]\" title=\"[大合照]\"></p>\n<h2 id=\"业内评价总结\"><a href=\"#业内评价总结\" class=\"headerlink\" title=\"业内评价总结\"></a>业内评价总结</h2><ol>\n<li>正如其名<strong>Happy Hacking Keyboard</strong> - 快乐骇客键盘，你将会很<strong>Happy</strong>；</li>\n<li>提供 6 个 DIP 开关，通过这些开关的组合，可以交换键盘上一些键的位置，或者是改变某些键的功能，让 HHKB 在 Windows/Linux/Mac OS 下工作；</li>\n<li>键盘寿命长。HHKB 采用静电容轴，按下键后，电容的容量会发生改变，实现按键触发效果。由于是无触点设计，所以磨损就较小；</li>\n<li>接口丰富。除了本身使用的一个 mini USB 口外，还额外提供了两个 USB 接口，方便扩展；</li>\n<li>键帽通过颜色分区。将功能区与输入区用颜色进行了分隔，整体相当有复古感觉，这也是很多键帽玩家所喜欢的配色方案；</li>\n<li>对强迫症患者友好。除了右边的 shift 与 fn 键之外，整体左右对称，非常符合强迫症患者的审美习惯。</li>\n</ol>\n<h2 id=\"Mac-适配\"><a href=\"#Mac-适配\" class=\"headerlink\" title=\"Mac 适配\"></a>Mac 适配</h2><p>再过一个月就不能叫OSX了，改叫MacOS了，不由感叹啊！由于自己长期使用Mac，当然第一要务就是适配，在这里要纠正一下网上各种教程所谓Mac上SW23开，其余关的谬论！HHKB背后写得很清楚，Macintosh只需要开SW2就可以，下面配上官网是配图，注意最下红色<code>*</code>号标注的第一行，Macintosh下，SW3无效，就是说你开和关都没用的，Mac下本来Delete和Backspace键是合二为一，这样才叫人性化啊。<a href=\"http://www.pfu.fujitsu.com/hhkeyboard/leaflet/hhkb_backview.html\" target=\"_blank\" rel=\"external\">点击前往下图原文</a></p>\n<img src=\"/blog/2016/08/07/hhkb-pro2-types-show/hhkb-sw01.png\" alt=\"[背面适配开关1]\" title=\"[背面适配开关1]\">\n<img src=\"/blog/2016/08/07/hhkb-pro2-types-show/hhkb-sw02.png\" alt=\"[背面适配开关2]\" title=\"[背面适配开关2]\">\n<p>另外，图上还有一行红字</p>\n<blockquote>\n<p>在Macintosh模式下，使用一些功能，需要单独安装驱动程序。<br>就是说，在你的Mac不能识别的时候，安装 <a href=\"http://www.pfu.fujitsu.com/hhkeyboard/macdownload.html\" target=\"_blank\" rel=\"external\">这个驱动</a> 就OK了，还有如果安装了驱动，可以更好的支持Mac下面的一些原生快捷键(不需要键盘映射的)，所以还是推荐安装。</p>\n</blockquote>\n<h2 id=\"无折腾不码农\"><a href=\"#无折腾不码农\" class=\"headerlink\" title=\"无折腾不码农\"></a>无折腾不码农</h2><p>推荐一款折腾键位映射的开源工具<strong>Karabiner</strong>，安装后需要重启。<br><a href=\"https://pqrs.org/osx/karabiner/\" target=\"_blank\" rel=\"external\">猛击这里前往下载</a></p>\n<p>贴一张我自己的轻微折腾映射，对照设置就OK了<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/karabiner-config.png\" alt=\"[Karabiner设置]\" title=\"[Karabiner设置]\"></p>\n<p><strong>准备过段时间在来写手感</strong></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>HHKB，全称叫做：<code>Happy Hacking Keyboard</code>，于 1996 年 12 月 20 日诞生于日本，由和田英一和株式会社 PFU 共同开发。</p>\n<p>科普就不继续了，有兴趣的直接 <a href=\"https://zh.wikipedia.org/wiki/Happy_Hacking_Keyboard\" target=\"_blank\" rel=\"external\">前往Wiki</a></p>\n<img src=\"/blog/2016/08/07/hhkb-pro2-types-show/hhkb.jpg\" alt=\"[HHKB-Pro2-TypeS]\" title=\"[HHKB-Pro2-TypeS]\">\n<blockquote>\n<p><strong>Happy Hacking Keyboard</strong>（缩写为HHKB）是由株式会社PFU（富士通的全资子公司）所经销的计算机键盘。本键盘由和田英一和PFU研究所共同开发，于1996年12月开始销售。</p>\n<p>2004年荣获“商品设计部门”和“个人计算机及相关外设部门”的优秀设计奖</p>\n<p>引用自[维基百科]</p>\n</blockquote>","more":"<p><strong>贴一段HHKB中国官网首页的一段话：</strong></p>\n<blockquote>\n<p>美国西部的牛仔们，会将死去的马儿留在原地，但是仍然会扛着马鞍长途跋涉，穿越一望无垠的沙漠。因为马儿是消耗品，而马鞍却是与人体融合在一起的“知己”。我们要有这样的观念：现在，电脑是消耗品，键盘却是传递情感，陪伴我们一生的“挚友”。</p>\n<p>[东京大学名誉教授 和田英一]</p>\n</blockquote>\n<p>都说HHKB是码农神器，同时也是各路IT大神的钟爱之物。</p>\n<p>Linux创始人 <strong>Linus·Torvalds</strong> 最爱<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/tux_hacking.jpg\" alt=\"tux_hacking.jpg\" title=\"\"></p>\n<p>GNU 之父大胡子 <strong>Richard Stallman</strong><br>下图是他100美元的OLPC配上250美元的HHKB Pro2，这才是真Geek。<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/hhkb-gnu.jpg\" alt=\"hhkb-gnu.jpg\" title=\"\"></p>\n<p>当然还有C++之父 <strong>Bjarne Stroustrup</strong><br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/bjarne_hhkb.jpg\" alt=\"bjarne_hhkb.jpg\" title=\"\"></p>\n<p>入手之前对比了HHKB Pro2和Pro2 Type-S，看到很多买了Pro2的继续迷恋Type-S，一不做二不休，直接入手<strong>Pro2 Type-S</strong>了。</p>\n<h2 id=\"开箱\"><a href=\"#开箱\" class=\"headerlink\" title=\"开箱\"></a>开箱</h2><p>去除外包装，露出真面目，右上角明显的Type-S标识。<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/HHKB01.jpg\" alt=\"[完整盒子]\" title=\"[完整盒子]\"></p>\n<p>背面来一张，果然是<strong>静电容</strong>的高级货<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/HHKB04.jpg\" alt=\"[背面]\" title=\"[背面]\"></p>\n<p>正式开箱，HHKB静静地躺在那里，还有说明书和mini-usb数据线(足足有2M长)，由于买的是PFU上海公司的行货，故说明书是中文的，白色有刻。<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/HHKB03.jpg\" alt=\"[打开盒子之后]\" title=\"[打开盒子之后]\"></p>\n<p>撕开封条，从保护膜中取出，放在盒子上再来一张正面。<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/HHKB05.jpg\" alt=\"[放在盒子上来一张]\" title=\"[放在盒子上来一张]\"></p>\n<p>来一张大合照<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/HHKB08.jpg\" alt=\"[大合照]\" title=\"[大合照]\"></p>\n<h2 id=\"业内评价总结\"><a href=\"#业内评价总结\" class=\"headerlink\" title=\"业内评价总结\"></a>业内评价总结</h2><ol>\n<li>正如其名<strong>Happy Hacking Keyboard</strong> - 快乐骇客键盘，你将会很<strong>Happy</strong>；</li>\n<li>提供 6 个 DIP 开关，通过这些开关的组合，可以交换键盘上一些键的位置，或者是改变某些键的功能，让 HHKB 在 Windows/Linux/Mac OS 下工作；</li>\n<li>键盘寿命长。HHKB 采用静电容轴，按下键后，电容的容量会发生改变，实现按键触发效果。由于是无触点设计，所以磨损就较小；</li>\n<li>接口丰富。除了本身使用的一个 mini USB 口外，还额外提供了两个 USB 接口，方便扩展；</li>\n<li>键帽通过颜色分区。将功能区与输入区用颜色进行了分隔，整体相当有复古感觉，这也是很多键帽玩家所喜欢的配色方案；</li>\n<li>对强迫症患者友好。除了右边的 shift 与 fn 键之外，整体左右对称，非常符合强迫症患者的审美习惯。</li>\n</ol>\n<h2 id=\"Mac-适配\"><a href=\"#Mac-适配\" class=\"headerlink\" title=\"Mac 适配\"></a>Mac 适配</h2><p>再过一个月就不能叫OSX了，改叫MacOS了，不由感叹啊！由于自己长期使用Mac，当然第一要务就是适配，在这里要纠正一下网上各种教程所谓Mac上SW23开，其余关的谬论！HHKB背后写得很清楚，Macintosh只需要开SW2就可以，下面配上官网是配图，注意最下红色<code>*</code>号标注的第一行，Macintosh下，SW3无效，就是说你开和关都没用的，Mac下本来Delete和Backspace键是合二为一，这样才叫人性化啊。<a href=\"http://www.pfu.fujitsu.com/hhkeyboard/leaflet/hhkb_backview.html\" target=\"_blank\" rel=\"external\">点击前往下图原文</a></p>\n<img src=\"/blog/2016/08/07/hhkb-pro2-types-show/hhkb-sw01.png\" alt=\"[背面适配开关1]\" title=\"[背面适配开关1]\">\n<img src=\"/blog/2016/08/07/hhkb-pro2-types-show/hhkb-sw02.png\" alt=\"[背面适配开关2]\" title=\"[背面适配开关2]\">\n<p>另外，图上还有一行红字</p>\n<blockquote>\n<p>在Macintosh模式下，使用一些功能，需要单独安装驱动程序。<br>就是说，在你的Mac不能识别的时候，安装 <a href=\"http://www.pfu.fujitsu.com/hhkeyboard/macdownload.html\" target=\"_blank\" rel=\"external\">这个驱动</a> 就OK了，还有如果安装了驱动，可以更好的支持Mac下面的一些原生快捷键(不需要键盘映射的)，所以还是推荐安装。</p>\n</blockquote>\n<h2 id=\"无折腾不码农\"><a href=\"#无折腾不码农\" class=\"headerlink\" title=\"无折腾不码农\"></a>无折腾不码农</h2><p>推荐一款折腾键位映射的开源工具<strong>Karabiner</strong>，安装后需要重启。<br><a href=\"https://pqrs.org/osx/karabiner/\" target=\"_blank\" rel=\"external\">猛击这里前往下载</a></p>\n<p>贴一张我自己的轻微折腾映射，对照设置就OK了<br><img src=\"/blog/2016/08/07/hhkb-pro2-types-show/karabiner-config.png\" alt=\"[Karabiner设置]\" title=\"[Karabiner设置]\"></p>\n<p><strong>准备过段时间在来写手感</strong></p>"},{"title":"替换 Docker-Hub 的镜像源","date":"2016-12-26T06:59:18.000Z","_content":"\n> 以下文档说明来自于阿里云 Docker 平台帮助文档\n\n#### 方法一：\n\n**创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址。**\n\n<!-- more -->\n\n```\ndocker-machine create --engine-registry-mirror=https://xxxx.mirror.aliyuncs.com -d virtualbox default\n```\n\n查看机器的环境配置，并配置到本地。然后通过Docker客户端访问Docker服务。\n\n```\ndocker-machine env default\neval \"$(docker-machine env default)\"\ndocker info\n```\n\n这里 xxxx 是您的专有加速器地址\n\n#### 方法二：\n\n**登录已创建的 Docker VM**\n\n```\ndocker-machine ssh default\nsudo vi /var/lib/boot2docker/profile\n```\n\n在EXTRA_ARGS中添加\n\n```\n--registry-mirror=https://xxxx.mirror.aliyuncs.com\n```\n\n重启Docker服务即可\n\n```\nsudo /etc/init.d/docker restart\n```","source":"_posts/docker-hub-registry-config.md","raw":"---\ntitle: 替换 Docker-Hub 的镜像源\ndate: 2016-12-26 14:59:18\ncategories: Docker\ntags: \n - Docker\n - Linux\npermalink: docker-hub-registry-config\n---\n\n> 以下文档说明来自于阿里云 Docker 平台帮助文档\n\n#### 方法一：\n\n**创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址。**\n\n<!-- more -->\n\n```\ndocker-machine create --engine-registry-mirror=https://xxxx.mirror.aliyuncs.com -d virtualbox default\n```\n\n查看机器的环境配置，并配置到本地。然后通过Docker客户端访问Docker服务。\n\n```\ndocker-machine env default\neval \"$(docker-machine env default)\"\ndocker info\n```\n\n这里 xxxx 是您的专有加速器地址\n\n#### 方法二：\n\n**登录已创建的 Docker VM**\n\n```\ndocker-machine ssh default\nsudo vi /var/lib/boot2docker/profile\n```\n\n在EXTRA_ARGS中添加\n\n```\n--registry-mirror=https://xxxx.mirror.aliyuncs.com\n```\n\n重启Docker服务即可\n\n```\nsudo /etc/init.d/docker restart\n```","slug":"docker-hub-registry-config","published":1,"updated":"2017-09-06T06:09:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj93te7240007toz6arzvnwhv","content":"<blockquote>\n<p>以下文档说明来自于阿里云 Docker 平台帮助文档</p>\n</blockquote>\n<h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><p><strong>创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址。</strong></p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-machine create --engine-registry-mirror=https://xxxx.mirror.aliyuncs.com -d virtualbox default</div></pre></td></tr></table></figure>\n<p>查看机器的环境配置，并配置到本地。然后通过Docker客户端访问Docker服务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-machine env default</div><div class=\"line\">eval &quot;$(docker-machine env default)&quot;</div><div class=\"line\">docker info</div></pre></td></tr></table></figure>\n<p>这里 xxxx 是您的专有加速器地址</p>\n<h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><p><strong>登录已创建的 Docker VM</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-machine ssh default</div><div class=\"line\">sudo vi /var/lib/boot2docker/profile</div></pre></td></tr></table></figure>\n<p>在EXTRA_ARGS中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">--registry-mirror=https://xxxx.mirror.aliyuncs.com</div></pre></td></tr></table></figure>\n<p>重启Docker服务即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/docker restart</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>以下文档说明来自于阿里云 Docker 平台帮助文档</p>\n</blockquote>\n<h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><p><strong>创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址。</strong></p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-machine create --engine-registry-mirror=https://xxxx.mirror.aliyuncs.com -d virtualbox default</div></pre></td></tr></table></figure>\n<p>查看机器的环境配置，并配置到本地。然后通过Docker客户端访问Docker服务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-machine env default</div><div class=\"line\">eval &quot;$(docker-machine env default)&quot;</div><div class=\"line\">docker info</div></pre></td></tr></table></figure>\n<p>这里 xxxx 是您的专有加速器地址</p>\n<h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><p><strong>登录已创建的 Docker VM</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-machine ssh default</div><div class=\"line\">sudo vi /var/lib/boot2docker/profile</div></pre></td></tr></table></figure>\n<p>在EXTRA_ARGS中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">--registry-mirror=https://xxxx.mirror.aliyuncs.com</div></pre></td></tr></table></figure>\n<p>重启Docker服务即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/docker restart</div></pre></td></tr></table></figure>"},{"title":"Hello World","date":"2016-08-07T03:50:10.000Z","_content":"\n## 不忘初心\n\n欢迎来到Hexo的世界，任何事情的开始都是从 `Hello World` 开始的，写博客也不例外！\n\n<!-- more -->\n\n``` bash\n# I am Larry Koo.\n# Hello World！Hexo!\n```\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-08-07 11:50:10\ncategories: 各种碎碎念\ntags: hello-world\n---\n\n## 不忘初心\n\n欢迎来到Hexo的世界，任何事情的开始都是从 `Hello World` 开始的，写博客也不例外！\n\n<!-- more -->\n\n``` bash\n# I am Larry Koo.\n# Hello World！Hexo!\n```\n","slug":"hello-world","published":1,"updated":"2017-08-21T09:02:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj93te7260009toz6adbmpzrm","content":"<h2 id=\"不忘初心\"><a href=\"#不忘初心\" class=\"headerlink\" title=\"不忘初心\"></a>不忘初心</h2><p>欢迎来到Hexo的世界，任何事情的开始都是从 <code>Hello World</code> 开始的，写博客也不例外！</p>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># I am Larry Koo.</span></div><div class=\"line\"><span class=\"comment\"># Hello World！Hexo!</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"不忘初心\"><a href=\"#不忘初心\" class=\"headerlink\" title=\"不忘初心\"></a>不忘初心</h2><p>欢迎来到Hexo的世界，任何事情的开始都是从 <code>Hello World</code> 开始的，写博客也不例外！</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># I am Larry Koo.</span></div><div class=\"line\"><span class=\"comment\"># Hello World！Hexo!</span></div></pre></td></tr></table></figure>"},{"title":"Python 多版本管理之 pyenv","date":"2017-10-23T06:22:32.000Z","_content":"## 序\n\n经常遇到这样的情况：\n\n*   系统自带的 Python 是 2.6，自己需要 Python 2.7 中的某些特性；\n*   系统自带的 Python 是 2.x，自己需要 Python 3.x；\n\n{% asset_img python-pyenv-logo.png [python-pyenv-logo] %}\n\n此时需要在系统中安装多个 Python，但又不能影响系统自带的 Python，即需要实现 Python 的多版本共存。[pyenv](https://github.com/yyuu/pyenv) 就是这样一个 Python 版本管理器。\n\n<!-- more -->\n\n## 安装 Pyenv\n\n在终端执行如下命令以安装 pyenv 及其插件：\n\n```\n$ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\n```\n安装完成后，根据提示将如下语句加入到 `~/.bashrc` 中:\n\n```\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"   # 这句可以不加\n```\n然后重启终端即可。\n\n## 安装 Python\n\n```\n$ pyenv install --list\n```\n该命令会列出可以用 pyenv 安装的 Python 版本。列表很长，仅列举其中几个:\n\n```\n2.7.8   # Python 2 最新版本\n3.6.3   # Python 3 最新版本\nanaconda2-4.1.0  # 支持 Python 2.6 和 2.7\nanaconda3-4.1.0  # 支持 Python 3.3 和 3.4\n```\n其中 2.7.8 和 3.6.3 这种只有版本号的是 Python 官方版本，其他的形如 `anaconda2-4.1.0` 这种既有名称又有版本后的属于 “衍生版” 或发行版。\n\n### 安装 Python 的依赖包\n\n在编译 Python 过程中会依赖一些其他库文件，因而需要首先安装这些库文件，已知的一些需要预先安装的库如下。\n\n**在 CentOS/RHEL/Fedora 下:**\n\n```\nsudo yum install readline readline-devel readline-static\nsudo yum install openssl openssl-devel openssl-static\nsudo yum install sqlite-devel\nsudo yum install bzip2-devel bzip2-libs\n```\n\n**在 Ubuntu下：**\n\n```\nsudo apt-get update\nsudo apt-get install make build-essential libssl-dev zlib1g-dev\nsudo apt-get install libbz2-dev libreadline-dev libsqlite3-dev wget curl\nsudo apt-get install llvm libncurses5-dev libncursesw5-dev\n```\n### 安装指定版本\n\n用户可以使用 `pyenv install` 安装指定版本的 python。\n\n```\npyenv install 3.6.3\n## ... 安装信息\n```\n安装过程中，若出现编译错误，通常是由于依赖包未满足，需要在安装依赖包后重新执行该命令。\n\n### 更新数据库\n\n在安装 Python 或者其他带有可执行文件的模块之后，需要对数据库进行更新：\n\n```\n$ pyenv rehash\n```\n\n### 查看当前已安装的 python 版本\n\n```\n$ pyenv versions\n* system (set by /home/seisman/.pyenv/version)\nanaconda3-4.1.0\n```\n\n其中的星号表示当前正在使用的是系统自带的 python。\n\n### 设置全局的 python 版本\n\n```\n$ pyenv global 3.6.3\n$ pyenv versions\n  system\n* 3.6.3 (set by PYENV_VERSION environment variable)\n```\n当前全局的 python 版本已经变成了 3.6.3。不过日常使用推荐使用 `pyenv local` 或 `pyenv shell`临时改变 python 版本。\n\n### 确认 python 版本\n\n```\n$ python\nPython 3.6.3 (default, Oct 23 2017, 12:15:23)\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-17)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information\n>>>\n```\n\n## 使用 python\n\n*   输入 `python` 即可使用新版本的 python；\n*   系统自带的脚本会以 `/usr/bin/python` 的方式直接调用老版本的 python，因而不会对系统脚本产生影响；\n*   使用 `pip` 安装第三方模块时会自动按照到当前的python版本下，不会和系统模块发生冲突。\n*   使用 `pip` 安装模块后，可能需要执行 `pyenv rehash` 更新数据库；\n\n## pyenv 其他功能\n\n1.  `pyenv uninstall` 卸载某个版本\n2.  `pyenv update` 更新 pyenv 及其插件\n\n## 参考\n\n1.  [https://github.com/yyuu/pyenv](https://github.com/yyuu/pyenv)\n\n\n\n","source":"_posts/python-versions-pyenv.md","raw":"---\ntitle: Python 多版本管理之 pyenv\ndate: 2017-10-23 14:22:32\ncategories: Python\ntags: \n - Python\npermalink: python-versions-pyenv\n---\n## 序\n\n经常遇到这样的情况：\n\n*   系统自带的 Python 是 2.6，自己需要 Python 2.7 中的某些特性；\n*   系统自带的 Python 是 2.x，自己需要 Python 3.x；\n\n{% asset_img python-pyenv-logo.png [python-pyenv-logo] %}\n\n此时需要在系统中安装多个 Python，但又不能影响系统自带的 Python，即需要实现 Python 的多版本共存。[pyenv](https://github.com/yyuu/pyenv) 就是这样一个 Python 版本管理器。\n\n<!-- more -->\n\n## 安装 Pyenv\n\n在终端执行如下命令以安装 pyenv 及其插件：\n\n```\n$ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\n```\n安装完成后，根据提示将如下语句加入到 `~/.bashrc` 中:\n\n```\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"   # 这句可以不加\n```\n然后重启终端即可。\n\n## 安装 Python\n\n```\n$ pyenv install --list\n```\n该命令会列出可以用 pyenv 安装的 Python 版本。列表很长，仅列举其中几个:\n\n```\n2.7.8   # Python 2 最新版本\n3.6.3   # Python 3 最新版本\nanaconda2-4.1.0  # 支持 Python 2.6 和 2.7\nanaconda3-4.1.0  # 支持 Python 3.3 和 3.4\n```\n其中 2.7.8 和 3.6.3 这种只有版本号的是 Python 官方版本，其他的形如 `anaconda2-4.1.0` 这种既有名称又有版本后的属于 “衍生版” 或发行版。\n\n### 安装 Python 的依赖包\n\n在编译 Python 过程中会依赖一些其他库文件，因而需要首先安装这些库文件，已知的一些需要预先安装的库如下。\n\n**在 CentOS/RHEL/Fedora 下:**\n\n```\nsudo yum install readline readline-devel readline-static\nsudo yum install openssl openssl-devel openssl-static\nsudo yum install sqlite-devel\nsudo yum install bzip2-devel bzip2-libs\n```\n\n**在 Ubuntu下：**\n\n```\nsudo apt-get update\nsudo apt-get install make build-essential libssl-dev zlib1g-dev\nsudo apt-get install libbz2-dev libreadline-dev libsqlite3-dev wget curl\nsudo apt-get install llvm libncurses5-dev libncursesw5-dev\n```\n### 安装指定版本\n\n用户可以使用 `pyenv install` 安装指定版本的 python。\n\n```\npyenv install 3.6.3\n## ... 安装信息\n```\n安装过程中，若出现编译错误，通常是由于依赖包未满足，需要在安装依赖包后重新执行该命令。\n\n### 更新数据库\n\n在安装 Python 或者其他带有可执行文件的模块之后，需要对数据库进行更新：\n\n```\n$ pyenv rehash\n```\n\n### 查看当前已安装的 python 版本\n\n```\n$ pyenv versions\n* system (set by /home/seisman/.pyenv/version)\nanaconda3-4.1.0\n```\n\n其中的星号表示当前正在使用的是系统自带的 python。\n\n### 设置全局的 python 版本\n\n```\n$ pyenv global 3.6.3\n$ pyenv versions\n  system\n* 3.6.3 (set by PYENV_VERSION environment variable)\n```\n当前全局的 python 版本已经变成了 3.6.3。不过日常使用推荐使用 `pyenv local` 或 `pyenv shell`临时改变 python 版本。\n\n### 确认 python 版本\n\n```\n$ python\nPython 3.6.3 (default, Oct 23 2017, 12:15:23)\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-17)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information\n>>>\n```\n\n## 使用 python\n\n*   输入 `python` 即可使用新版本的 python；\n*   系统自带的脚本会以 `/usr/bin/python` 的方式直接调用老版本的 python，因而不会对系统脚本产生影响；\n*   使用 `pip` 安装第三方模块时会自动按照到当前的python版本下，不会和系统模块发生冲突。\n*   使用 `pip` 安装模块后，可能需要执行 `pyenv rehash` 更新数据库；\n\n## pyenv 其他功能\n\n1.  `pyenv uninstall` 卸载某个版本\n2.  `pyenv update` 更新 pyenv 及其插件\n\n## 参考\n\n1.  [https://github.com/yyuu/pyenv](https://github.com/yyuu/pyenv)\n\n\n\n","slug":"python-versions-pyenv","published":1,"updated":"2017-10-23T06:43:00.000Z","_id":"cj93te727000atoz68jp2wj4n","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>经常遇到这样的情况：</p>\n<ul>\n<li>系统自带的 Python 是 2.6，自己需要 Python 2.7 中的某些特性；</li>\n<li>系统自带的 Python 是 2.x，自己需要 Python 3.x；</li>\n</ul>\n<img src=\"/blog/2017/10/23/python-versions-pyenv/python-pyenv-logo.png\" alt=\"[python-pyenv-logo]\" title=\"[python-pyenv-logo]\">\n<p>此时需要在系统中安装多个 Python，但又不能影响系统自带的 Python，即需要实现 Python 的多版本共存。<a href=\"https://github.com/yyuu/pyenv\" target=\"_blank\" rel=\"external\">pyenv</a> 就是这样一个 Python 版本管理器。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装-Pyenv\"><a href=\"#安装-Pyenv\" class=\"headerlink\" title=\"安装 Pyenv\"></a>安装 Pyenv</h2><p>在终端执行如下命令以安装 pyenv 及其插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</div></pre></td></tr></table></figure>\n<p>安装完成后，根据提示将如下语句加入到 <code>~/.bashrc</code> 中:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PYENV_ROOT=&quot;$HOME/.pyenv&quot;</div><div class=\"line\">export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;</div><div class=\"line\">eval &quot;$(pyenv init -)&quot;</div><div class=\"line\">eval &quot;$(pyenv virtualenv-init -)&quot;   # 这句可以不加</div></pre></td></tr></table></figure>\n<p>然后重启终端即可。</p>\n<h2 id=\"安装-Python\"><a href=\"#安装-Python\" class=\"headerlink\" title=\"安装 Python\"></a>安装 Python</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv install --list</div></pre></td></tr></table></figure>\n<p>该命令会列出可以用 pyenv 安装的 Python 版本。列表很长，仅列举其中几个:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2.7.8   # Python 2 最新版本</div><div class=\"line\">3.6.3   # Python 3 最新版本</div><div class=\"line\">anaconda2-4.1.0  # 支持 Python 2.6 和 2.7</div><div class=\"line\">anaconda3-4.1.0  # 支持 Python 3.3 和 3.4</div></pre></td></tr></table></figure>\n<p>其中 2.7.8 和 3.6.3 这种只有版本号的是 Python 官方版本，其他的形如 <code>anaconda2-4.1.0</code> 这种既有名称又有版本后的属于 “衍生版” 或发行版。</p>\n<h3 id=\"安装-Python-的依赖包\"><a href=\"#安装-Python-的依赖包\" class=\"headerlink\" title=\"安装 Python 的依赖包\"></a>安装 Python 的依赖包</h3><p>在编译 Python 过程中会依赖一些其他库文件，因而需要首先安装这些库文件，已知的一些需要预先安装的库如下。</p>\n<p><strong>在 CentOS/RHEL/Fedora 下:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install readline readline-devel readline-static</div><div class=\"line\">sudo yum install openssl openssl-devel openssl-static</div><div class=\"line\">sudo yum install sqlite-devel</div><div class=\"line\">sudo yum install bzip2-devel bzip2-libs</div></pre></td></tr></table></figure>\n<p><strong>在 Ubuntu下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install make build-essential libssl-dev zlib1g-dev</div><div class=\"line\">sudo apt-get install libbz2-dev libreadline-dev libsqlite3-dev wget curl</div><div class=\"line\">sudo apt-get install llvm libncurses5-dev libncursesw5-dev</div></pre></td></tr></table></figure>\n<h3 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h3><p>用户可以使用 <code>pyenv install</code> 安装指定版本的 python。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyenv install 3.6.3</div><div class=\"line\">## ... 安装信息</div></pre></td></tr></table></figure>\n<p>安装过程中，若出现编译错误，通常是由于依赖包未满足，需要在安装依赖包后重新执行该命令。</p>\n<h3 id=\"更新数据库\"><a href=\"#更新数据库\" class=\"headerlink\" title=\"更新数据库\"></a>更新数据库</h3><p>在安装 Python 或者其他带有可执行文件的模块之后，需要对数据库进行更新：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv rehash</div></pre></td></tr></table></figure>\n<h3 id=\"查看当前已安装的-python-版本\"><a href=\"#查看当前已安装的-python-版本\" class=\"headerlink\" title=\"查看当前已安装的 python 版本\"></a>查看当前已安装的 python 版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv versions</div><div class=\"line\">* system (set by /home/seisman/.pyenv/version)</div><div class=\"line\">anaconda3-4.1.0</div></pre></td></tr></table></figure>\n<p>其中的星号表示当前正在使用的是系统自带的 python。</p>\n<h3 id=\"设置全局的-python-版本\"><a href=\"#设置全局的-python-版本\" class=\"headerlink\" title=\"设置全局的 python 版本\"></a>设置全局的 python 版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv global 3.6.3</div><div class=\"line\">$ pyenv versions</div><div class=\"line\">  system</div><div class=\"line\">* 3.6.3 (set by PYENV_VERSION environment variable)</div></pre></td></tr></table></figure>\n<p>当前全局的 python 版本已经变成了 3.6.3。不过日常使用推荐使用 <code>pyenv local</code> 或 <code>pyenv shell</code>临时改变 python 版本。</p>\n<h3 id=\"确认-python-版本\"><a href=\"#确认-python-版本\" class=\"headerlink\" title=\"确认 python 版本\"></a>确认 python 版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python</div><div class=\"line\">Python 3.6.3 (default, Oct 23 2017, 12:15:23)</div><div class=\"line\">[GCC 4.4.7 20120313 (Red Hat 4.4.7-17)] on linux</div><div class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information</div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"使用-python\"><a href=\"#使用-python\" class=\"headerlink\" title=\"使用 python\"></a>使用 python</h2><ul>\n<li>输入 <code>python</code> 即可使用新版本的 python；</li>\n<li>系统自带的脚本会以 <code>/usr/bin/python</code> 的方式直接调用老版本的 python，因而不会对系统脚本产生影响；</li>\n<li>使用 <code>pip</code> 安装第三方模块时会自动按照到当前的python版本下，不会和系统模块发生冲突。</li>\n<li>使用 <code>pip</code> 安装模块后，可能需要执行 <code>pyenv rehash</code> 更新数据库；</li>\n</ul>\n<h2 id=\"pyenv-其他功能\"><a href=\"#pyenv-其他功能\" class=\"headerlink\" title=\"pyenv 其他功能\"></a>pyenv 其他功能</h2><ol>\n<li><code>pyenv uninstall</code> 卸载某个版本</li>\n<li><code>pyenv update</code> 更新 pyenv 及其插件</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://github.com/yyuu/pyenv\" target=\"_blank\" rel=\"external\">https://github.com/yyuu/pyenv</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>经常遇到这样的情况：</p>\n<ul>\n<li>系统自带的 Python 是 2.6，自己需要 Python 2.7 中的某些特性；</li>\n<li>系统自带的 Python 是 2.x，自己需要 Python 3.x；</li>\n</ul>\n<img src=\"/blog/2017/10/23/python-versions-pyenv/python-pyenv-logo.png\" alt=\"[python-pyenv-logo]\" title=\"[python-pyenv-logo]\">\n<p>此时需要在系统中安装多个 Python，但又不能影响系统自带的 Python，即需要实现 Python 的多版本共存。<a href=\"https://github.com/yyuu/pyenv\" target=\"_blank\" rel=\"external\">pyenv</a> 就是这样一个 Python 版本管理器。</p>","more":"<h2 id=\"安装-Pyenv\"><a href=\"#安装-Pyenv\" class=\"headerlink\" title=\"安装 Pyenv\"></a>安装 Pyenv</h2><p>在终端执行如下命令以安装 pyenv 及其插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</div></pre></td></tr></table></figure>\n<p>安装完成后，根据提示将如下语句加入到 <code>~/.bashrc</code> 中:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PYENV_ROOT=&quot;$HOME/.pyenv&quot;</div><div class=\"line\">export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;</div><div class=\"line\">eval &quot;$(pyenv init -)&quot;</div><div class=\"line\">eval &quot;$(pyenv virtualenv-init -)&quot;   # 这句可以不加</div></pre></td></tr></table></figure>\n<p>然后重启终端即可。</p>\n<h2 id=\"安装-Python\"><a href=\"#安装-Python\" class=\"headerlink\" title=\"安装 Python\"></a>安装 Python</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv install --list</div></pre></td></tr></table></figure>\n<p>该命令会列出可以用 pyenv 安装的 Python 版本。列表很长，仅列举其中几个:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2.7.8   # Python 2 最新版本</div><div class=\"line\">3.6.3   # Python 3 最新版本</div><div class=\"line\">anaconda2-4.1.0  # 支持 Python 2.6 和 2.7</div><div class=\"line\">anaconda3-4.1.0  # 支持 Python 3.3 和 3.4</div></pre></td></tr></table></figure>\n<p>其中 2.7.8 和 3.6.3 这种只有版本号的是 Python 官方版本，其他的形如 <code>anaconda2-4.1.0</code> 这种既有名称又有版本后的属于 “衍生版” 或发行版。</p>\n<h3 id=\"安装-Python-的依赖包\"><a href=\"#安装-Python-的依赖包\" class=\"headerlink\" title=\"安装 Python 的依赖包\"></a>安装 Python 的依赖包</h3><p>在编译 Python 过程中会依赖一些其他库文件，因而需要首先安装这些库文件，已知的一些需要预先安装的库如下。</p>\n<p><strong>在 CentOS/RHEL/Fedora 下:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install readline readline-devel readline-static</div><div class=\"line\">sudo yum install openssl openssl-devel openssl-static</div><div class=\"line\">sudo yum install sqlite-devel</div><div class=\"line\">sudo yum install bzip2-devel bzip2-libs</div></pre></td></tr></table></figure>\n<p><strong>在 Ubuntu下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install make build-essential libssl-dev zlib1g-dev</div><div class=\"line\">sudo apt-get install libbz2-dev libreadline-dev libsqlite3-dev wget curl</div><div class=\"line\">sudo apt-get install llvm libncurses5-dev libncursesw5-dev</div></pre></td></tr></table></figure>\n<h3 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h3><p>用户可以使用 <code>pyenv install</code> 安装指定版本的 python。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyenv install 3.6.3</div><div class=\"line\">## ... 安装信息</div></pre></td></tr></table></figure>\n<p>安装过程中，若出现编译错误，通常是由于依赖包未满足，需要在安装依赖包后重新执行该命令。</p>\n<h3 id=\"更新数据库\"><a href=\"#更新数据库\" class=\"headerlink\" title=\"更新数据库\"></a>更新数据库</h3><p>在安装 Python 或者其他带有可执行文件的模块之后，需要对数据库进行更新：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv rehash</div></pre></td></tr></table></figure>\n<h3 id=\"查看当前已安装的-python-版本\"><a href=\"#查看当前已安装的-python-版本\" class=\"headerlink\" title=\"查看当前已安装的 python 版本\"></a>查看当前已安装的 python 版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv versions</div><div class=\"line\">* system (set by /home/seisman/.pyenv/version)</div><div class=\"line\">anaconda3-4.1.0</div></pre></td></tr></table></figure>\n<p>其中的星号表示当前正在使用的是系统自带的 python。</p>\n<h3 id=\"设置全局的-python-版本\"><a href=\"#设置全局的-python-版本\" class=\"headerlink\" title=\"设置全局的 python 版本\"></a>设置全局的 python 版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv global 3.6.3</div><div class=\"line\">$ pyenv versions</div><div class=\"line\">  system</div><div class=\"line\">* 3.6.3 (set by PYENV_VERSION environment variable)</div></pre></td></tr></table></figure>\n<p>当前全局的 python 版本已经变成了 3.6.3。不过日常使用推荐使用 <code>pyenv local</code> 或 <code>pyenv shell</code>临时改变 python 版本。</p>\n<h3 id=\"确认-python-版本\"><a href=\"#确认-python-版本\" class=\"headerlink\" title=\"确认 python 版本\"></a>确认 python 版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python</div><div class=\"line\">Python 3.6.3 (default, Oct 23 2017, 12:15:23)</div><div class=\"line\">[GCC 4.4.7 20120313 (Red Hat 4.4.7-17)] on linux</div><div class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information</div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"使用-python\"><a href=\"#使用-python\" class=\"headerlink\" title=\"使用 python\"></a>使用 python</h2><ul>\n<li>输入 <code>python</code> 即可使用新版本的 python；</li>\n<li>系统自带的脚本会以 <code>/usr/bin/python</code> 的方式直接调用老版本的 python，因而不会对系统脚本产生影响；</li>\n<li>使用 <code>pip</code> 安装第三方模块时会自动按照到当前的python版本下，不会和系统模块发生冲突。</li>\n<li>使用 <code>pip</code> 安装模块后，可能需要执行 <code>pyenv rehash</code> 更新数据库；</li>\n</ul>\n<h2 id=\"pyenv-其他功能\"><a href=\"#pyenv-其他功能\" class=\"headerlink\" title=\"pyenv 其他功能\"></a>pyenv 其他功能</h2><ol>\n<li><code>pyenv uninstall</code> 卸载某个版本</li>\n<li><code>pyenv update</code> 更新 pyenv 及其插件</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://github.com/yyuu/pyenv\" target=\"_blank\" rel=\"external\">https://github.com/yyuu/pyenv</a></li>\n</ol>"},{"title":"关键业务系统的JVM参数使用推荐(转载)","date":"2016-11-01T05:11:10.000Z","_content":"\n> 在关键的业务系统里，除了继续追求技术人员最爱的高吞吐与低延时之外，系统的稳定性与出现问题时排查的便捷性也很重要。\n> \n>这是本文的一个原则，后面也会一次又一次的强调，所以与网上其他的文章略有不同，请调优高手和运维老大们多指引。\n\n## 前言1：资料\n\n学习开源项目的启动脚本是个不错的主意，比如[Cassandra](http://github.com/apache/cassandra/blob/trunk/conf/jvm.options)家的， 附送一篇[解释它的文章](http://tobert.github.io/pages/als-cassandra-21-tuning-guide.html)。\n\n[JVM调优的\"标准参数\"的各种陷阱 R大的文章](http://hllvm.group.iteye.com/group/topic/27945)，在JDK6时写的，期待更新。\n偶然翻到`Linkedin`工程师的[一篇文章](http://www.importnew.com/11336.html)。\n更偶然翻到的[一份不错的参数列表](http://www.techpaste.com/2012/02/java-command-line-options-jvm-performance-improvement/)。\n并发编程网上的[JVM实用参数系列](http://ifeve.com/useful-jvm-flags/)\n\n<!-- more -->\n\n## 前言2：打印参数值\n```\n-XX:+PrintFlagsFinal\n```\n当你在网上兴冲冲找到一个可优化的参数时，先用`-XX: +PrintFlagsFinal`看看，它可能已经默认打开了，再找到一个，还是默认打开了...\n\nJDK7与JDK8，甚至JDK7中的不同版本，有些参数值都不一样，所以不要轻信网上任何文章，一切以生产环境同版本的JDK打出来的为准。\n\n经常以类似下面的语句去查看参数，偷懒不起应用，用`-version`代替。有些参数设置后会影响其他参数，所以查看时也把它带上。\n\n```shell\njava -server -Xmx1024m -Xms1024m -XX:+UseConcMarkSweepGC -XX:+PrintFlagsFinal -version| grep ParallelGCThreads\n```\n\n## 前言3：关于默认值\n\nJDK8会默认打开`-XX:+TieredCompilation`多层编译，而JDK7则不会。JDK7u40以后的版本会默认打开`-XX:+OptimizeStringConcat`优化字符串拼接，而之前的则不打开。\n\n对于这些参数，我的建议是顺势而为，JDK在那个版本默认打开不打开总有它的理由。安全第一，没有很好的因由，不要随便因为网上某篇文章的推荐(包括你现在在读的这篇)就去设置。\n\n## 性能篇\n\n> 先写一些不那么常见的，后面再来老生常谈。\n\n### 取消偏向锁\n```\n-XX:-UseBiasedLocking\n```\n\nJDK1.6开始默认打开的偏向锁，会尝试把锁赋给第一个访问它的线程，取消同步块上的synchronized原语。如果始终只有一条线程在访问它，就成功略过同步操作以获得性能提升。\n\n但一旦有第二条线程访问这把锁，JVM就要撤销偏向锁恢复到未锁定线程的状态，详见[JVM的`Stop The World`，安全点，黑暗的地底世界](http://calvin1978.blogcn.com/articles/safepoint.html)， 可以看到不少`RevokeBiasd `的纪录，像GC一样，会`Stop The World`的干活，虽然只是很短很短的停顿，但对于多线程并发的应用，取消掉它反而有性能的提升和延时的极微的缩短，所以`Cassandra `就取消了它。\n\n### Int和Long自动装箱\n```\n-XX:AutoBoxCacheMax=20000\n```\n`Integer i = 3;`这语句有着 int自动装箱成Integer的过程，JDK默认只缓存 -128 ~ +127的int 和 long，超出范围的数字就要即时构建新的Integer对象。设为20000后，我们应用的QPS从48,000提升到50,000，足足4%的影响。[详见Java Integer(-128~127)值的==和equals比较产生的思考](http://blog.csdn.net/chengzhezhijian/article/details/9628251)\n \n\n### 启动时访问并置零内存页面\n```\n-XX:+AlwaysPreTouch\n```\n启动时就把参数里说好了的内存全部舔一遍，可能令得启动时慢上一点，但后面访问时会更流畅，比如页面会连续分配，比如不会在晋升新生代到老生代时才去访问页面使得GC停顿时间加长。不过这选项对大堆才会更有感觉一点。\n \n\n### 禁止JVM写statistics数据\n```\n-XX:+PerfDisableSharedMem\n```\nCassandra家的一个参数，一直没留意，直到发生高IO时的JVM停顿。原来JVM经常会默默的在/tmp/hperf 目录写上一点`statistics`数据，如果刚好遇到`PageCache`刷盘，把文件阻塞了，就不能结束这个`Stop the World`的安全点了。用此参数可以禁止JVM写`statistics`数据，代价是jps, jstat 用不了，只能用JMX取数据。有时用JMX取新生代老生代使用百分比还真没jstat方便。[详见The Four Month Bug: JVM statistics cause garbage collection pauses](http://www.evanjones.ca/jvm-mmap-pause.html)\n\n### 使用SHA1算法\n```\n-Djava.security.egd=file:/dev/./urandom\n```\n此江湖偏方原用于Tomcat显式使用SHA1PRNG算法时，初始因子从`/dev/random`读取导致堵塞。而使用此设置后，额外效果是默认的`SecureRandom`算法也变成`SHA1`了。 `SHA1PRNG`比`NativePRNG`消耗小一半，`synchronized`的代码少一半，所以没特殊安全要求的话建议用SHA1。详见[SecureRandom的江湖偏方与真实效果](SecureRandom的江湖偏方与真实效果)\n\n### 不建议的参数\n\n1. `-XX:+AggressiveOpts`是一些还没默认打开的优化参数集合, `-XX:AutoBoxCacheMax`是其中的一项。但如前所述，关键系统里不建议打开。虽然通过`-XX:+AggressiveOpts`与`-XX:-AggressiveOpts`的对比，目前才改变了三个参数，但为免以后某个版本的JDK里默默改变更多激进的配置，还是不要了。\n\n2. Linkined那种黑科技，先要解锁`VMOptions`才能配置的就更不用说了，比如\n```\n\t-XX:+UnlockDiagnosticVMOptions -XX: ParGCCardsPerStrideChunk=32768\n```\n\n3. `JIT Compile`相关的参数，函数调用多少次之后开始编译的阀值，内联函数大小的阀值等等，不要乱改了。\n\n4. `-XX:+UseFastAccessorMethods`，JDK6的优化，据说在多层编译下还慢了，所以是默认关闭的。\n\n5. `-server`，在64位linux中，你想设成`-client`都不行的，所以写了也是白写。\n \n### 可选参数\n\n1. `-Djava.awt.headless=true`，如果服务器上没有屏幕，键盘，鼠标，又需要用到它们的时候，详见[在Java SE 平台上使用`Headless`模式](http://www.oschina.net/translate/using-headless-mode-in-java-se)\n\n2. `-XX:-UseCounterDecay`，禁止JIT调用计数器衰减。默认情况下，每次GC时会对调用计数器进行砍半的操作，导致有些方法一直是个温热，可能永远都达不到C2编译的1万次的阀值。\n\n3. `-XX:-TieredCompilation`，禁止JDK8默认的多层编译，在某些情况下因为有些方法C1编译后C2不再编译，多层编译反而比C2编译慢，如果发现此情况可进行禁止。\n\n## GC篇\n### GC策略\n为了稳健，还是8G以下的堆还是CMS好了，G1的细节实现起来难度太大，从理论提出到现在都做了六七年了。\n\nCMS真正可设的东西也不多，详见[JVM实用参数（七）CMS收集器](http://ifeve.com/useful-jvm-flags-part-7-cms-collector/)\n\n1. 基本配置\n```\n-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly\n```\n\t因为我们的监控系统会通过JMX监控内存达到90%的状况（留点处理的时间），所以设置让它75%就开始跑了，早点开始也能避免Full GC等意外情况(概念重申，这种主动的`CMS GC`，和JVM的老生代、永久代、堆外内存完全不能分配内存了而强制`Full GC`是不同的概念)。为了让这个设置生效，还要设置`-XX:+UseCMSInitiatingOccupancyOnly`，否则75只被用来做开始的参考值，后面还是JVM自己算。\n\n2. `-XX:MaxTenuringThreshold=2`，这是GC里改动效果最明显的一个参数了。对象在Survivor区熬过多少次Young GC后晋升到年老代，JDK7里看起来默认是6，跑起来好像变成了15。\n\n\tYoung GC是最大的应用停顿来源，而新生代里GC后存活对象的多少又直接影响停顿的时间，所以如果清楚Young GC的执行频率和应用里大部分临时对象的最长生命周期，可以把它设的更短一点，让其实不是临时对象的新生代长期对象赶紧晋升到年老代，别呆着。\n\n\t用`-XX:+PrintTenuringDistribution`观察下，如果后面几代都差不多，就可以设小，比如JMeter里是2。而我们的两个系统里一个设了2，一个设了6。\n\n3. `-XX:+ExplicitGCInvokesConcurrent`， 但不要`-XX:+DisableExplicitGC`， 比如[Netty之堆外内存扫盲篇](http://calvin1978.blogcn.com/articles/directbytebuffer.html)，可见禁了`system.gc()`未必是好事，只要自己的代码里没有调它，也没用什么特别烂的类库，真有人调了总有调的原因。`-XX+ExplicitGCInvokesConcurrent`则在`full gc`时，并不全程停顿，依然只在ygc和两个remark阶段停顿，详见[JVM源码分析之SystemGC完全解读](http://lovestblog.cn/blog/2015/05/07/system-gc/)\n\n4. `-XX: ParallelRefProcEnabled`, 默认为`false`，并行的处理`Reference`对象，如`WeakReference`，除非在`GC log`里出现`Reference`处理时间较长的日志，否则效果不会很明显，但我们总是要JVM尽量的并行，所以设了也就设了。\n\n### GC里不建议设的参数\n\n1. `-XX:+CMSClassUnloadingEnabled`，在CMS中清理永久代中的过期的Class而不等到`Full GC`，JDK7默认关闭而JDK8打开。看自己情况，比如有没有运行动态语言脚本如Groovy产生大量的临时类。它会增加`CMS remark`的暂停时间，所以如果新类加载并不频繁，这个参数还是不开的好。\n\n2. 用了CMS，新生代收集默认就是`-XX:+UseParNewGC`，不用自己设。\n\n3. 并发收集线程数\n```\nParallelGCThreads＝8+( Processor - 8 ) ( 5/8 )，\nConcGCThreads = (ParallelGCThreads + 3)/4\n```\n\t比如双CPU，六核，超线程就是24个处理器，小于8个处理器时`ParallelGCThreads`按处理器数量，大于时按上述公式`ParallelGCThreads＝18`， `ConcGCThreads＝5`。除了一些不在乎停顿时间的后台辅助程序会特意把它减少，平时不建议动。\n\t\n4. `-XX:+CMSScavengeBeforeRemark`，默认为关闭，在CMS remark前，先执行一次minor GC将新生代清掉，这样从老生代的对象引用到的新生代对象的个数就少了，停止全世界的CMS remark阶段就短一些。如果看到GC日志里remark阶段的时间超长，可以打开此项看看有没有效果，否则还是不要打开了，白白多了次`YGC`。\n\n5. `-XX:CMSFullGCsBeforeCompaction`，默认为0，即每次full gc都对老生代进行碎片整理压缩。Full GC 不同于 前面设置的75%老生代时触发`CMS GC`，只在`System.gc()`，老生代达到100%，老生代碎片过大无法分配空间给新晋升的大对象这些特殊情况里发生，所以设为每次都进行碎片整理是合适的，详见[此贴里R大的解释](http://hllvm.group.iteye.com/group/topic/28854)。\n\n### 内存大小的设置\n> 这些关于大小的参数，给人感觉是最踏实可控的。\n\n> 其实JVM除了显式设置的-Xmx堆内存，还有一堆其他占内存的地方(堆外内存，线程栈，永久代，二进制代码cache)，在容量规划的时候要留意。\n\n> 关键业务系统的服务器上内存一般都是够的，所以尽管设得宽松点。\n\n1. `-Xmx, -Xms`, 堆内存大小，2～4G均可，再大了注意GC时间。\n\n2. `-Xmn or -XX:NewSize and -XX:MaxNewSize or -XX:NewRatio`，JDK默认新生代占堆大小的1/3， 个人喜欢把对半分， 增大新生代的大小，能减少GC的频率（但也会加大每次GC的停顿时间），主要是看老生代里没多少长期对象的话，占2/3太多了。可以用-Xmn 直接赋值(等于`-XX:NewSize and -XX:MaxNewSize`同值的缩写)，或把NewRatio设为1来对半分(但如果想设置新生代比老生代大就只能用-Xmn)。\n\n3. `-XX: PermSize=128m -XX:MaxPermSize=512m(JDK7)`现在的应用有Hibernate/Spring这些闹腾的家伙AOP之后类都比较多，可以一开始就把初始值从64M设到128M，并设一个更大的Max值以求保险。\n\n4. `-XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m（JDK8）`，JDK8的永生代几乎可用完机器的所有内存，同样设一个128M的初始值，512M的最大值保护一下。\n\n### 其他内存大小等可选设置\n\n1. `-XX:SurvivorRatio`新生代中每个存活区的大小，默认为8，即1/10的新生代`1/(SurvivorRatio+2)`，有人喜欢设小点省点给新生代，但要避免太小使得存活区放不下临时对象而要晋升到老生代，还是从GC Log里看实际情况了。\n\n2. `-Xss`在堆之外，线程占用栈内存，默认每条线程为1M（以前是256K）。存放方法调用出参入参的栈，局部变量，标量替换后掉局部变量等，有人喜欢设小点节约内存开更多线程。但反正内存够也就不必要设小，有人喜欢再设大点，特别是有JSON解析之类的递归调用时不能设太小。\n\n3. `-XX:MaxDirectMemorySize`，堆外内存/直接内存的大小，默认为Heap区总内存减去一个Survivor区的大小，详见[Netty之堆外内存扫盲篇](http://calvin1978.blogcn.com/articles/directbytebuffer.html)。\n\n4. `-XX:ReservedCodeCacheSize`， JIT编译后二进制代码的存放区，满了之后就不再编译。JDK7默认不开多层编译48M，开了96M，而JDK8默认开多层编译240M。可以在JMX里看看`CodeCache`的大小，JDK7下的48M一般够了，也可以把它设大点，反正内存多。\n\n### GC日志\n\n1. 基本配置\n```\n-Xloggc:/dev/shm/gc-myapplication.log -XX:+PrintGCDateStamps -XX:+PrintGCDetails\n```\n\t详见[JVM实用参数（八）GC日志](http://ifeve.com/useful-jvm-flags-part-8-gc-logging/)，有人担心写GC日志会影响性能，但测试下来实在没什么影响，还是留一份用来排查好。\n\n\t到后来，又发现如果遇上高IO的情况，如果GC的时候，操作系统正在flush pageCache 到磁盘，也可能导致GC log文件被锁住，从而让GC结束不了。所以把它指向了/dev/shm 这种内存中文件系统，避免这种停顿，详见[Eliminating Large JVM GC Pauses Caused by Background IO Traffic](http://calvin1978.blogcn.com/articles/%E2%80%9Chttp://engineering.linkedin.com/blog/2016/02/eliminating-large-jvm-gc-pauses-caused-by-background-io-traffic%E2%80%9D)\n\n\t用+PrintGCDateStamps而不是PrintGCTimeStamps，打印可读的日期而不是时间戳。\n\n2. -XX:+PrintGCApplicationStoppedTime它的名字没起好，它除了打印清晰的GC停顿时间外，还可以打印其他的停顿时间，比如取消偏向锁，class 被agent redefine，code deoptimization等等，有助于发现一些原来没想到的问题，建议也加上。如果真的发现了一些不知什么的停顿，再临时加上\"-XX:+PrintSafepointStatistics -XX: PrintSafepointStatisticsCount=1\" 找原因。\n\n3. GC日志默认会在重启后清空，但有人担心长期运行不重启的应用会把文件弄得很大，有\"-XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=1M\"的参数可以让日志滚动起来。但重启后的文件名太混乱太让人头痛，所以还是不加。\n\n## 监控篇\n\n> JVM输出的各种日志，如果未指定路径，通常会生成到运行应用的相同目录，为了避免有时候在不同的地方执行启动脚本，一般将日志路径集中设到一个固定的地方。\n\n### -XX:+PrintCommandLineFlags\n运维有时会对启动参数做一些临时的更改，将每次启动的参数输出到stdout，将来有据可查。\n打印出来的是命令行里设置了的参数以及因为这些参数隐式影响的参数，比如开了CMS后，-XX:+UseParNewGC也被自动打开。\n\n### -XX:-OmitStackTraceInFastThrow\n为异常设置`StackTrace `是个昂贵的操作，所以当应用在相同地方抛出相同的异常N次(两万?)之后，JVM会对某些特定异常如NPE，数组越界等进行优化，不再带上异常栈。此时，你可能会看到日志里一条条`Nul Point Exception`，而真正输出完整栈的日志早被滚动到不知哪里去了，也就完全不知道这NPE发生在什么地方，欲哭无泪。 所以，将它禁止吧。\n \n### coredump与 -XX:ErrorFile\nJVM crash时，hotspot 会生成一个error文件，提供JVM状态信息的细节。如前所述，将其输出到固定目录，避免到时会到处找这文件。文件名中的%p会被自动替换为应用的PID\n\n```\n-XX:ErrorFile=${MYLOGDIR}/hs_err_%p.log\n```\n当然，更好的做法是生成coredump，从CoreDump能够转出Heap Dump 和 Thread Dump 还有crash的地方，非常实用。\n\n在启动脚本里加上`ulimit -c unlimited`或其他的设置方式，如果有root权限，设一下输出目录更好\n\n```\necho \"/{MYLOGDIR}/coredump.%p\" > /proc/sys/kernel/core_pattern\n```\n什么？你不知道这coredump有什么用？看来你是没遇过JVM Segment Fault的幸福人。\n \n### -XX:+HeapDumpOnOutOfMemoryError\n在`Out Of Memory`，JVM快死快死掉的时候，输出Heap Dump到指定文件。不然开发很多时候还真不知道怎么重现错误。\n\n路径只指向目录，JVM会保持文件名的唯一性，叫`java_pid${pid}.hprof`。如果指向文件，而文件已存在，反而不能写入。\n\n```\n-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${LOGDIR}/\n```\n\n### JMX\n```\nDcom.sun.management.jmxremote.port=${MY_JMX_PORT} -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1\n```\n以上设置，只让本地的Zabbix之类监控软件通过JMX监控JVM，不允许远程访问。\n\n## 小结\n\n### 性能相关\n```\n-XX:-UseBiasedLocking -XX:-UseCounterDecay -XX:AutoBoxCacheMax=20000 -XX:+PerfDisableSharedMem -XX:+AlwaysPreTouch -Djava.security.egd=file:/dev/./urandom\n```\n### 内存大小相关(JDK7)\n```\n-Xms4096m -Xmx4096m -Xmn2048m -XX:MaxDirectMemorySize=4096m-XX: PermSize=256m -XX:MaxPermSize=512m -XX:ReservedCodeCacheSize=240M\n```\n### CMS GC 相关\n```\n-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:MaxTenuringThreshold=6 -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled\n```\n### GC 日志 相关\n```\n-Xloggc:/dev/shm/app-gc.log -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCDateStamps -XX:+PrintGCDetails\n```\n### 异常 日志 相关\n```\n-XX:-OmitStackTraceInFastThrow -XX:ErrorFile=${LOGDIR}/hs_err_%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${LOGDIR}/\n```\n### JMX相关\n见3.5\n\n---\n转载自`江南白衣`的博客 [《关键业务系统的JVM参数推荐(2016热冬版)》](http://calvin1978.blogcn.com/articles/jvmoption-2.html)\n\n\n","source":"_posts/useful-jvm-experience.md","raw":"---\ntitle: 关键业务系统的JVM参数使用推荐(转载)\ndate: 2016-11-01 13:11:10\ncategories: JAVA\ntags: \n\t- JAVA\n\t- JVM\npermalink: useful-jvm-experience\n---\n\n> 在关键的业务系统里，除了继续追求技术人员最爱的高吞吐与低延时之外，系统的稳定性与出现问题时排查的便捷性也很重要。\n> \n>这是本文的一个原则，后面也会一次又一次的强调，所以与网上其他的文章略有不同，请调优高手和运维老大们多指引。\n\n## 前言1：资料\n\n学习开源项目的启动脚本是个不错的主意，比如[Cassandra](http://github.com/apache/cassandra/blob/trunk/conf/jvm.options)家的， 附送一篇[解释它的文章](http://tobert.github.io/pages/als-cassandra-21-tuning-guide.html)。\n\n[JVM调优的\"标准参数\"的各种陷阱 R大的文章](http://hllvm.group.iteye.com/group/topic/27945)，在JDK6时写的，期待更新。\n偶然翻到`Linkedin`工程师的[一篇文章](http://www.importnew.com/11336.html)。\n更偶然翻到的[一份不错的参数列表](http://www.techpaste.com/2012/02/java-command-line-options-jvm-performance-improvement/)。\n并发编程网上的[JVM实用参数系列](http://ifeve.com/useful-jvm-flags/)\n\n<!-- more -->\n\n## 前言2：打印参数值\n```\n-XX:+PrintFlagsFinal\n```\n当你在网上兴冲冲找到一个可优化的参数时，先用`-XX: +PrintFlagsFinal`看看，它可能已经默认打开了，再找到一个，还是默认打开了...\n\nJDK7与JDK8，甚至JDK7中的不同版本，有些参数值都不一样，所以不要轻信网上任何文章，一切以生产环境同版本的JDK打出来的为准。\n\n经常以类似下面的语句去查看参数，偷懒不起应用，用`-version`代替。有些参数设置后会影响其他参数，所以查看时也把它带上。\n\n```shell\njava -server -Xmx1024m -Xms1024m -XX:+UseConcMarkSweepGC -XX:+PrintFlagsFinal -version| grep ParallelGCThreads\n```\n\n## 前言3：关于默认值\n\nJDK8会默认打开`-XX:+TieredCompilation`多层编译，而JDK7则不会。JDK7u40以后的版本会默认打开`-XX:+OptimizeStringConcat`优化字符串拼接，而之前的则不打开。\n\n对于这些参数，我的建议是顺势而为，JDK在那个版本默认打开不打开总有它的理由。安全第一，没有很好的因由，不要随便因为网上某篇文章的推荐(包括你现在在读的这篇)就去设置。\n\n## 性能篇\n\n> 先写一些不那么常见的，后面再来老生常谈。\n\n### 取消偏向锁\n```\n-XX:-UseBiasedLocking\n```\n\nJDK1.6开始默认打开的偏向锁，会尝试把锁赋给第一个访问它的线程，取消同步块上的synchronized原语。如果始终只有一条线程在访问它，就成功略过同步操作以获得性能提升。\n\n但一旦有第二条线程访问这把锁，JVM就要撤销偏向锁恢复到未锁定线程的状态，详见[JVM的`Stop The World`，安全点，黑暗的地底世界](http://calvin1978.blogcn.com/articles/safepoint.html)， 可以看到不少`RevokeBiasd `的纪录，像GC一样，会`Stop The World`的干活，虽然只是很短很短的停顿，但对于多线程并发的应用，取消掉它反而有性能的提升和延时的极微的缩短，所以`Cassandra `就取消了它。\n\n### Int和Long自动装箱\n```\n-XX:AutoBoxCacheMax=20000\n```\n`Integer i = 3;`这语句有着 int自动装箱成Integer的过程，JDK默认只缓存 -128 ~ +127的int 和 long，超出范围的数字就要即时构建新的Integer对象。设为20000后，我们应用的QPS从48,000提升到50,000，足足4%的影响。[详见Java Integer(-128~127)值的==和equals比较产生的思考](http://blog.csdn.net/chengzhezhijian/article/details/9628251)\n \n\n### 启动时访问并置零内存页面\n```\n-XX:+AlwaysPreTouch\n```\n启动时就把参数里说好了的内存全部舔一遍，可能令得启动时慢上一点，但后面访问时会更流畅，比如页面会连续分配，比如不会在晋升新生代到老生代时才去访问页面使得GC停顿时间加长。不过这选项对大堆才会更有感觉一点。\n \n\n### 禁止JVM写statistics数据\n```\n-XX:+PerfDisableSharedMem\n```\nCassandra家的一个参数，一直没留意，直到发生高IO时的JVM停顿。原来JVM经常会默默的在/tmp/hperf 目录写上一点`statistics`数据，如果刚好遇到`PageCache`刷盘，把文件阻塞了，就不能结束这个`Stop the World`的安全点了。用此参数可以禁止JVM写`statistics`数据，代价是jps, jstat 用不了，只能用JMX取数据。有时用JMX取新生代老生代使用百分比还真没jstat方便。[详见The Four Month Bug: JVM statistics cause garbage collection pauses](http://www.evanjones.ca/jvm-mmap-pause.html)\n\n### 使用SHA1算法\n```\n-Djava.security.egd=file:/dev/./urandom\n```\n此江湖偏方原用于Tomcat显式使用SHA1PRNG算法时，初始因子从`/dev/random`读取导致堵塞。而使用此设置后，额外效果是默认的`SecureRandom`算法也变成`SHA1`了。 `SHA1PRNG`比`NativePRNG`消耗小一半，`synchronized`的代码少一半，所以没特殊安全要求的话建议用SHA1。详见[SecureRandom的江湖偏方与真实效果](SecureRandom的江湖偏方与真实效果)\n\n### 不建议的参数\n\n1. `-XX:+AggressiveOpts`是一些还没默认打开的优化参数集合, `-XX:AutoBoxCacheMax`是其中的一项。但如前所述，关键系统里不建议打开。虽然通过`-XX:+AggressiveOpts`与`-XX:-AggressiveOpts`的对比，目前才改变了三个参数，但为免以后某个版本的JDK里默默改变更多激进的配置，还是不要了。\n\n2. Linkined那种黑科技，先要解锁`VMOptions`才能配置的就更不用说了，比如\n```\n\t-XX:+UnlockDiagnosticVMOptions -XX: ParGCCardsPerStrideChunk=32768\n```\n\n3. `JIT Compile`相关的参数，函数调用多少次之后开始编译的阀值，内联函数大小的阀值等等，不要乱改了。\n\n4. `-XX:+UseFastAccessorMethods`，JDK6的优化，据说在多层编译下还慢了，所以是默认关闭的。\n\n5. `-server`，在64位linux中，你想设成`-client`都不行的，所以写了也是白写。\n \n### 可选参数\n\n1. `-Djava.awt.headless=true`，如果服务器上没有屏幕，键盘，鼠标，又需要用到它们的时候，详见[在Java SE 平台上使用`Headless`模式](http://www.oschina.net/translate/using-headless-mode-in-java-se)\n\n2. `-XX:-UseCounterDecay`，禁止JIT调用计数器衰减。默认情况下，每次GC时会对调用计数器进行砍半的操作，导致有些方法一直是个温热，可能永远都达不到C2编译的1万次的阀值。\n\n3. `-XX:-TieredCompilation`，禁止JDK8默认的多层编译，在某些情况下因为有些方法C1编译后C2不再编译，多层编译反而比C2编译慢，如果发现此情况可进行禁止。\n\n## GC篇\n### GC策略\n为了稳健，还是8G以下的堆还是CMS好了，G1的细节实现起来难度太大，从理论提出到现在都做了六七年了。\n\nCMS真正可设的东西也不多，详见[JVM实用参数（七）CMS收集器](http://ifeve.com/useful-jvm-flags-part-7-cms-collector/)\n\n1. 基本配置\n```\n-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly\n```\n\t因为我们的监控系统会通过JMX监控内存达到90%的状况（留点处理的时间），所以设置让它75%就开始跑了，早点开始也能避免Full GC等意外情况(概念重申，这种主动的`CMS GC`，和JVM的老生代、永久代、堆外内存完全不能分配内存了而强制`Full GC`是不同的概念)。为了让这个设置生效，还要设置`-XX:+UseCMSInitiatingOccupancyOnly`，否则75只被用来做开始的参考值，后面还是JVM自己算。\n\n2. `-XX:MaxTenuringThreshold=2`，这是GC里改动效果最明显的一个参数了。对象在Survivor区熬过多少次Young GC后晋升到年老代，JDK7里看起来默认是6，跑起来好像变成了15。\n\n\tYoung GC是最大的应用停顿来源，而新生代里GC后存活对象的多少又直接影响停顿的时间，所以如果清楚Young GC的执行频率和应用里大部分临时对象的最长生命周期，可以把它设的更短一点，让其实不是临时对象的新生代长期对象赶紧晋升到年老代，别呆着。\n\n\t用`-XX:+PrintTenuringDistribution`观察下，如果后面几代都差不多，就可以设小，比如JMeter里是2。而我们的两个系统里一个设了2，一个设了6。\n\n3. `-XX:+ExplicitGCInvokesConcurrent`， 但不要`-XX:+DisableExplicitGC`， 比如[Netty之堆外内存扫盲篇](http://calvin1978.blogcn.com/articles/directbytebuffer.html)，可见禁了`system.gc()`未必是好事，只要自己的代码里没有调它，也没用什么特别烂的类库，真有人调了总有调的原因。`-XX+ExplicitGCInvokesConcurrent`则在`full gc`时，并不全程停顿，依然只在ygc和两个remark阶段停顿，详见[JVM源码分析之SystemGC完全解读](http://lovestblog.cn/blog/2015/05/07/system-gc/)\n\n4. `-XX: ParallelRefProcEnabled`, 默认为`false`，并行的处理`Reference`对象，如`WeakReference`，除非在`GC log`里出现`Reference`处理时间较长的日志，否则效果不会很明显，但我们总是要JVM尽量的并行，所以设了也就设了。\n\n### GC里不建议设的参数\n\n1. `-XX:+CMSClassUnloadingEnabled`，在CMS中清理永久代中的过期的Class而不等到`Full GC`，JDK7默认关闭而JDK8打开。看自己情况，比如有没有运行动态语言脚本如Groovy产生大量的临时类。它会增加`CMS remark`的暂停时间，所以如果新类加载并不频繁，这个参数还是不开的好。\n\n2. 用了CMS，新生代收集默认就是`-XX:+UseParNewGC`，不用自己设。\n\n3. 并发收集线程数\n```\nParallelGCThreads＝8+( Processor - 8 ) ( 5/8 )，\nConcGCThreads = (ParallelGCThreads + 3)/4\n```\n\t比如双CPU，六核，超线程就是24个处理器，小于8个处理器时`ParallelGCThreads`按处理器数量，大于时按上述公式`ParallelGCThreads＝18`， `ConcGCThreads＝5`。除了一些不在乎停顿时间的后台辅助程序会特意把它减少，平时不建议动。\n\t\n4. `-XX:+CMSScavengeBeforeRemark`，默认为关闭，在CMS remark前，先执行一次minor GC将新生代清掉，这样从老生代的对象引用到的新生代对象的个数就少了，停止全世界的CMS remark阶段就短一些。如果看到GC日志里remark阶段的时间超长，可以打开此项看看有没有效果，否则还是不要打开了，白白多了次`YGC`。\n\n5. `-XX:CMSFullGCsBeforeCompaction`，默认为0，即每次full gc都对老生代进行碎片整理压缩。Full GC 不同于 前面设置的75%老生代时触发`CMS GC`，只在`System.gc()`，老生代达到100%，老生代碎片过大无法分配空间给新晋升的大对象这些特殊情况里发生，所以设为每次都进行碎片整理是合适的，详见[此贴里R大的解释](http://hllvm.group.iteye.com/group/topic/28854)。\n\n### 内存大小的设置\n> 这些关于大小的参数，给人感觉是最踏实可控的。\n\n> 其实JVM除了显式设置的-Xmx堆内存，还有一堆其他占内存的地方(堆外内存，线程栈，永久代，二进制代码cache)，在容量规划的时候要留意。\n\n> 关键业务系统的服务器上内存一般都是够的，所以尽管设得宽松点。\n\n1. `-Xmx, -Xms`, 堆内存大小，2～4G均可，再大了注意GC时间。\n\n2. `-Xmn or -XX:NewSize and -XX:MaxNewSize or -XX:NewRatio`，JDK默认新生代占堆大小的1/3， 个人喜欢把对半分， 增大新生代的大小，能减少GC的频率（但也会加大每次GC的停顿时间），主要是看老生代里没多少长期对象的话，占2/3太多了。可以用-Xmn 直接赋值(等于`-XX:NewSize and -XX:MaxNewSize`同值的缩写)，或把NewRatio设为1来对半分(但如果想设置新生代比老生代大就只能用-Xmn)。\n\n3. `-XX: PermSize=128m -XX:MaxPermSize=512m(JDK7)`现在的应用有Hibernate/Spring这些闹腾的家伙AOP之后类都比较多，可以一开始就把初始值从64M设到128M，并设一个更大的Max值以求保险。\n\n4. `-XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m（JDK8）`，JDK8的永生代几乎可用完机器的所有内存，同样设一个128M的初始值，512M的最大值保护一下。\n\n### 其他内存大小等可选设置\n\n1. `-XX:SurvivorRatio`新生代中每个存活区的大小，默认为8，即1/10的新生代`1/(SurvivorRatio+2)`，有人喜欢设小点省点给新生代，但要避免太小使得存活区放不下临时对象而要晋升到老生代，还是从GC Log里看实际情况了。\n\n2. `-Xss`在堆之外，线程占用栈内存，默认每条线程为1M（以前是256K）。存放方法调用出参入参的栈，局部变量，标量替换后掉局部变量等，有人喜欢设小点节约内存开更多线程。但反正内存够也就不必要设小，有人喜欢再设大点，特别是有JSON解析之类的递归调用时不能设太小。\n\n3. `-XX:MaxDirectMemorySize`，堆外内存/直接内存的大小，默认为Heap区总内存减去一个Survivor区的大小，详见[Netty之堆外内存扫盲篇](http://calvin1978.blogcn.com/articles/directbytebuffer.html)。\n\n4. `-XX:ReservedCodeCacheSize`， JIT编译后二进制代码的存放区，满了之后就不再编译。JDK7默认不开多层编译48M，开了96M，而JDK8默认开多层编译240M。可以在JMX里看看`CodeCache`的大小，JDK7下的48M一般够了，也可以把它设大点，反正内存多。\n\n### GC日志\n\n1. 基本配置\n```\n-Xloggc:/dev/shm/gc-myapplication.log -XX:+PrintGCDateStamps -XX:+PrintGCDetails\n```\n\t详见[JVM实用参数（八）GC日志](http://ifeve.com/useful-jvm-flags-part-8-gc-logging/)，有人担心写GC日志会影响性能，但测试下来实在没什么影响，还是留一份用来排查好。\n\n\t到后来，又发现如果遇上高IO的情况，如果GC的时候，操作系统正在flush pageCache 到磁盘，也可能导致GC log文件被锁住，从而让GC结束不了。所以把它指向了/dev/shm 这种内存中文件系统，避免这种停顿，详见[Eliminating Large JVM GC Pauses Caused by Background IO Traffic](http://calvin1978.blogcn.com/articles/%E2%80%9Chttp://engineering.linkedin.com/blog/2016/02/eliminating-large-jvm-gc-pauses-caused-by-background-io-traffic%E2%80%9D)\n\n\t用+PrintGCDateStamps而不是PrintGCTimeStamps，打印可读的日期而不是时间戳。\n\n2. -XX:+PrintGCApplicationStoppedTime它的名字没起好，它除了打印清晰的GC停顿时间外，还可以打印其他的停顿时间，比如取消偏向锁，class 被agent redefine，code deoptimization等等，有助于发现一些原来没想到的问题，建议也加上。如果真的发现了一些不知什么的停顿，再临时加上\"-XX:+PrintSafepointStatistics -XX: PrintSafepointStatisticsCount=1\" 找原因。\n\n3. GC日志默认会在重启后清空，但有人担心长期运行不重启的应用会把文件弄得很大，有\"-XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=1M\"的参数可以让日志滚动起来。但重启后的文件名太混乱太让人头痛，所以还是不加。\n\n## 监控篇\n\n> JVM输出的各种日志，如果未指定路径，通常会生成到运行应用的相同目录，为了避免有时候在不同的地方执行启动脚本，一般将日志路径集中设到一个固定的地方。\n\n### -XX:+PrintCommandLineFlags\n运维有时会对启动参数做一些临时的更改，将每次启动的参数输出到stdout，将来有据可查。\n打印出来的是命令行里设置了的参数以及因为这些参数隐式影响的参数，比如开了CMS后，-XX:+UseParNewGC也被自动打开。\n\n### -XX:-OmitStackTraceInFastThrow\n为异常设置`StackTrace `是个昂贵的操作，所以当应用在相同地方抛出相同的异常N次(两万?)之后，JVM会对某些特定异常如NPE，数组越界等进行优化，不再带上异常栈。此时，你可能会看到日志里一条条`Nul Point Exception`，而真正输出完整栈的日志早被滚动到不知哪里去了，也就完全不知道这NPE发生在什么地方，欲哭无泪。 所以，将它禁止吧。\n \n### coredump与 -XX:ErrorFile\nJVM crash时，hotspot 会生成一个error文件，提供JVM状态信息的细节。如前所述，将其输出到固定目录，避免到时会到处找这文件。文件名中的%p会被自动替换为应用的PID\n\n```\n-XX:ErrorFile=${MYLOGDIR}/hs_err_%p.log\n```\n当然，更好的做法是生成coredump，从CoreDump能够转出Heap Dump 和 Thread Dump 还有crash的地方，非常实用。\n\n在启动脚本里加上`ulimit -c unlimited`或其他的设置方式，如果有root权限，设一下输出目录更好\n\n```\necho \"/{MYLOGDIR}/coredump.%p\" > /proc/sys/kernel/core_pattern\n```\n什么？你不知道这coredump有什么用？看来你是没遇过JVM Segment Fault的幸福人。\n \n### -XX:+HeapDumpOnOutOfMemoryError\n在`Out Of Memory`，JVM快死快死掉的时候，输出Heap Dump到指定文件。不然开发很多时候还真不知道怎么重现错误。\n\n路径只指向目录，JVM会保持文件名的唯一性，叫`java_pid${pid}.hprof`。如果指向文件，而文件已存在，反而不能写入。\n\n```\n-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${LOGDIR}/\n```\n\n### JMX\n```\nDcom.sun.management.jmxremote.port=${MY_JMX_PORT} -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1\n```\n以上设置，只让本地的Zabbix之类监控软件通过JMX监控JVM，不允许远程访问。\n\n## 小结\n\n### 性能相关\n```\n-XX:-UseBiasedLocking -XX:-UseCounterDecay -XX:AutoBoxCacheMax=20000 -XX:+PerfDisableSharedMem -XX:+AlwaysPreTouch -Djava.security.egd=file:/dev/./urandom\n```\n### 内存大小相关(JDK7)\n```\n-Xms4096m -Xmx4096m -Xmn2048m -XX:MaxDirectMemorySize=4096m-XX: PermSize=256m -XX:MaxPermSize=512m -XX:ReservedCodeCacheSize=240M\n```\n### CMS GC 相关\n```\n-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:MaxTenuringThreshold=6 -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled\n```\n### GC 日志 相关\n```\n-Xloggc:/dev/shm/app-gc.log -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCDateStamps -XX:+PrintGCDetails\n```\n### 异常 日志 相关\n```\n-XX:-OmitStackTraceInFastThrow -XX:ErrorFile=${LOGDIR}/hs_err_%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${LOGDIR}/\n```\n### JMX相关\n见3.5\n\n---\n转载自`江南白衣`的博客 [《关键业务系统的JVM参数推荐(2016热冬版)》](http://calvin1978.blogcn.com/articles/jvmoption-2.html)\n\n\n","slug":"useful-jvm-experience","published":1,"updated":"2017-08-21T09:02:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj93te728000dtoz6qe8t2gyx","content":"<blockquote>\n<p>在关键的业务系统里，除了继续追求技术人员最爱的高吞吐与低延时之外，系统的稳定性与出现问题时排查的便捷性也很重要。</p>\n<p>这是本文的一个原则，后面也会一次又一次的强调，所以与网上其他的文章略有不同，请调优高手和运维老大们多指引。</p>\n</blockquote>\n<h2 id=\"前言1：资料\"><a href=\"#前言1：资料\" class=\"headerlink\" title=\"前言1：资料\"></a>前言1：资料</h2><p>学习开源项目的启动脚本是个不错的主意，比如<a href=\"http://github.com/apache/cassandra/blob/trunk/conf/jvm.options\" target=\"_blank\" rel=\"external\">Cassandra</a>家的， 附送一篇<a href=\"http://tobert.github.io/pages/als-cassandra-21-tuning-guide.html\" target=\"_blank\" rel=\"external\">解释它的文章</a>。</p>\n<p><a href=\"http://hllvm.group.iteye.com/group/topic/27945\" target=\"_blank\" rel=\"external\">JVM调优的”标准参数”的各种陷阱 R大的文章</a>，在JDK6时写的，期待更新。<br>偶然翻到<code>Linkedin</code>工程师的<a href=\"http://www.importnew.com/11336.html\" target=\"_blank\" rel=\"external\">一篇文章</a>。<br>更偶然翻到的<a href=\"http://www.techpaste.com/2012/02/java-command-line-options-jvm-performance-improvement/\" target=\"_blank\" rel=\"external\">一份不错的参数列表</a>。<br>并发编程网上的<a href=\"http://ifeve.com/useful-jvm-flags/\" target=\"_blank\" rel=\"external\">JVM实用参数系列</a></p>\n<a id=\"more\"></a>\n<h2 id=\"前言2：打印参数值\"><a href=\"#前言2：打印参数值\" class=\"headerlink\" title=\"前言2：打印参数值\"></a>前言2：打印参数值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+PrintFlagsFinal</div></pre></td></tr></table></figure>\n<p>当你在网上兴冲冲找到一个可优化的参数时，先用<code>-XX: +PrintFlagsFinal</code>看看，它可能已经默认打开了，再找到一个，还是默认打开了…</p>\n<p>JDK7与JDK8，甚至JDK7中的不同版本，有些参数值都不一样，所以不要轻信网上任何文章，一切以生产环境同版本的JDK打出来的为准。</p>\n<p>经常以类似下面的语句去查看参数，偷懒不起应用，用<code>-version</code>代替。有些参数设置后会影响其他参数，所以查看时也把它带上。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -server -Xmx1024m -Xms1024m -XX:+UseConcMarkSweepGC -XX:+PrintFlagsFinal -version| grep ParallelGCThreads</div></pre></td></tr></table></figure>\n<h2 id=\"前言3：关于默认值\"><a href=\"#前言3：关于默认值\" class=\"headerlink\" title=\"前言3：关于默认值\"></a>前言3：关于默认值</h2><p>JDK8会默认打开<code>-XX:+TieredCompilation</code>多层编译，而JDK7则不会。JDK7u40以后的版本会默认打开<code>-XX:+OptimizeStringConcat</code>优化字符串拼接，而之前的则不打开。</p>\n<p>对于这些参数，我的建议是顺势而为，JDK在那个版本默认打开不打开总有它的理由。安全第一，没有很好的因由，不要随便因为网上某篇文章的推荐(包括你现在在读的这篇)就去设置。</p>\n<h2 id=\"性能篇\"><a href=\"#性能篇\" class=\"headerlink\" title=\"性能篇\"></a>性能篇</h2><blockquote>\n<p>先写一些不那么常见的，后面再来老生常谈。</p>\n</blockquote>\n<h3 id=\"取消偏向锁\"><a href=\"#取消偏向锁\" class=\"headerlink\" title=\"取消偏向锁\"></a>取消偏向锁</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:-UseBiasedLocking</div></pre></td></tr></table></figure>\n<p>JDK1.6开始默认打开的偏向锁，会尝试把锁赋给第一个访问它的线程，取消同步块上的synchronized原语。如果始终只有一条线程在访问它，就成功略过同步操作以获得性能提升。</p>\n<p>但一旦有第二条线程访问这把锁，JVM就要撤销偏向锁恢复到未锁定线程的状态，详见<a href=\"http://calvin1978.blogcn.com/articles/safepoint.html\" target=\"_blank\" rel=\"external\">JVM的<code>Stop The World</code>，安全点，黑暗的地底世界</a>， 可以看到不少<code>RevokeBiasd</code>的纪录，像GC一样，会<code>Stop The World</code>的干活，虽然只是很短很短的停顿，但对于多线程并发的应用，取消掉它反而有性能的提升和延时的极微的缩短，所以<code>Cassandra</code>就取消了它。</p>\n<h3 id=\"Int和Long自动装箱\"><a href=\"#Int和Long自动装箱\" class=\"headerlink\" title=\"Int和Long自动装箱\"></a>Int和Long自动装箱</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:AutoBoxCacheMax=20000</div></pre></td></tr></table></figure>\n<p><code>Integer i = 3;</code>这语句有着 int自动装箱成Integer的过程，JDK默认只缓存 -128 ~ +127的int 和 long，超出范围的数字就要即时构建新的Integer对象。设为20000后，我们应用的QPS从48,000提升到50,000，足足4%的影响。<a href=\"http://blog.csdn.net/chengzhezhijian/article/details/9628251\" target=\"_blank\" rel=\"external\">详见Java Integer(-128~127)值的==和equals比较产生的思考</a></p>\n<h3 id=\"启动时访问并置零内存页面\"><a href=\"#启动时访问并置零内存页面\" class=\"headerlink\" title=\"启动时访问并置零内存页面\"></a>启动时访问并置零内存页面</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+AlwaysPreTouch</div></pre></td></tr></table></figure>\n<p>启动时就把参数里说好了的内存全部舔一遍，可能令得启动时慢上一点，但后面访问时会更流畅，比如页面会连续分配，比如不会在晋升新生代到老生代时才去访问页面使得GC停顿时间加长。不过这选项对大堆才会更有感觉一点。</p>\n<h3 id=\"禁止JVM写statistics数据\"><a href=\"#禁止JVM写statistics数据\" class=\"headerlink\" title=\"禁止JVM写statistics数据\"></a>禁止JVM写statistics数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+PerfDisableSharedMem</div></pre></td></tr></table></figure>\n<p>Cassandra家的一个参数，一直没留意，直到发生高IO时的JVM停顿。原来JVM经常会默默的在/tmp/hperf 目录写上一点<code>statistics</code>数据，如果刚好遇到<code>PageCache</code>刷盘，把文件阻塞了，就不能结束这个<code>Stop the World</code>的安全点了。用此参数可以禁止JVM写<code>statistics</code>数据，代价是jps, jstat 用不了，只能用JMX取数据。有时用JMX取新生代老生代使用百分比还真没jstat方便。<a href=\"http://www.evanjones.ca/jvm-mmap-pause.html\" target=\"_blank\" rel=\"external\">详见The Four Month Bug: JVM statistics cause garbage collection pauses</a></p>\n<h3 id=\"使用SHA1算法\"><a href=\"#使用SHA1算法\" class=\"headerlink\" title=\"使用SHA1算法\"></a>使用SHA1算法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-Djava.security.egd=file:/dev/./urandom</div></pre></td></tr></table></figure>\n<p>此江湖偏方原用于Tomcat显式使用SHA1PRNG算法时，初始因子从<code>/dev/random</code>读取导致堵塞。而使用此设置后，额外效果是默认的<code>SecureRandom</code>算法也变成<code>SHA1</code>了。 <code>SHA1PRNG</code>比<code>NativePRNG</code>消耗小一半，<code>synchronized</code>的代码少一半，所以没特殊安全要求的话建议用SHA1。详见<a href=\"SecureRandom的江湖偏方与真实效果\">SecureRandom的江湖偏方与真实效果</a></p>\n<h3 id=\"不建议的参数\"><a href=\"#不建议的参数\" class=\"headerlink\" title=\"不建议的参数\"></a>不建议的参数</h3><ol>\n<li><p><code>-XX:+AggressiveOpts</code>是一些还没默认打开的优化参数集合, <code>-XX:AutoBoxCacheMax</code>是其中的一项。但如前所述，关键系统里不建议打开。虽然通过<code>-XX:+AggressiveOpts</code>与<code>-XX:-AggressiveOpts</code>的对比，目前才改变了三个参数，但为免以后某个版本的JDK里默默改变更多激进的配置，还是不要了。</p>\n</li>\n<li><p>Linkined那种黑科技，先要解锁<code>VMOptions</code>才能配置的就更不用说了，比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+UnlockDiagnosticVMOptions -XX: ParGCCardsPerStrideChunk=32768</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>JIT Compile</code>相关的参数，函数调用多少次之后开始编译的阀值，内联函数大小的阀值等等，不要乱改了。</p>\n</li>\n<li><p><code>-XX:+UseFastAccessorMethods</code>，JDK6的优化，据说在多层编译下还慢了，所以是默认关闭的。</p>\n</li>\n<li><p><code>-server</code>，在64位linux中，你想设成<code>-client</code>都不行的，所以写了也是白写。</p>\n</li>\n</ol>\n<h3 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h3><ol>\n<li><p><code>-Djava.awt.headless=true</code>，如果服务器上没有屏幕，键盘，鼠标，又需要用到它们的时候，详见<a href=\"http://www.oschina.net/translate/using-headless-mode-in-java-se\" target=\"_blank\" rel=\"external\">在Java SE 平台上使用<code>Headless</code>模式</a></p>\n</li>\n<li><p><code>-XX:-UseCounterDecay</code>，禁止JIT调用计数器衰减。默认情况下，每次GC时会对调用计数器进行砍半的操作，导致有些方法一直是个温热，可能永远都达不到C2编译的1万次的阀值。</p>\n</li>\n<li><p><code>-XX:-TieredCompilation</code>，禁止JDK8默认的多层编译，在某些情况下因为有些方法C1编译后C2不再编译，多层编译反而比C2编译慢，如果发现此情况可进行禁止。</p>\n</li>\n</ol>\n<h2 id=\"GC篇\"><a href=\"#GC篇\" class=\"headerlink\" title=\"GC篇\"></a>GC篇</h2><h3 id=\"GC策略\"><a href=\"#GC策略\" class=\"headerlink\" title=\"GC策略\"></a>GC策略</h3><p>为了稳健，还是8G以下的堆还是CMS好了，G1的细节实现起来难度太大，从理论提出到现在都做了六七年了。</p>\n<p>CMS真正可设的东西也不多，详见<a href=\"http://ifeve.com/useful-jvm-flags-part-7-cms-collector/\" target=\"_blank\" rel=\"external\">JVM实用参数（七）CMS收集器</a></p>\n<ol>\n<li><p>基本配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly</div></pre></td></tr></table></figure>\n<p> 因为我们的监控系统会通过JMX监控内存达到90%的状况（留点处理的时间），所以设置让它75%就开始跑了，早点开始也能避免Full GC等意外情况(概念重申，这种主动的<code>CMS GC</code>，和JVM的老生代、永久代、堆外内存完全不能分配内存了而强制<code>Full GC</code>是不同的概念)。为了让这个设置生效，还要设置<code>-XX:+UseCMSInitiatingOccupancyOnly</code>，否则75只被用来做开始的参考值，后面还是JVM自己算。</p>\n</li>\n<li><p><code>-XX:MaxTenuringThreshold=2</code>，这是GC里改动效果最明显的一个参数了。对象在Survivor区熬过多少次Young GC后晋升到年老代，JDK7里看起来默认是6，跑起来好像变成了15。</p>\n<p> Young GC是最大的应用停顿来源，而新生代里GC后存活对象的多少又直接影响停顿的时间，所以如果清楚Young GC的执行频率和应用里大部分临时对象的最长生命周期，可以把它设的更短一点，让其实不是临时对象的新生代长期对象赶紧晋升到年老代，别呆着。</p>\n<p> 用<code>-XX:+PrintTenuringDistribution</code>观察下，如果后面几代都差不多，就可以设小，比如JMeter里是2。而我们的两个系统里一个设了2，一个设了6。</p>\n</li>\n<li><p><code>-XX:+ExplicitGCInvokesConcurrent</code>， 但不要<code>-XX:+DisableExplicitGC</code>， 比如<a href=\"http://calvin1978.blogcn.com/articles/directbytebuffer.html\" target=\"_blank\" rel=\"external\">Netty之堆外内存扫盲篇</a>，可见禁了<code>system.gc()</code>未必是好事，只要自己的代码里没有调它，也没用什么特别烂的类库，真有人调了总有调的原因。<code>-XX+ExplicitGCInvokesConcurrent</code>则在<code>full gc</code>时，并不全程停顿，依然只在ygc和两个remark阶段停顿，详见<a href=\"http://lovestblog.cn/blog/2015/05/07/system-gc/\" target=\"_blank\" rel=\"external\">JVM源码分析之SystemGC完全解读</a></p>\n</li>\n<li><p><code>-XX: ParallelRefProcEnabled</code>, 默认为<code>false</code>，并行的处理<code>Reference</code>对象，如<code>WeakReference</code>，除非在<code>GC log</code>里出现<code>Reference</code>处理时间较长的日志，否则效果不会很明显，但我们总是要JVM尽量的并行，所以设了也就设了。</p>\n</li>\n</ol>\n<h3 id=\"GC里不建议设的参数\"><a href=\"#GC里不建议设的参数\" class=\"headerlink\" title=\"GC里不建议设的参数\"></a>GC里不建议设的参数</h3><ol>\n<li><p><code>-XX:+CMSClassUnloadingEnabled</code>，在CMS中清理永久代中的过期的Class而不等到<code>Full GC</code>，JDK7默认关闭而JDK8打开。看自己情况，比如有没有运行动态语言脚本如Groovy产生大量的临时类。它会增加<code>CMS remark</code>的暂停时间，所以如果新类加载并不频繁，这个参数还是不开的好。</p>\n</li>\n<li><p>用了CMS，新生代收集默认就是<code>-XX:+UseParNewGC</code>，不用自己设。</p>\n</li>\n<li><p>并发收集线程数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ParallelGCThreads＝8+( Processor - 8 ) ( 5/8 )，</div><div class=\"line\">ConcGCThreads = (ParallelGCThreads + 3)/4</div></pre></td></tr></table></figure>\n<p> 比如双CPU，六核，超线程就是24个处理器，小于8个处理器时<code>ParallelGCThreads</code>按处理器数量，大于时按上述公式<code>ParallelGCThreads＝18</code>， <code>ConcGCThreads＝5</code>。除了一些不在乎停顿时间的后台辅助程序会特意把它减少，平时不建议动。</p>\n</li>\n<li><p><code>-XX:+CMSScavengeBeforeRemark</code>，默认为关闭，在CMS remark前，先执行一次minor GC将新生代清掉，这样从老生代的对象引用到的新生代对象的个数就少了，停止全世界的CMS remark阶段就短一些。如果看到GC日志里remark阶段的时间超长，可以打开此项看看有没有效果，否则还是不要打开了，白白多了次<code>YGC</code>。</p>\n</li>\n<li><p><code>-XX:CMSFullGCsBeforeCompaction</code>，默认为0，即每次full gc都对老生代进行碎片整理压缩。Full GC 不同于 前面设置的75%老生代时触发<code>CMS GC</code>，只在<code>System.gc()</code>，老生代达到100%，老生代碎片过大无法分配空间给新晋升的大对象这些特殊情况里发生，所以设为每次都进行碎片整理是合适的，详见<a href=\"http://hllvm.group.iteye.com/group/topic/28854\" target=\"_blank\" rel=\"external\">此贴里R大的解释</a>。</p>\n</li>\n</ol>\n<h3 id=\"内存大小的设置\"><a href=\"#内存大小的设置\" class=\"headerlink\" title=\"内存大小的设置\"></a>内存大小的设置</h3><blockquote>\n<p>这些关于大小的参数，给人感觉是最踏实可控的。</p>\n<p>其实JVM除了显式设置的-Xmx堆内存，还有一堆其他占内存的地方(堆外内存，线程栈，永久代，二进制代码cache)，在容量规划的时候要留意。</p>\n<p>关键业务系统的服务器上内存一般都是够的，所以尽管设得宽松点。</p>\n</blockquote>\n<ol>\n<li><p><code>-Xmx, -Xms</code>, 堆内存大小，2～4G均可，再大了注意GC时间。</p>\n</li>\n<li><p><code>-Xmn or -XX:NewSize and -XX:MaxNewSize or -XX:NewRatio</code>，JDK默认新生代占堆大小的1/3， 个人喜欢把对半分， 增大新生代的大小，能减少GC的频率（但也会加大每次GC的停顿时间），主要是看老生代里没多少长期对象的话，占2/3太多了。可以用-Xmn 直接赋值(等于<code>-XX:NewSize and -XX:MaxNewSize</code>同值的缩写)，或把NewRatio设为1来对半分(但如果想设置新生代比老生代大就只能用-Xmn)。</p>\n</li>\n<li><p><code>-XX: PermSize=128m -XX:MaxPermSize=512m(JDK7)</code>现在的应用有Hibernate/Spring这些闹腾的家伙AOP之后类都比较多，可以一开始就把初始值从64M设到128M，并设一个更大的Max值以求保险。</p>\n</li>\n<li><p><code>-XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m（JDK8）</code>，JDK8的永生代几乎可用完机器的所有内存，同样设一个128M的初始值，512M的最大值保护一下。</p>\n</li>\n</ol>\n<h3 id=\"其他内存大小等可选设置\"><a href=\"#其他内存大小等可选设置\" class=\"headerlink\" title=\"其他内存大小等可选设置\"></a>其他内存大小等可选设置</h3><ol>\n<li><p><code>-XX:SurvivorRatio</code>新生代中每个存活区的大小，默认为8，即1/10的新生代<code>1/(SurvivorRatio+2)</code>，有人喜欢设小点省点给新生代，但要避免太小使得存活区放不下临时对象而要晋升到老生代，还是从GC Log里看实际情况了。</p>\n</li>\n<li><p><code>-Xss</code>在堆之外，线程占用栈内存，默认每条线程为1M（以前是256K）。存放方法调用出参入参的栈，局部变量，标量替换后掉局部变量等，有人喜欢设小点节约内存开更多线程。但反正内存够也就不必要设小，有人喜欢再设大点，特别是有JSON解析之类的递归调用时不能设太小。</p>\n</li>\n<li><p><code>-XX:MaxDirectMemorySize</code>，堆外内存/直接内存的大小，默认为Heap区总内存减去一个Survivor区的大小，详见<a href=\"http://calvin1978.blogcn.com/articles/directbytebuffer.html\" target=\"_blank\" rel=\"external\">Netty之堆外内存扫盲篇</a>。</p>\n</li>\n<li><p><code>-XX:ReservedCodeCacheSize</code>， JIT编译后二进制代码的存放区，满了之后就不再编译。JDK7默认不开多层编译48M，开了96M，而JDK8默认开多层编译240M。可以在JMX里看看<code>CodeCache</code>的大小，JDK7下的48M一般够了，也可以把它设大点，反正内存多。</p>\n</li>\n</ol>\n<h3 id=\"GC日志\"><a href=\"#GC日志\" class=\"headerlink\" title=\"GC日志\"></a>GC日志</h3><ol>\n<li><p>基本配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-Xloggc:/dev/shm/gc-myapplication.log -XX:+PrintGCDateStamps -XX:+PrintGCDetails</div></pre></td></tr></table></figure>\n<p> 详见<a href=\"http://ifeve.com/useful-jvm-flags-part-8-gc-logging/\" target=\"_blank\" rel=\"external\">JVM实用参数（八）GC日志</a>，有人担心写GC日志会影响性能，但测试下来实在没什么影响，还是留一份用来排查好。</p>\n<p> 到后来，又发现如果遇上高IO的情况，如果GC的时候，操作系统正在flush pageCache 到磁盘，也可能导致GC log文件被锁住，从而让GC结束不了。所以把它指向了/dev/shm 这种内存中文件系统，避免这种停顿，详见<a href=\"http://calvin1978.blogcn.com/articles/%E2%80%9Chttp://engineering.linkedin.com/blog/2016/02/eliminating-large-jvm-gc-pauses-caused-by-background-io-traffic%E2%80%9D\" target=\"_blank\" rel=\"external\">Eliminating Large JVM GC Pauses Caused by Background IO Traffic</a></p>\n<p> 用+PrintGCDateStamps而不是PrintGCTimeStamps，打印可读的日期而不是时间戳。</p>\n</li>\n<li><p>-XX:+PrintGCApplicationStoppedTime它的名字没起好，它除了打印清晰的GC停顿时间外，还可以打印其他的停顿时间，比如取消偏向锁，class 被agent redefine，code deoptimization等等，有助于发现一些原来没想到的问题，建议也加上。如果真的发现了一些不知什么的停顿，再临时加上”-XX:+PrintSafepointStatistics -XX: PrintSafepointStatisticsCount=1” 找原因。</p>\n</li>\n<li><p>GC日志默认会在重启后清空，但有人担心长期运行不重启的应用会把文件弄得很大，有”-XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=1M”的参数可以让日志滚动起来。但重启后的文件名太混乱太让人头痛，所以还是不加。</p>\n</li>\n</ol>\n<h2 id=\"监控篇\"><a href=\"#监控篇\" class=\"headerlink\" title=\"监控篇\"></a>监控篇</h2><blockquote>\n<p>JVM输出的各种日志，如果未指定路径，通常会生成到运行应用的相同目录，为了避免有时候在不同的地方执行启动脚本，一般将日志路径集中设到一个固定的地方。</p>\n</blockquote>\n<h3 id=\"XX-PrintCommandLineFlags\"><a href=\"#XX-PrintCommandLineFlags\" class=\"headerlink\" title=\"-XX:+PrintCommandLineFlags\"></a>-XX:+PrintCommandLineFlags</h3><p>运维有时会对启动参数做一些临时的更改，将每次启动的参数输出到stdout，将来有据可查。<br>打印出来的是命令行里设置了的参数以及因为这些参数隐式影响的参数，比如开了CMS后，-XX:+UseParNewGC也被自动打开。</p>\n<h3 id=\"XX-OmitStackTraceInFastThrow\"><a href=\"#XX-OmitStackTraceInFastThrow\" class=\"headerlink\" title=\"-XX:-OmitStackTraceInFastThrow\"></a>-XX:-OmitStackTraceInFastThrow</h3><p>为异常设置<code>StackTrace</code>是个昂贵的操作，所以当应用在相同地方抛出相同的异常N次(两万?)之后，JVM会对某些特定异常如NPE，数组越界等进行优化，不再带上异常栈。此时，你可能会看到日志里一条条<code>Nul Point Exception</code>，而真正输出完整栈的日志早被滚动到不知哪里去了，也就完全不知道这NPE发生在什么地方，欲哭无泪。 所以，将它禁止吧。</p>\n<h3 id=\"coredump与-XX-ErrorFile\"><a href=\"#coredump与-XX-ErrorFile\" class=\"headerlink\" title=\"coredump与 -XX:ErrorFile\"></a>coredump与 -XX:ErrorFile</h3><p>JVM crash时，hotspot 会生成一个error文件，提供JVM状态信息的细节。如前所述，将其输出到固定目录，避免到时会到处找这文件。文件名中的%p会被自动替换为应用的PID</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:ErrorFile=$&#123;MYLOGDIR&#125;/hs_err_%p.log</div></pre></td></tr></table></figure>\n<p>当然，更好的做法是生成coredump，从CoreDump能够转出Heap Dump 和 Thread Dump 还有crash的地方，非常实用。</p>\n<p>在启动脚本里加上<code>ulimit -c unlimited</code>或其他的设置方式，如果有root权限，设一下输出目录更好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;/&#123;MYLOGDIR&#125;/coredump.%p&quot; &gt; /proc/sys/kernel/core_pattern</div></pre></td></tr></table></figure>\n<p>什么？你不知道这coredump有什么用？看来你是没遇过JVM Segment Fault的幸福人。</p>\n<h3 id=\"XX-HeapDumpOnOutOfMemoryError\"><a href=\"#XX-HeapDumpOnOutOfMemoryError\" class=\"headerlink\" title=\"-XX:+HeapDumpOnOutOfMemoryError\"></a>-XX:+HeapDumpOnOutOfMemoryError</h3><p>在<code>Out Of Memory</code>，JVM快死快死掉的时候，输出Heap Dump到指定文件。不然开发很多时候还真不知道怎么重现错误。</p>\n<p>路径只指向目录，JVM会保持文件名的唯一性，叫<code>java_pid${pid}.hprof</code>。如果指向文件，而文件已存在，反而不能写入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOGDIR&#125;/</div></pre></td></tr></table></figure>\n<h3 id=\"JMX\"><a href=\"#JMX\" class=\"headerlink\" title=\"JMX\"></a>JMX</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Dcom.sun.management.jmxremote.port=$&#123;MY_JMX_PORT&#125; -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1</div></pre></td></tr></table></figure>\n<p>以上设置，只让本地的Zabbix之类监控软件通过JMX监控JVM，不允许远程访问。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><h3 id=\"性能相关\"><a href=\"#性能相关\" class=\"headerlink\" title=\"性能相关\"></a>性能相关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:-UseBiasedLocking -XX:-UseCounterDecay -XX:AutoBoxCacheMax=20000 -XX:+PerfDisableSharedMem -XX:+AlwaysPreTouch -Djava.security.egd=file:/dev/./urandom</div></pre></td></tr></table></figure>\n<h3 id=\"内存大小相关-JDK7\"><a href=\"#内存大小相关-JDK7\" class=\"headerlink\" title=\"内存大小相关(JDK7)\"></a>内存大小相关(JDK7)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-Xms4096m -Xmx4096m -Xmn2048m -XX:MaxDirectMemorySize=4096m-XX: PermSize=256m -XX:MaxPermSize=512m -XX:ReservedCodeCacheSize=240M</div></pre></td></tr></table></figure>\n<h3 id=\"CMS-GC-相关\"><a href=\"#CMS-GC-相关\" class=\"headerlink\" title=\"CMS GC 相关\"></a>CMS GC 相关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:MaxTenuringThreshold=6 -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled</div></pre></td></tr></table></figure>\n<h3 id=\"GC-日志-相关\"><a href=\"#GC-日志-相关\" class=\"headerlink\" title=\"GC 日志 相关\"></a>GC 日志 相关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-Xloggc:/dev/shm/app-gc.log -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCDateStamps -XX:+PrintGCDetails</div></pre></td></tr></table></figure>\n<h3 id=\"异常-日志-相关\"><a href=\"#异常-日志-相关\" class=\"headerlink\" title=\"异常 日志 相关\"></a>异常 日志 相关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:-OmitStackTraceInFastThrow -XX:ErrorFile=$&#123;LOGDIR&#125;/hs_err_%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOGDIR&#125;/</div></pre></td></tr></table></figure>\n<h3 id=\"JMX相关\"><a href=\"#JMX相关\" class=\"headerlink\" title=\"JMX相关\"></a>JMX相关</h3><p>见3.5</p>\n<hr>\n<p>转载自<code>江南白衣</code>的博客 <a href=\"http://calvin1978.blogcn.com/articles/jvmoption-2.html\" target=\"_blank\" rel=\"external\">《关键业务系统的JVM参数推荐(2016热冬版)》</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在关键的业务系统里，除了继续追求技术人员最爱的高吞吐与低延时之外，系统的稳定性与出现问题时排查的便捷性也很重要。</p>\n<p>这是本文的一个原则，后面也会一次又一次的强调，所以与网上其他的文章略有不同，请调优高手和运维老大们多指引。</p>\n</blockquote>\n<h2 id=\"前言1：资料\"><a href=\"#前言1：资料\" class=\"headerlink\" title=\"前言1：资料\"></a>前言1：资料</h2><p>学习开源项目的启动脚本是个不错的主意，比如<a href=\"http://github.com/apache/cassandra/blob/trunk/conf/jvm.options\" target=\"_blank\" rel=\"external\">Cassandra</a>家的， 附送一篇<a href=\"http://tobert.github.io/pages/als-cassandra-21-tuning-guide.html\" target=\"_blank\" rel=\"external\">解释它的文章</a>。</p>\n<p><a href=\"http://hllvm.group.iteye.com/group/topic/27945\" target=\"_blank\" rel=\"external\">JVM调优的”标准参数”的各种陷阱 R大的文章</a>，在JDK6时写的，期待更新。<br>偶然翻到<code>Linkedin</code>工程师的<a href=\"http://www.importnew.com/11336.html\" target=\"_blank\" rel=\"external\">一篇文章</a>。<br>更偶然翻到的<a href=\"http://www.techpaste.com/2012/02/java-command-line-options-jvm-performance-improvement/\" target=\"_blank\" rel=\"external\">一份不错的参数列表</a>。<br>并发编程网上的<a href=\"http://ifeve.com/useful-jvm-flags/\" target=\"_blank\" rel=\"external\">JVM实用参数系列</a></p>","more":"<h2 id=\"前言2：打印参数值\"><a href=\"#前言2：打印参数值\" class=\"headerlink\" title=\"前言2：打印参数值\"></a>前言2：打印参数值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+PrintFlagsFinal</div></pre></td></tr></table></figure>\n<p>当你在网上兴冲冲找到一个可优化的参数时，先用<code>-XX: +PrintFlagsFinal</code>看看，它可能已经默认打开了，再找到一个，还是默认打开了…</p>\n<p>JDK7与JDK8，甚至JDK7中的不同版本，有些参数值都不一样，所以不要轻信网上任何文章，一切以生产环境同版本的JDK打出来的为准。</p>\n<p>经常以类似下面的语句去查看参数，偷懒不起应用，用<code>-version</code>代替。有些参数设置后会影响其他参数，所以查看时也把它带上。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -server -Xmx1024m -Xms1024m -XX:+UseConcMarkSweepGC -XX:+PrintFlagsFinal -version| grep ParallelGCThreads</div></pre></td></tr></table></figure>\n<h2 id=\"前言3：关于默认值\"><a href=\"#前言3：关于默认值\" class=\"headerlink\" title=\"前言3：关于默认值\"></a>前言3：关于默认值</h2><p>JDK8会默认打开<code>-XX:+TieredCompilation</code>多层编译，而JDK7则不会。JDK7u40以后的版本会默认打开<code>-XX:+OptimizeStringConcat</code>优化字符串拼接，而之前的则不打开。</p>\n<p>对于这些参数，我的建议是顺势而为，JDK在那个版本默认打开不打开总有它的理由。安全第一，没有很好的因由，不要随便因为网上某篇文章的推荐(包括你现在在读的这篇)就去设置。</p>\n<h2 id=\"性能篇\"><a href=\"#性能篇\" class=\"headerlink\" title=\"性能篇\"></a>性能篇</h2><blockquote>\n<p>先写一些不那么常见的，后面再来老生常谈。</p>\n</blockquote>\n<h3 id=\"取消偏向锁\"><a href=\"#取消偏向锁\" class=\"headerlink\" title=\"取消偏向锁\"></a>取消偏向锁</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:-UseBiasedLocking</div></pre></td></tr></table></figure>\n<p>JDK1.6开始默认打开的偏向锁，会尝试把锁赋给第一个访问它的线程，取消同步块上的synchronized原语。如果始终只有一条线程在访问它，就成功略过同步操作以获得性能提升。</p>\n<p>但一旦有第二条线程访问这把锁，JVM就要撤销偏向锁恢复到未锁定线程的状态，详见<a href=\"http://calvin1978.blogcn.com/articles/safepoint.html\" target=\"_blank\" rel=\"external\">JVM的<code>Stop The World</code>，安全点，黑暗的地底世界</a>， 可以看到不少<code>RevokeBiasd</code>的纪录，像GC一样，会<code>Stop The World</code>的干活，虽然只是很短很短的停顿，但对于多线程并发的应用，取消掉它反而有性能的提升和延时的极微的缩短，所以<code>Cassandra</code>就取消了它。</p>\n<h3 id=\"Int和Long自动装箱\"><a href=\"#Int和Long自动装箱\" class=\"headerlink\" title=\"Int和Long自动装箱\"></a>Int和Long自动装箱</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:AutoBoxCacheMax=20000</div></pre></td></tr></table></figure>\n<p><code>Integer i = 3;</code>这语句有着 int自动装箱成Integer的过程，JDK默认只缓存 -128 ~ +127的int 和 long，超出范围的数字就要即时构建新的Integer对象。设为20000后，我们应用的QPS从48,000提升到50,000，足足4%的影响。<a href=\"http://blog.csdn.net/chengzhezhijian/article/details/9628251\" target=\"_blank\" rel=\"external\">详见Java Integer(-128~127)值的==和equals比较产生的思考</a></p>\n<h3 id=\"启动时访问并置零内存页面\"><a href=\"#启动时访问并置零内存页面\" class=\"headerlink\" title=\"启动时访问并置零内存页面\"></a>启动时访问并置零内存页面</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+AlwaysPreTouch</div></pre></td></tr></table></figure>\n<p>启动时就把参数里说好了的内存全部舔一遍，可能令得启动时慢上一点，但后面访问时会更流畅，比如页面会连续分配，比如不会在晋升新生代到老生代时才去访问页面使得GC停顿时间加长。不过这选项对大堆才会更有感觉一点。</p>\n<h3 id=\"禁止JVM写statistics数据\"><a href=\"#禁止JVM写statistics数据\" class=\"headerlink\" title=\"禁止JVM写statistics数据\"></a>禁止JVM写statistics数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+PerfDisableSharedMem</div></pre></td></tr></table></figure>\n<p>Cassandra家的一个参数，一直没留意，直到发生高IO时的JVM停顿。原来JVM经常会默默的在/tmp/hperf 目录写上一点<code>statistics</code>数据，如果刚好遇到<code>PageCache</code>刷盘，把文件阻塞了，就不能结束这个<code>Stop the World</code>的安全点了。用此参数可以禁止JVM写<code>statistics</code>数据，代价是jps, jstat 用不了，只能用JMX取数据。有时用JMX取新生代老生代使用百分比还真没jstat方便。<a href=\"http://www.evanjones.ca/jvm-mmap-pause.html\" target=\"_blank\" rel=\"external\">详见The Four Month Bug: JVM statistics cause garbage collection pauses</a></p>\n<h3 id=\"使用SHA1算法\"><a href=\"#使用SHA1算法\" class=\"headerlink\" title=\"使用SHA1算法\"></a>使用SHA1算法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-Djava.security.egd=file:/dev/./urandom</div></pre></td></tr></table></figure>\n<p>此江湖偏方原用于Tomcat显式使用SHA1PRNG算法时，初始因子从<code>/dev/random</code>读取导致堵塞。而使用此设置后，额外效果是默认的<code>SecureRandom</code>算法也变成<code>SHA1</code>了。 <code>SHA1PRNG</code>比<code>NativePRNG</code>消耗小一半，<code>synchronized</code>的代码少一半，所以没特殊安全要求的话建议用SHA1。详见<a href=\"SecureRandom的江湖偏方与真实效果\">SecureRandom的江湖偏方与真实效果</a></p>\n<h3 id=\"不建议的参数\"><a href=\"#不建议的参数\" class=\"headerlink\" title=\"不建议的参数\"></a>不建议的参数</h3><ol>\n<li><p><code>-XX:+AggressiveOpts</code>是一些还没默认打开的优化参数集合, <code>-XX:AutoBoxCacheMax</code>是其中的一项。但如前所述，关键系统里不建议打开。虽然通过<code>-XX:+AggressiveOpts</code>与<code>-XX:-AggressiveOpts</code>的对比，目前才改变了三个参数，但为免以后某个版本的JDK里默默改变更多激进的配置，还是不要了。</p>\n</li>\n<li><p>Linkined那种黑科技，先要解锁<code>VMOptions</code>才能配置的就更不用说了，比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+UnlockDiagnosticVMOptions -XX: ParGCCardsPerStrideChunk=32768</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>JIT Compile</code>相关的参数，函数调用多少次之后开始编译的阀值，内联函数大小的阀值等等，不要乱改了。</p>\n</li>\n<li><p><code>-XX:+UseFastAccessorMethods</code>，JDK6的优化，据说在多层编译下还慢了，所以是默认关闭的。</p>\n</li>\n<li><p><code>-server</code>，在64位linux中，你想设成<code>-client</code>都不行的，所以写了也是白写。</p>\n</li>\n</ol>\n<h3 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h3><ol>\n<li><p><code>-Djava.awt.headless=true</code>，如果服务器上没有屏幕，键盘，鼠标，又需要用到它们的时候，详见<a href=\"http://www.oschina.net/translate/using-headless-mode-in-java-se\" target=\"_blank\" rel=\"external\">在Java SE 平台上使用<code>Headless</code>模式</a></p>\n</li>\n<li><p><code>-XX:-UseCounterDecay</code>，禁止JIT调用计数器衰减。默认情况下，每次GC时会对调用计数器进行砍半的操作，导致有些方法一直是个温热，可能永远都达不到C2编译的1万次的阀值。</p>\n</li>\n<li><p><code>-XX:-TieredCompilation</code>，禁止JDK8默认的多层编译，在某些情况下因为有些方法C1编译后C2不再编译，多层编译反而比C2编译慢，如果发现此情况可进行禁止。</p>\n</li>\n</ol>\n<h2 id=\"GC篇\"><a href=\"#GC篇\" class=\"headerlink\" title=\"GC篇\"></a>GC篇</h2><h3 id=\"GC策略\"><a href=\"#GC策略\" class=\"headerlink\" title=\"GC策略\"></a>GC策略</h3><p>为了稳健，还是8G以下的堆还是CMS好了，G1的细节实现起来难度太大，从理论提出到现在都做了六七年了。</p>\n<p>CMS真正可设的东西也不多，详见<a href=\"http://ifeve.com/useful-jvm-flags-part-7-cms-collector/\" target=\"_blank\" rel=\"external\">JVM实用参数（七）CMS收集器</a></p>\n<ol>\n<li><p>基本配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly</div></pre></td></tr></table></figure>\n<p> 因为我们的监控系统会通过JMX监控内存达到90%的状况（留点处理的时间），所以设置让它75%就开始跑了，早点开始也能避免Full GC等意外情况(概念重申，这种主动的<code>CMS GC</code>，和JVM的老生代、永久代、堆外内存完全不能分配内存了而强制<code>Full GC</code>是不同的概念)。为了让这个设置生效，还要设置<code>-XX:+UseCMSInitiatingOccupancyOnly</code>，否则75只被用来做开始的参考值，后面还是JVM自己算。</p>\n</li>\n<li><p><code>-XX:MaxTenuringThreshold=2</code>，这是GC里改动效果最明显的一个参数了。对象在Survivor区熬过多少次Young GC后晋升到年老代，JDK7里看起来默认是6，跑起来好像变成了15。</p>\n<p> Young GC是最大的应用停顿来源，而新生代里GC后存活对象的多少又直接影响停顿的时间，所以如果清楚Young GC的执行频率和应用里大部分临时对象的最长生命周期，可以把它设的更短一点，让其实不是临时对象的新生代长期对象赶紧晋升到年老代，别呆着。</p>\n<p> 用<code>-XX:+PrintTenuringDistribution</code>观察下，如果后面几代都差不多，就可以设小，比如JMeter里是2。而我们的两个系统里一个设了2，一个设了6。</p>\n</li>\n<li><p><code>-XX:+ExplicitGCInvokesConcurrent</code>， 但不要<code>-XX:+DisableExplicitGC</code>， 比如<a href=\"http://calvin1978.blogcn.com/articles/directbytebuffer.html\" target=\"_blank\" rel=\"external\">Netty之堆外内存扫盲篇</a>，可见禁了<code>system.gc()</code>未必是好事，只要自己的代码里没有调它，也没用什么特别烂的类库，真有人调了总有调的原因。<code>-XX+ExplicitGCInvokesConcurrent</code>则在<code>full gc</code>时，并不全程停顿，依然只在ygc和两个remark阶段停顿，详见<a href=\"http://lovestblog.cn/blog/2015/05/07/system-gc/\" target=\"_blank\" rel=\"external\">JVM源码分析之SystemGC完全解读</a></p>\n</li>\n<li><p><code>-XX: ParallelRefProcEnabled</code>, 默认为<code>false</code>，并行的处理<code>Reference</code>对象，如<code>WeakReference</code>，除非在<code>GC log</code>里出现<code>Reference</code>处理时间较长的日志，否则效果不会很明显，但我们总是要JVM尽量的并行，所以设了也就设了。</p>\n</li>\n</ol>\n<h3 id=\"GC里不建议设的参数\"><a href=\"#GC里不建议设的参数\" class=\"headerlink\" title=\"GC里不建议设的参数\"></a>GC里不建议设的参数</h3><ol>\n<li><p><code>-XX:+CMSClassUnloadingEnabled</code>，在CMS中清理永久代中的过期的Class而不等到<code>Full GC</code>，JDK7默认关闭而JDK8打开。看自己情况，比如有没有运行动态语言脚本如Groovy产生大量的临时类。它会增加<code>CMS remark</code>的暂停时间，所以如果新类加载并不频繁，这个参数还是不开的好。</p>\n</li>\n<li><p>用了CMS，新生代收集默认就是<code>-XX:+UseParNewGC</code>，不用自己设。</p>\n</li>\n<li><p>并发收集线程数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ParallelGCThreads＝8+( Processor - 8 ) ( 5/8 )，</div><div class=\"line\">ConcGCThreads = (ParallelGCThreads + 3)/4</div></pre></td></tr></table></figure>\n<p> 比如双CPU，六核，超线程就是24个处理器，小于8个处理器时<code>ParallelGCThreads</code>按处理器数量，大于时按上述公式<code>ParallelGCThreads＝18</code>， <code>ConcGCThreads＝5</code>。除了一些不在乎停顿时间的后台辅助程序会特意把它减少，平时不建议动。</p>\n</li>\n<li><p><code>-XX:+CMSScavengeBeforeRemark</code>，默认为关闭，在CMS remark前，先执行一次minor GC将新生代清掉，这样从老生代的对象引用到的新生代对象的个数就少了，停止全世界的CMS remark阶段就短一些。如果看到GC日志里remark阶段的时间超长，可以打开此项看看有没有效果，否则还是不要打开了，白白多了次<code>YGC</code>。</p>\n</li>\n<li><p><code>-XX:CMSFullGCsBeforeCompaction</code>，默认为0，即每次full gc都对老生代进行碎片整理压缩。Full GC 不同于 前面设置的75%老生代时触发<code>CMS GC</code>，只在<code>System.gc()</code>，老生代达到100%，老生代碎片过大无法分配空间给新晋升的大对象这些特殊情况里发生，所以设为每次都进行碎片整理是合适的，详见<a href=\"http://hllvm.group.iteye.com/group/topic/28854\" target=\"_blank\" rel=\"external\">此贴里R大的解释</a>。</p>\n</li>\n</ol>\n<h3 id=\"内存大小的设置\"><a href=\"#内存大小的设置\" class=\"headerlink\" title=\"内存大小的设置\"></a>内存大小的设置</h3><blockquote>\n<p>这些关于大小的参数，给人感觉是最踏实可控的。</p>\n<p>其实JVM除了显式设置的-Xmx堆内存，还有一堆其他占内存的地方(堆外内存，线程栈，永久代，二进制代码cache)，在容量规划的时候要留意。</p>\n<p>关键业务系统的服务器上内存一般都是够的，所以尽管设得宽松点。</p>\n</blockquote>\n<ol>\n<li><p><code>-Xmx, -Xms</code>, 堆内存大小，2～4G均可，再大了注意GC时间。</p>\n</li>\n<li><p><code>-Xmn or -XX:NewSize and -XX:MaxNewSize or -XX:NewRatio</code>，JDK默认新生代占堆大小的1/3， 个人喜欢把对半分， 增大新生代的大小，能减少GC的频率（但也会加大每次GC的停顿时间），主要是看老生代里没多少长期对象的话，占2/3太多了。可以用-Xmn 直接赋值(等于<code>-XX:NewSize and -XX:MaxNewSize</code>同值的缩写)，或把NewRatio设为1来对半分(但如果想设置新生代比老生代大就只能用-Xmn)。</p>\n</li>\n<li><p><code>-XX: PermSize=128m -XX:MaxPermSize=512m(JDK7)</code>现在的应用有Hibernate/Spring这些闹腾的家伙AOP之后类都比较多，可以一开始就把初始值从64M设到128M，并设一个更大的Max值以求保险。</p>\n</li>\n<li><p><code>-XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m（JDK8）</code>，JDK8的永生代几乎可用完机器的所有内存，同样设一个128M的初始值，512M的最大值保护一下。</p>\n</li>\n</ol>\n<h3 id=\"其他内存大小等可选设置\"><a href=\"#其他内存大小等可选设置\" class=\"headerlink\" title=\"其他内存大小等可选设置\"></a>其他内存大小等可选设置</h3><ol>\n<li><p><code>-XX:SurvivorRatio</code>新生代中每个存活区的大小，默认为8，即1/10的新生代<code>1/(SurvivorRatio+2)</code>，有人喜欢设小点省点给新生代，但要避免太小使得存活区放不下临时对象而要晋升到老生代，还是从GC Log里看实际情况了。</p>\n</li>\n<li><p><code>-Xss</code>在堆之外，线程占用栈内存，默认每条线程为1M（以前是256K）。存放方法调用出参入参的栈，局部变量，标量替换后掉局部变量等，有人喜欢设小点节约内存开更多线程。但反正内存够也就不必要设小，有人喜欢再设大点，特别是有JSON解析之类的递归调用时不能设太小。</p>\n</li>\n<li><p><code>-XX:MaxDirectMemorySize</code>，堆外内存/直接内存的大小，默认为Heap区总内存减去一个Survivor区的大小，详见<a href=\"http://calvin1978.blogcn.com/articles/directbytebuffer.html\" target=\"_blank\" rel=\"external\">Netty之堆外内存扫盲篇</a>。</p>\n</li>\n<li><p><code>-XX:ReservedCodeCacheSize</code>， JIT编译后二进制代码的存放区，满了之后就不再编译。JDK7默认不开多层编译48M，开了96M，而JDK8默认开多层编译240M。可以在JMX里看看<code>CodeCache</code>的大小，JDK7下的48M一般够了，也可以把它设大点，反正内存多。</p>\n</li>\n</ol>\n<h3 id=\"GC日志\"><a href=\"#GC日志\" class=\"headerlink\" title=\"GC日志\"></a>GC日志</h3><ol>\n<li><p>基本配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-Xloggc:/dev/shm/gc-myapplication.log -XX:+PrintGCDateStamps -XX:+PrintGCDetails</div></pre></td></tr></table></figure>\n<p> 详见<a href=\"http://ifeve.com/useful-jvm-flags-part-8-gc-logging/\" target=\"_blank\" rel=\"external\">JVM实用参数（八）GC日志</a>，有人担心写GC日志会影响性能，但测试下来实在没什么影响，还是留一份用来排查好。</p>\n<p> 到后来，又发现如果遇上高IO的情况，如果GC的时候，操作系统正在flush pageCache 到磁盘，也可能导致GC log文件被锁住，从而让GC结束不了。所以把它指向了/dev/shm 这种内存中文件系统，避免这种停顿，详见<a href=\"http://calvin1978.blogcn.com/articles/%E2%80%9Chttp://engineering.linkedin.com/blog/2016/02/eliminating-large-jvm-gc-pauses-caused-by-background-io-traffic%E2%80%9D\" target=\"_blank\" rel=\"external\">Eliminating Large JVM GC Pauses Caused by Background IO Traffic</a></p>\n<p> 用+PrintGCDateStamps而不是PrintGCTimeStamps，打印可读的日期而不是时间戳。</p>\n</li>\n<li><p>-XX:+PrintGCApplicationStoppedTime它的名字没起好，它除了打印清晰的GC停顿时间外，还可以打印其他的停顿时间，比如取消偏向锁，class 被agent redefine，code deoptimization等等，有助于发现一些原来没想到的问题，建议也加上。如果真的发现了一些不知什么的停顿，再临时加上”-XX:+PrintSafepointStatistics -XX: PrintSafepointStatisticsCount=1” 找原因。</p>\n</li>\n<li><p>GC日志默认会在重启后清空，但有人担心长期运行不重启的应用会把文件弄得很大，有”-XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=1M”的参数可以让日志滚动起来。但重启后的文件名太混乱太让人头痛，所以还是不加。</p>\n</li>\n</ol>\n<h2 id=\"监控篇\"><a href=\"#监控篇\" class=\"headerlink\" title=\"监控篇\"></a>监控篇</h2><blockquote>\n<p>JVM输出的各种日志，如果未指定路径，通常会生成到运行应用的相同目录，为了避免有时候在不同的地方执行启动脚本，一般将日志路径集中设到一个固定的地方。</p>\n</blockquote>\n<h3 id=\"XX-PrintCommandLineFlags\"><a href=\"#XX-PrintCommandLineFlags\" class=\"headerlink\" title=\"-XX:+PrintCommandLineFlags\"></a>-XX:+PrintCommandLineFlags</h3><p>运维有时会对启动参数做一些临时的更改，将每次启动的参数输出到stdout，将来有据可查。<br>打印出来的是命令行里设置了的参数以及因为这些参数隐式影响的参数，比如开了CMS后，-XX:+UseParNewGC也被自动打开。</p>\n<h3 id=\"XX-OmitStackTraceInFastThrow\"><a href=\"#XX-OmitStackTraceInFastThrow\" class=\"headerlink\" title=\"-XX:-OmitStackTraceInFastThrow\"></a>-XX:-OmitStackTraceInFastThrow</h3><p>为异常设置<code>StackTrace</code>是个昂贵的操作，所以当应用在相同地方抛出相同的异常N次(两万?)之后，JVM会对某些特定异常如NPE，数组越界等进行优化，不再带上异常栈。此时，你可能会看到日志里一条条<code>Nul Point Exception</code>，而真正输出完整栈的日志早被滚动到不知哪里去了，也就完全不知道这NPE发生在什么地方，欲哭无泪。 所以，将它禁止吧。</p>\n<h3 id=\"coredump与-XX-ErrorFile\"><a href=\"#coredump与-XX-ErrorFile\" class=\"headerlink\" title=\"coredump与 -XX:ErrorFile\"></a>coredump与 -XX:ErrorFile</h3><p>JVM crash时，hotspot 会生成一个error文件，提供JVM状态信息的细节。如前所述，将其输出到固定目录，避免到时会到处找这文件。文件名中的%p会被自动替换为应用的PID</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:ErrorFile=$&#123;MYLOGDIR&#125;/hs_err_%p.log</div></pre></td></tr></table></figure>\n<p>当然，更好的做法是生成coredump，从CoreDump能够转出Heap Dump 和 Thread Dump 还有crash的地方，非常实用。</p>\n<p>在启动脚本里加上<code>ulimit -c unlimited</code>或其他的设置方式，如果有root权限，设一下输出目录更好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;/&#123;MYLOGDIR&#125;/coredump.%p&quot; &gt; /proc/sys/kernel/core_pattern</div></pre></td></tr></table></figure>\n<p>什么？你不知道这coredump有什么用？看来你是没遇过JVM Segment Fault的幸福人。</p>\n<h3 id=\"XX-HeapDumpOnOutOfMemoryError\"><a href=\"#XX-HeapDumpOnOutOfMemoryError\" class=\"headerlink\" title=\"-XX:+HeapDumpOnOutOfMemoryError\"></a>-XX:+HeapDumpOnOutOfMemoryError</h3><p>在<code>Out Of Memory</code>，JVM快死快死掉的时候，输出Heap Dump到指定文件。不然开发很多时候还真不知道怎么重现错误。</p>\n<p>路径只指向目录，JVM会保持文件名的唯一性，叫<code>java_pid${pid}.hprof</code>。如果指向文件，而文件已存在，反而不能写入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOGDIR&#125;/</div></pre></td></tr></table></figure>\n<h3 id=\"JMX\"><a href=\"#JMX\" class=\"headerlink\" title=\"JMX\"></a>JMX</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Dcom.sun.management.jmxremote.port=$&#123;MY_JMX_PORT&#125; -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1</div></pre></td></tr></table></figure>\n<p>以上设置，只让本地的Zabbix之类监控软件通过JMX监控JVM，不允许远程访问。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><h3 id=\"性能相关\"><a href=\"#性能相关\" class=\"headerlink\" title=\"性能相关\"></a>性能相关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:-UseBiasedLocking -XX:-UseCounterDecay -XX:AutoBoxCacheMax=20000 -XX:+PerfDisableSharedMem -XX:+AlwaysPreTouch -Djava.security.egd=file:/dev/./urandom</div></pre></td></tr></table></figure>\n<h3 id=\"内存大小相关-JDK7\"><a href=\"#内存大小相关-JDK7\" class=\"headerlink\" title=\"内存大小相关(JDK7)\"></a>内存大小相关(JDK7)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-Xms4096m -Xmx4096m -Xmn2048m -XX:MaxDirectMemorySize=4096m-XX: PermSize=256m -XX:MaxPermSize=512m -XX:ReservedCodeCacheSize=240M</div></pre></td></tr></table></figure>\n<h3 id=\"CMS-GC-相关\"><a href=\"#CMS-GC-相关\" class=\"headerlink\" title=\"CMS GC 相关\"></a>CMS GC 相关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:MaxTenuringThreshold=6 -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled</div></pre></td></tr></table></figure>\n<h3 id=\"GC-日志-相关\"><a href=\"#GC-日志-相关\" class=\"headerlink\" title=\"GC 日志 相关\"></a>GC 日志 相关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-Xloggc:/dev/shm/app-gc.log -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCDateStamps -XX:+PrintGCDetails</div></pre></td></tr></table></figure>\n<h3 id=\"异常-日志-相关\"><a href=\"#异常-日志-相关\" class=\"headerlink\" title=\"异常 日志 相关\"></a>异常 日志 相关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:-OmitStackTraceInFastThrow -XX:ErrorFile=$&#123;LOGDIR&#125;/hs_err_%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOGDIR&#125;/</div></pre></td></tr></table></figure>\n<h3 id=\"JMX相关\"><a href=\"#JMX相关\" class=\"headerlink\" title=\"JMX相关\"></a>JMX相关</h3><p>见3.5</p>\n<hr>\n<p>转载自<code>江南白衣</code>的博客 <a href=\"http://calvin1978.blogcn.com/articles/jvmoption-2.html\" target=\"_blank\" rel=\"external\">《关键业务系统的JVM参数推荐(2016热冬版)》</a></p>"},{"title":"RancherOS 初体验","date":"2017-08-17T12:12:50.000Z","_content":"\n**先来欣赏一张 RancherOS 的系统架构图**\n\n![rancheros](https://github.com/rancher/os/blob/master/docs/rancheros.png?raw=true)\n\n### 序\n\n> 第一次听说 RancherOS 这个东西是在 OSChina 的软件更新上看到的，标题是《基于 Docker 的操作系统 RancherOS》，一听正和我意，集成最新的 Linux4.x 内核，包含最少运行 Docker 所需要的软件，二进制包20M(我去下载的时候是1.0.4版本，大小已经59M 了，不过比起动辄几百 M 的其他 Linux OS，已经很小了)；\n    \n> 今天偶有兴致，准备拿 RancherOS 作为 Docker 容器的宿主机系统来玩玩儿，同时对安装使用的流程进行了整理和理解。\n\n<!-- more -->\n\n### 下载\n\n官网：https://github.com/rancher/os\n\n当前版本：`v1.0.4 - Docker 17.03.1-ce - Linux 4.9.40`\n\nISO 镜像下载地址：https://releases.rancher.com/os/latest/rancheros.iso\n\n### 安装\n\n> The RancherOS ISO file can be used to create a fresh RancherOS install on KVM, VMware, VirtualBox, or bare metal servers. \n\nRancherOS 的 ISO 镜像适用于 KVM，VMware，VirtualBox 或者物理主机。\n\n> You must boot with at least 512MB of memory. If you boot with the ISO, you will automatically be logged in as the rancher user. Only the ISO is set to use autologin by default. If you run from a cloud or install to disk, SSH keys or a password of your choice is expected to be used.\n\n启动至少需要512M 的内存，如果你直接从 ISO 启动（数据全部存储在内存里面，不占用硬盘空间，关机后数据释放，不会保留操作数据），你将会自动登录到`rancher`这个用户，只有从 ISO 启动才会默认自动登录；如果你运行在云主机上或者从硬盘启动，你可以使用 SSH Keys 进行远程连接（从硬盘启动后，rancher 用户在宿主机将无法登录，只能通过 SSH key 进行远程登录）。\n\n---\n\n我这里当然需要安装到硬盘进行使用，数据还是要保留的；\n\n#### 安装到硬盘\n\n> 上面已经讲了从 ISO 启动了 RancherOS，默认登录用户和密码都是`rancher`;\n\n**配置 Configuration**\n\n现在我需要一个在自己的电脑上创建一个叫做`cloud-config.yml`的配置文件，里面的内容如下（这里的配置比较多，我直接贴上了我自己使用的完整配置），其实这个yml 文件就是启动加载文件，每次启动都会去执行里面的配置：\n\n> A cloud-config file can be used to provide configuration when first booting RancherOS.\n\n```yml\n#cloud-config\nhostname: ros-rmbp\nrancher:\n  docker:\n    tls: true\n  network:\n    dns:\n      nameservers:\n      - 8.8.8.8\n      - 8.8.4.4\n  write_files:\n    - container: ntp\n      path: /etc/ntp.conf\n      permissions: \"0644\"\n      owner: root\n      content: |\n        server 0.cn.pool.ntp.org iburst\n        server 1.cn.pool.ntp.org iburst\n        server 2.cn.pool.ntp.org iburst\n        server 3.cn.pool.ntp.org iburst\n\n        # Allow only time queries, at a limited rate, sending KoD when in excess.\n        # Allow all local queries (IPv4, IPv6)\n        restrict default nomodify nopeer noquery limited kod\n        restrict 127.0.0.1\n        restrict [::1]\n\nssh_authorized_keys:\n  - ssh-rsa AAAAB3Nza......(此处省略256个字符)\n```\n\n**上传配置文件**\n\n然后通过 HTTP 下载到 RancherOS 上，我是在本机 Mac 上使用 python http 启动一个静态 Server，然后到 RancherOS 使用 wget 直接 Dowanload 下来，简单暴力；\n\n接下来执行以下 Shell\n\n```\n$ sudo mv cloud-config.yml /var/lib/rancher/conf/\n$ sudo ros install -c /var/lib/rancher/conf/cloud-config.yml -d /dev/sda\n\n## 会有两次 Y/N 的确认，都输入 Y\n## 重启后，就不能直接通过rancher 帐号登录了；\n## 只能 通过 SSH Keys 远程登录 ssh rancher@IP\n```\n**安装必备的 Docker-Compose**\n\n```\n## 由于默认没有 curl command，先用 wget 代替\nwget https://github.com/docker/compose/releases/download/1.15.0/docker-compose-Linux-x86_64\n\nsudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose\n\nchmod +x /usr/local/bin/docker-compose\n```\n**使用**\n\n到目前为止，已经可以愉快的使用 RancherOS 了，试试 Docker\n\n```\n$ docker ps \n$ docker images\n```\n\n### 下篇开始写RancherOS 进阶\n\n\n","source":"_posts/rancheros-free-style.md","raw":"---\ntitle: RancherOS 初体验\ndate: 2017-08-17 20:12:50\ncategories: Docker\ntags: \n  - Docker\n  - Linux\npermalink: rancher-free-style\n---\n\n**先来欣赏一张 RancherOS 的系统架构图**\n\n![rancheros](https://github.com/rancher/os/blob/master/docs/rancheros.png?raw=true)\n\n### 序\n\n> 第一次听说 RancherOS 这个东西是在 OSChina 的软件更新上看到的，标题是《基于 Docker 的操作系统 RancherOS》，一听正和我意，集成最新的 Linux4.x 内核，包含最少运行 Docker 所需要的软件，二进制包20M(我去下载的时候是1.0.4版本，大小已经59M 了，不过比起动辄几百 M 的其他 Linux OS，已经很小了)；\n    \n> 今天偶有兴致，准备拿 RancherOS 作为 Docker 容器的宿主机系统来玩玩儿，同时对安装使用的流程进行了整理和理解。\n\n<!-- more -->\n\n### 下载\n\n官网：https://github.com/rancher/os\n\n当前版本：`v1.0.4 - Docker 17.03.1-ce - Linux 4.9.40`\n\nISO 镜像下载地址：https://releases.rancher.com/os/latest/rancheros.iso\n\n### 安装\n\n> The RancherOS ISO file can be used to create a fresh RancherOS install on KVM, VMware, VirtualBox, or bare metal servers. \n\nRancherOS 的 ISO 镜像适用于 KVM，VMware，VirtualBox 或者物理主机。\n\n> You must boot with at least 512MB of memory. If you boot with the ISO, you will automatically be logged in as the rancher user. Only the ISO is set to use autologin by default. If you run from a cloud or install to disk, SSH keys or a password of your choice is expected to be used.\n\n启动至少需要512M 的内存，如果你直接从 ISO 启动（数据全部存储在内存里面，不占用硬盘空间，关机后数据释放，不会保留操作数据），你将会自动登录到`rancher`这个用户，只有从 ISO 启动才会默认自动登录；如果你运行在云主机上或者从硬盘启动，你可以使用 SSH Keys 进行远程连接（从硬盘启动后，rancher 用户在宿主机将无法登录，只能通过 SSH key 进行远程登录）。\n\n---\n\n我这里当然需要安装到硬盘进行使用，数据还是要保留的；\n\n#### 安装到硬盘\n\n> 上面已经讲了从 ISO 启动了 RancherOS，默认登录用户和密码都是`rancher`;\n\n**配置 Configuration**\n\n现在我需要一个在自己的电脑上创建一个叫做`cloud-config.yml`的配置文件，里面的内容如下（这里的配置比较多，我直接贴上了我自己使用的完整配置），其实这个yml 文件就是启动加载文件，每次启动都会去执行里面的配置：\n\n> A cloud-config file can be used to provide configuration when first booting RancherOS.\n\n```yml\n#cloud-config\nhostname: ros-rmbp\nrancher:\n  docker:\n    tls: true\n  network:\n    dns:\n      nameservers:\n      - 8.8.8.8\n      - 8.8.4.4\n  write_files:\n    - container: ntp\n      path: /etc/ntp.conf\n      permissions: \"0644\"\n      owner: root\n      content: |\n        server 0.cn.pool.ntp.org iburst\n        server 1.cn.pool.ntp.org iburst\n        server 2.cn.pool.ntp.org iburst\n        server 3.cn.pool.ntp.org iburst\n\n        # Allow only time queries, at a limited rate, sending KoD when in excess.\n        # Allow all local queries (IPv4, IPv6)\n        restrict default nomodify nopeer noquery limited kod\n        restrict 127.0.0.1\n        restrict [::1]\n\nssh_authorized_keys:\n  - ssh-rsa AAAAB3Nza......(此处省略256个字符)\n```\n\n**上传配置文件**\n\n然后通过 HTTP 下载到 RancherOS 上，我是在本机 Mac 上使用 python http 启动一个静态 Server，然后到 RancherOS 使用 wget 直接 Dowanload 下来，简单暴力；\n\n接下来执行以下 Shell\n\n```\n$ sudo mv cloud-config.yml /var/lib/rancher/conf/\n$ sudo ros install -c /var/lib/rancher/conf/cloud-config.yml -d /dev/sda\n\n## 会有两次 Y/N 的确认，都输入 Y\n## 重启后，就不能直接通过rancher 帐号登录了；\n## 只能 通过 SSH Keys 远程登录 ssh rancher@IP\n```\n**安装必备的 Docker-Compose**\n\n```\n## 由于默认没有 curl command，先用 wget 代替\nwget https://github.com/docker/compose/releases/download/1.15.0/docker-compose-Linux-x86_64\n\nsudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose\n\nchmod +x /usr/local/bin/docker-compose\n```\n**使用**\n\n到目前为止，已经可以愉快的使用 RancherOS 了，试试 Docker\n\n```\n$ docker ps \n$ docker images\n```\n\n### 下篇开始写RancherOS 进阶\n\n\n","slug":"rancher-free-style","published":1,"updated":"2017-09-06T06:17:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj93te72a000ftoz6h32bqeof","content":"<p><strong>先来欣赏一张 RancherOS 的系统架构图</strong></p>\n<p><img src=\"https://github.com/rancher/os/blob/master/docs/rancheros.png?raw=true\" alt=\"rancheros\"></p>\n<h3 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h3><blockquote>\n<p>第一次听说 RancherOS 这个东西是在 OSChina 的软件更新上看到的，标题是《基于 Docker 的操作系统 RancherOS》，一听正和我意，集成最新的 Linux4.x 内核，包含最少运行 Docker 所需要的软件，二进制包20M(我去下载的时候是1.0.4版本，大小已经59M 了，不过比起动辄几百 M 的其他 Linux OS，已经很小了)；</p>\n<p>今天偶有兴致，准备拿 RancherOS 作为 Docker 容器的宿主机系统来玩玩儿，同时对安装使用的流程进行了整理和理解。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>官网：<a href=\"https://github.com/rancher/os\" target=\"_blank\" rel=\"external\">https://github.com/rancher/os</a></p>\n<p>当前版本：<code>v1.0.4 - Docker 17.03.1-ce - Linux 4.9.40</code></p>\n<p>ISO 镜像下载地址：<a href=\"https://releases.rancher.com/os/latest/rancheros.iso\" target=\"_blank\" rel=\"external\">https://releases.rancher.com/os/latest/rancheros.iso</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><blockquote>\n<p>The RancherOS ISO file can be used to create a fresh RancherOS install on KVM, VMware, VirtualBox, or bare metal servers. </p>\n</blockquote>\n<p>RancherOS 的 ISO 镜像适用于 KVM，VMware，VirtualBox 或者物理主机。</p>\n<blockquote>\n<p>You must boot with at least 512MB of memory. If you boot with the ISO, you will automatically be logged in as the rancher user. Only the ISO is set to use autologin by default. If you run from a cloud or install to disk, SSH keys or a password of your choice is expected to be used.</p>\n</blockquote>\n<p>启动至少需要512M 的内存，如果你直接从 ISO 启动（数据全部存储在内存里面，不占用硬盘空间，关机后数据释放，不会保留操作数据），你将会自动登录到<code>rancher</code>这个用户，只有从 ISO 启动才会默认自动登录；如果你运行在云主机上或者从硬盘启动，你可以使用 SSH Keys 进行远程连接（从硬盘启动后，rancher 用户在宿主机将无法登录，只能通过 SSH key 进行远程登录）。</p>\n<hr>\n<p>我这里当然需要安装到硬盘进行使用，数据还是要保留的；</p>\n<h4 id=\"安装到硬盘\"><a href=\"#安装到硬盘\" class=\"headerlink\" title=\"安装到硬盘\"></a>安装到硬盘</h4><blockquote>\n<p>上面已经讲了从 ISO 启动了 RancherOS，默认登录用户和密码都是<code>rancher</code>;</p>\n</blockquote>\n<p><strong>配置 Configuration</strong></p>\n<p>现在我需要一个在自己的电脑上创建一个叫做<code>cloud-config.yml</code>的配置文件，里面的内容如下（这里的配置比较多，我直接贴上了我自己使用的完整配置），其实这个yml 文件就是启动加载文件，每次启动都会去执行里面的配置：</p>\n<blockquote>\n<p>A cloud-config file can be used to provide configuration when first booting RancherOS.</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#cloud-config</span></div><div class=\"line\"><span class=\"attr\">hostname:</span> <span class=\"string\">ros-rmbp</span></div><div class=\"line\"><span class=\"attr\">rancher:</span></div><div class=\"line\"><span class=\"attr\">  docker:</span></div><div class=\"line\"><span class=\"attr\">    tls:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  network:</span></div><div class=\"line\"><span class=\"attr\">    dns:</span></div><div class=\"line\"><span class=\"attr\">      nameservers:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">8.8</span><span class=\"number\">.4</span><span class=\"number\">.4</span></div><div class=\"line\"><span class=\"attr\">  write_files:</span></div><div class=\"line\"><span class=\"attr\">    - container:</span> <span class=\"string\">ntp</span></div><div class=\"line\"><span class=\"attr\">      path:</span> <span class=\"string\">/etc/ntp.conf</span></div><div class=\"line\"><span class=\"attr\">      permissions:</span> <span class=\"string\">\"0644\"</span></div><div class=\"line\"><span class=\"attr\">      owner:</span> <span class=\"string\">root</span></div><div class=\"line\"><span class=\"attr\">      content:</span> <span class=\"string\">|</span></div><div class=\"line\"><span class=\"string\">        server 0.cn.pool.ntp.org iburst</span></div><div class=\"line\"><span class=\"string\">        server 1.cn.pool.ntp.org iburst</span></div><div class=\"line\"><span class=\"string\">        server 2.cn.pool.ntp.org iburst</span></div><div class=\"line\"><span class=\"string\">        server 3.cn.pool.ntp.org iburst</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">        # Allow only time queries, at a limited rate, sending KoD when in excess.</span></div><div class=\"line\"><span class=\"string\">        # Allow all local queries (IPv4, IPv6)</span></div><div class=\"line\"><span class=\"string\">        restrict default nomodify nopeer noquery limited kod</span></div><div class=\"line\"><span class=\"string\">        restrict 127.0.0.1</span></div><div class=\"line\"><span class=\"string\">        restrict [::1]</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span><span class=\"attr\">ssh_authorized_keys:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">ssh-rsa</span> <span class=\"string\">AAAAB3Nza......(此处省略256个字符)</span></div></pre></td></tr></table></figure>\n<p><strong>上传配置文件</strong></p>\n<p>然后通过 HTTP 下载到 RancherOS 上，我是在本机 Mac 上使用 python http 启动一个静态 Server，然后到 RancherOS 使用 wget 直接 Dowanload 下来，简单暴力；</p>\n<p>接下来执行以下 Shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo mv cloud-config.yml /var/lib/rancher/conf/</div><div class=\"line\">$ sudo ros install -c /var/lib/rancher/conf/cloud-config.yml -d /dev/sda</div><div class=\"line\"></div><div class=\"line\">## 会有两次 Y/N 的确认，都输入 Y</div><div class=\"line\">## 重启后，就不能直接通过rancher 帐号登录了；</div><div class=\"line\">## 只能 通过 SSH Keys 远程登录 ssh rancher@IP</div></pre></td></tr></table></figure>\n<p><strong>安装必备的 Docker-Compose</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">## 由于默认没有 curl command，先用 wget 代替</div><div class=\"line\">wget https://github.com/docker/compose/releases/download/1.15.0/docker-compose-Linux-x86_64</div><div class=\"line\"></div><div class=\"line\">sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</div><div class=\"line\"></div><div class=\"line\">chmod +x /usr/local/bin/docker-compose</div></pre></td></tr></table></figure>\n<p><strong>使用</strong></p>\n<p>到目前为止，已经可以愉快的使用 RancherOS 了，试试 Docker</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker ps </div><div class=\"line\">$ docker images</div></pre></td></tr></table></figure>\n<h3 id=\"下篇开始写RancherOS-进阶\"><a href=\"#下篇开始写RancherOS-进阶\" class=\"headerlink\" title=\"下篇开始写RancherOS 进阶\"></a>下篇开始写RancherOS 进阶</h3>","site":{"data":{}},"excerpt":"<p><strong>先来欣赏一张 RancherOS 的系统架构图</strong></p>\n<p><img src=\"https://github.com/rancher/os/blob/master/docs/rancheros.png?raw=true\" alt=\"rancheros\"></p>\n<h3 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h3><blockquote>\n<p>第一次听说 RancherOS 这个东西是在 OSChina 的软件更新上看到的，标题是《基于 Docker 的操作系统 RancherOS》，一听正和我意，集成最新的 Linux4.x 内核，包含最少运行 Docker 所需要的软件，二进制包20M(我去下载的时候是1.0.4版本，大小已经59M 了，不过比起动辄几百 M 的其他 Linux OS，已经很小了)；</p>\n<p>今天偶有兴致，准备拿 RancherOS 作为 Docker 容器的宿主机系统来玩玩儿，同时对安装使用的流程进行了整理和理解。</p>\n</blockquote>","more":"<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>官网：<a href=\"https://github.com/rancher/os\" target=\"_blank\" rel=\"external\">https://github.com/rancher/os</a></p>\n<p>当前版本：<code>v1.0.4 - Docker 17.03.1-ce - Linux 4.9.40</code></p>\n<p>ISO 镜像下载地址：<a href=\"https://releases.rancher.com/os/latest/rancheros.iso\" target=\"_blank\" rel=\"external\">https://releases.rancher.com/os/latest/rancheros.iso</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><blockquote>\n<p>The RancherOS ISO file can be used to create a fresh RancherOS install on KVM, VMware, VirtualBox, or bare metal servers. </p>\n</blockquote>\n<p>RancherOS 的 ISO 镜像适用于 KVM，VMware，VirtualBox 或者物理主机。</p>\n<blockquote>\n<p>You must boot with at least 512MB of memory. If you boot with the ISO, you will automatically be logged in as the rancher user. Only the ISO is set to use autologin by default. If you run from a cloud or install to disk, SSH keys or a password of your choice is expected to be used.</p>\n</blockquote>\n<p>启动至少需要512M 的内存，如果你直接从 ISO 启动（数据全部存储在内存里面，不占用硬盘空间，关机后数据释放，不会保留操作数据），你将会自动登录到<code>rancher</code>这个用户，只有从 ISO 启动才会默认自动登录；如果你运行在云主机上或者从硬盘启动，你可以使用 SSH Keys 进行远程连接（从硬盘启动后，rancher 用户在宿主机将无法登录，只能通过 SSH key 进行远程登录）。</p>\n<hr>\n<p>我这里当然需要安装到硬盘进行使用，数据还是要保留的；</p>\n<h4 id=\"安装到硬盘\"><a href=\"#安装到硬盘\" class=\"headerlink\" title=\"安装到硬盘\"></a>安装到硬盘</h4><blockquote>\n<p>上面已经讲了从 ISO 启动了 RancherOS，默认登录用户和密码都是<code>rancher</code>;</p>\n</blockquote>\n<p><strong>配置 Configuration</strong></p>\n<p>现在我需要一个在自己的电脑上创建一个叫做<code>cloud-config.yml</code>的配置文件，里面的内容如下（这里的配置比较多，我直接贴上了我自己使用的完整配置），其实这个yml 文件就是启动加载文件，每次启动都会去执行里面的配置：</p>\n<blockquote>\n<p>A cloud-config file can be used to provide configuration when first booting RancherOS.</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#cloud-config</span></div><div class=\"line\"><span class=\"attr\">hostname:</span> <span class=\"string\">ros-rmbp</span></div><div class=\"line\"><span class=\"attr\">rancher:</span></div><div class=\"line\"><span class=\"attr\">  docker:</span></div><div class=\"line\"><span class=\"attr\">    tls:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  network:</span></div><div class=\"line\"><span class=\"attr\">    dns:</span></div><div class=\"line\"><span class=\"attr\">      nameservers:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">8.8</span><span class=\"number\">.4</span><span class=\"number\">.4</span></div><div class=\"line\"><span class=\"attr\">  write_files:</span></div><div class=\"line\"><span class=\"attr\">    - container:</span> <span class=\"string\">ntp</span></div><div class=\"line\"><span class=\"attr\">      path:</span> <span class=\"string\">/etc/ntp.conf</span></div><div class=\"line\"><span class=\"attr\">      permissions:</span> <span class=\"string\">\"0644\"</span></div><div class=\"line\"><span class=\"attr\">      owner:</span> <span class=\"string\">root</span></div><div class=\"line\"><span class=\"attr\">      content:</span> <span class=\"string\">|</span></div><div class=\"line\"><span class=\"string\">        server 0.cn.pool.ntp.org iburst</span></div><div class=\"line\"><span class=\"string\">        server 1.cn.pool.ntp.org iburst</span></div><div class=\"line\"><span class=\"string\">        server 2.cn.pool.ntp.org iburst</span></div><div class=\"line\"><span class=\"string\">        server 3.cn.pool.ntp.org iburst</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">        # Allow only time queries, at a limited rate, sending KoD when in excess.</span></div><div class=\"line\"><span class=\"string\">        # Allow all local queries (IPv4, IPv6)</span></div><div class=\"line\"><span class=\"string\">        restrict default nomodify nopeer noquery limited kod</span></div><div class=\"line\"><span class=\"string\">        restrict 127.0.0.1</span></div><div class=\"line\"><span class=\"string\">        restrict [::1]</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span><span class=\"attr\">ssh_authorized_keys:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">ssh-rsa</span> <span class=\"string\">AAAAB3Nza......(此处省略256个字符)</span></div></pre></td></tr></table></figure>\n<p><strong>上传配置文件</strong></p>\n<p>然后通过 HTTP 下载到 RancherOS 上，我是在本机 Mac 上使用 python http 启动一个静态 Server，然后到 RancherOS 使用 wget 直接 Dowanload 下来，简单暴力；</p>\n<p>接下来执行以下 Shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo mv cloud-config.yml /var/lib/rancher/conf/</div><div class=\"line\">$ sudo ros install -c /var/lib/rancher/conf/cloud-config.yml -d /dev/sda</div><div class=\"line\"></div><div class=\"line\">## 会有两次 Y/N 的确认，都输入 Y</div><div class=\"line\">## 重启后，就不能直接通过rancher 帐号登录了；</div><div class=\"line\">## 只能 通过 SSH Keys 远程登录 ssh rancher@IP</div></pre></td></tr></table></figure>\n<p><strong>安装必备的 Docker-Compose</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">## 由于默认没有 curl command，先用 wget 代替</div><div class=\"line\">wget https://github.com/docker/compose/releases/download/1.15.0/docker-compose-Linux-x86_64</div><div class=\"line\"></div><div class=\"line\">sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</div><div class=\"line\"></div><div class=\"line\">chmod +x /usr/local/bin/docker-compose</div></pre></td></tr></table></figure>\n<p><strong>使用</strong></p>\n<p>到目前为止，已经可以愉快的使用 RancherOS 了，试试 Docker</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker ps </div><div class=\"line\">$ docker images</div></pre></td></tr></table></figure>\n<h3 id=\"下篇开始写RancherOS-进阶\"><a href=\"#下篇开始写RancherOS-进阶\" class=\"headerlink\" title=\"下篇开始写RancherOS 进阶\"></a>下篇开始写RancherOS 进阶</h3>"}],"PostAsset":[{"_id":"source/_posts/hhkb-pro2-types-show/HHKB04.jpg","slug":"HHKB04.jpg","post":"cj93te7200003toz6r4s11n7r","modified":1,"renderable":0},{"_id":"source/_posts/hhkb-pro2-types-show/hhkb-sw01.png","slug":"hhkb-sw01.png","post":"cj93te7200003toz6r4s11n7r","modified":1,"renderable":0},{"_id":"source/_posts/hhkb-pro2-types-show/hhkb-sw02.png","slug":"hhkb-sw02.png","post":"cj93te7200003toz6r4s11n7r","modified":1,"renderable":0},{"_id":"source/_posts/hhkb-pro2-types-show/karabiner-config.png","slug":"karabiner-config.png","post":"cj93te7200003toz6r4s11n7r","modified":1,"renderable":0},{"_id":"source/_posts/change-centos-yum-mirrors/centos-logo.png","slug":"centos-logo.png","post":"cj93te71x0001toz63uxn2ajr","modified":1,"renderable":0},{"_id":"source/_posts/python-versions-pyenv/python-pyenv-logo.png","post":"cj93te727000atoz68jp2wj4n","slug":"python-pyenv-logo.png","modified":1,"renderable":1},{"_id":"source/_posts/hhkb-pro2-types-show/HHKB01.jpg","post":"cj93te7200003toz6r4s11n7r","slug":"HHKB01.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hhkb-pro2-types-show/HHKB03.jpg","post":"cj93te7200003toz6r4s11n7r","slug":"HHKB03.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hhkb-pro2-types-show/HHKB05.jpg","post":"cj93te7200003toz6r4s11n7r","slug":"HHKB05.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hhkb-pro2-types-show/HHKB08.jpg","post":"cj93te7200003toz6r4s11n7r","slug":"HHKB08.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hhkb-pro2-types-show/bjarne_hhkb.jpg","post":"cj93te7200003toz6r4s11n7r","slug":"bjarne_hhkb.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hhkb-pro2-types-show/hhkb-gnu.jpg","post":"cj93te7200003toz6r4s11n7r","slug":"hhkb-gnu.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hhkb-pro2-types-show/hhkb.jpg","post":"cj93te7200003toz6r4s11n7r","slug":"hhkb.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hhkb-pro2-types-show/tux_hacking.jpg","post":"cj93te7200003toz6r4s11n7r","slug":"tux_hacking.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cj93te71x0001toz63uxn2ajr","category_id":"cj93te7220005toz66nday3kd","_id":"cj93te72a000etoz6i4t7hm9e"},{"post_id":"cj93te7200003toz6r4s11n7r","category_id":"cj93te727000btoz6ep2367o6","_id":"cj93te72d000jtoz6xbnq52oo"},{"post_id":"cj93te7240007toz6arzvnwhv","category_id":"cj93te72b000gtoz61jn8tlf2","_id":"cj93te72h000ntoz62h7yzxdk"},{"post_id":"cj93te7260009toz6adbmpzrm","category_id":"cj93te72d000ltoz6oz4wpmfm","_id":"cj93te72h000rtoz649xo02ue"},{"post_id":"cj93te727000atoz68jp2wj4n","category_id":"cj93te72h000otoz6wd879vi7","_id":"cj93te72j000vtoz6r6e4qnfb"},{"post_id":"cj93te728000dtoz6qe8t2gyx","category_id":"cj93te72h000ttoz6y71llgqi","_id":"cj93te72k0010toz679qmkvfa"},{"post_id":"cj93te72a000ftoz6h32bqeof","category_id":"cj93te72b000gtoz61jn8tlf2","_id":"cj93te72l0013toz671sww8l6"}],"PostTag":[{"post_id":"cj93te71x0001toz63uxn2ajr","tag_id":"cj93te7240006toz6sry1ecfl","_id":"cj93te72d000itoz6l8qaj6oq"},{"post_id":"cj93te71x0001toz63uxn2ajr","tag_id":"cj93te727000ctoz6qu0k6yng","_id":"cj93te72d000ktoz6mbtevgx0"},{"post_id":"cj93te7200003toz6r4s11n7r","tag_id":"cj93te72b000htoz648psovpd","_id":"cj93te72h000qtoz6xgitcw2a"},{"post_id":"cj93te7200003toz6r4s11n7r","tag_id":"cj93te72e000mtoz6ntpmhqks","_id":"cj93te72h000stoz6rjne4ejt"},{"post_id":"cj93te7240007toz6arzvnwhv","tag_id":"cj93te72h000ptoz6r0n3cq7o","_id":"cj93te72k000ytoz6wyn4np4f"},{"post_id":"cj93te7240007toz6arzvnwhv","tag_id":"cj93te7240006toz6sry1ecfl","_id":"cj93te72k000ztoz6rm1sv24h"},{"post_id":"cj93te7260009toz6adbmpzrm","tag_id":"cj93te72j000wtoz6r5zc013o","_id":"cj93te72l0012toz6dmwbzckk"},{"post_id":"cj93te727000atoz68jp2wj4n","tag_id":"cj93te72k0011toz66m9y9ahh","_id":"cj93te72l0015toz60bopfjq5"},{"post_id":"cj93te728000dtoz6qe8t2gyx","tag_id":"cj93te72l0014toz67vbmwepk","_id":"cj93te72m0018toz68ey55dxg"},{"post_id":"cj93te728000dtoz6qe8t2gyx","tag_id":"cj93te72l0016toz6l2wrf55q","_id":"cj93te72m0019toz6h8grs16m"},{"post_id":"cj93te72a000ftoz6h32bqeof","tag_id":"cj93te72h000ptoz6r0n3cq7o","_id":"cj93te72m001atoz6s97mu0j0"},{"post_id":"cj93te72a000ftoz6h32bqeof","tag_id":"cj93te7240006toz6sry1ecfl","_id":"cj93te72m001btoz6ae13sbxh"}],"Tag":[{"name":"Linux","_id":"cj93te7240006toz6sry1ecfl"},{"name":"CentOS","_id":"cj93te727000ctoz6qu0k6yng"},{"name":"HHKB","_id":"cj93te72b000htoz648psovpd"},{"name":"键盘","_id":"cj93te72e000mtoz6ntpmhqks"},{"name":"Docker","_id":"cj93te72h000ptoz6r0n3cq7o"},{"name":"hello-world","_id":"cj93te72j000wtoz6r5zc013o"},{"name":"Python","_id":"cj93te72k0011toz66m9y9ahh"},{"name":"JAVA","_id":"cj93te72l0014toz67vbmwepk"},{"name":"JVM","_id":"cj93te72l0016toz6l2wrf55q"}]}}